{"version":3,"sources":["webpack:///./node_modules/aframe-extras/src/controls/index.js","webpack:///./node_modules/aframe-extras/src/controls/checkpoint-controls.js","webpack:///./node_modules/aframe-extras/src/controls/gamepad-controls.js","webpack:///./node_modules/aframe-extras/lib/GamepadButton.js","webpack:///./node_modules/aframe-extras/lib/GamepadButtonEvent.js","webpack:///./node_modules/aframe-extras/src/controls/keyboard-controls.js","webpack:///./node_modules/aframe-extras/lib/keyboard.polyfill.js","webpack:///./node_modules/aframe-extras/src/controls/touch-controls.js","webpack:///./node_modules/aframe-extras/src/controls/movement-controls.js","webpack:///./node_modules/aframe-extras/src/controls/trackpad-controls.js","webpack:///./node_modules/aframe-extras/src/loaders/index.js","webpack:///./node_modules/aframe-extras/src/loaders/animation-mixer.js","webpack:///./node_modules/aframe-extras/src/loaders/collada-model-legacy.js","webpack:///./node_modules/aframe-extras/lib/ColladaLoader.js","webpack:///./node_modules/aframe-extras/src/loaders/fbx-model.js","webpack:///./node_modules/aframe-extras/lib/FBXLoader.js","webpack:///./node_modules/aframe-extras/src/loaders/gltf-model-legacy.js","webpack:///./node_modules/aframe-extras/lib/fetch-script.js","webpack:///./node_modules/aframe-extras/src/loaders/object-model.js","webpack:///./node_modules/aframe-extras/src/misc/index.js","webpack:///./node_modules/aframe-extras/src/misc/checkpoint.js","webpack:///./node_modules/aframe-extras/src/misc/cube-env-map.js","webpack:///./node_modules/aframe-extras/src/misc/grab.js","webpack:///./node_modules/aframe-extras/src/misc/jump-ability.js","webpack:///./node_modules/aframe-extras/src/misc/kinematic-body.js","webpack:///./node_modules/aframe-extras/src/misc/mesh-smooth.js","webpack:///./node_modules/aframe-extras/src/misc/normal-material.js","webpack:///./node_modules/aframe-extras/src/misc/sphere-collider.js","webpack:///./node_modules/aframe-extras/src/pathfinding/index.js","webpack:///./node_modules/aframe-extras/src/pathfinding/nav-mesh.js","webpack:///./node_modules/aframe-extras/src/pathfinding/nav-agent.js","webpack:///./node_modules/aframe-extras/src/pathfinding/system.js","webpack:///./node_modules/three-pathfinding/dist/three-pathfinding.module.js","webpack:///./node_modules/aframe-extras/src/primitives/index.js","webpack:///./node_modules/aframe-extras/src/primitives/a-grid.js","webpack:///./node_modules/aframe-extras/src/primitives/a-hexgrid.js","webpack:///./node_modules/aframe-extras/lib/hex-grid.min.js","webpack:///./node_modules/aframe-extras/lib/default-hex-grid.js","webpack:///./node_modules/aframe-extras/src/primitives/a-ocean.js","webpack:///./node_modules/aframe-extras/src/primitives/a-tube.js","webpack:///./node_modules/aframe-extras/index.js"],"names":["__webpack_require__","module","exports","AFRAME","registerComponent","schema","enabled","default","mode","oneOf","animateSpeed","init","this","active","checkpoint","isNavMeshConstrained","offset","THREE","Vector3","position","targetPosition","play","pause","setCheckpoint","el","emit","sync","distanceTo","data","setAttribute","components","updateNavLocation","isVelocityActive","getVelocity","set","setLength","copy","getAttribute","object3D","getWorldPosition","add","getOffset","sub","GamepadButton","GamepadButtonEvent","controller","debug","camera","type","rotationSensitivity","scene","sceneEl","prevTime","window","performance","now","buttons","rotation","pitch","Object3D","x","Math","degToRad","yaw","y","addBehavior","update","tick","t","dt","updateButtonState","updateRotation","remove","isConnected","dpad","getDpad","joystick0","getJoystick","inputX","inputY","abs","getVelocityDelta","dVelocity","z","isRotationActive","joystick1","lookControls","hasLookControls","pitchObject","yawObject","lookVector","multiplyScalar","max","PI","min","gamepad","getGamepad","i","length","pressed","Object","keys","event","index","localGamepad","navigator","getGamepads","proxyControls","getButton","getAxis","axes","Vector2","Error","DPAD_RIGHT","DPAD_LEFT","DPAD_UP","DPAD_DOWN","connected","getID","id","assign","FACE_1","FACE_2","FACE_3","FACE_4","L_SHOULDER_1","R_SHOULDER_1","L_SHOULDER_2","R_SHOULDER_2","SELECT","START","VENDOR","details","value","KeyboardEvent","localKeys","listeners","keydown","onKeyDown","bind","keyup","onKeyUp","blur","onBlur","attachEventListeners","getKeys","KeyW","ArrowUp","KeyA","ArrowLeft","KeyS","ArrowDown","KeyD","ArrowRight","clone","removeEventListeners","addEventListener","removeEventListener","utils","shouldCaptureKeyEvent","code","hasOwnProperty","console","log","isPressed","isProxied","getKeyboard","global","nativeKeyboardEvent","TypeError","DOM_KEY_LOCATION_STANDARD","DOM_KEY_LOCATION_LEFT","DOM_KEY_LOCATION_RIGHT","DOM_KEY_LOCATION_NUMPAD","STANDARD","LEFT","RIGHT","NUMPAD","contains","s","ss","String","indexOf","os","platform","userAgent","browser","vendor","browser_os","mergeIf","baseTable","select","table","forEach","keyCode","keyCodeToInfoTable","3","6","8","9","12","13","16","17","18","19","20","21","22","23","24","25","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42","43","44","45","46","47","48","keyCap","49","50","51","52","53","54","55","56","57","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","location","92","93","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","144","145","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","186","187","188","189","190","191","192","219","220","221","222","226","229","246","247","248","249","250","251","254","59","61","10","keyIdentifierTable","locationTable","224","codeToKeyTable","ShiftLeft","key","ShiftRight","ControlLeft","ControlRight","AltLeft","AltRight","OSLeft","OSRight","NumpadEnter","Space","Digit0","shiftKey","Digit1","Digit2","Digit3","Digit4","Digit5","Digit6","Digit7","Digit8","Digit9","KeyB","KeyC","KeyE","KeyF","KeyG","KeyH","KeyI","KeyJ","KeyK","KeyL","KeyM","KeyN","KeyO","KeyP","KeyQ","KeyR","KeyT","KeyU","KeyV","KeyX","KeyY","KeyZ","Numpad0","Numpad1","Numpad2","Numpad3","Numpad4","Numpad5","Numpad6","Numpad7","Numpad8","Numpad9","NumpadMultiply","NumpadAdd","NumpadComma","NumpadSubtract","NumpadDecimal","NumpadDivide","Semicolon","Equal","Comma","Minus","Period","Slash","Backquote","BracketLeft","Backslash","BracketRight","Quote","IntlBackslash","o","r","keyFixTable","Esc","Nonconvert","Left","Up","Right","Down","Del","Menu","MediaNextTrack","MediaPreviousTrack","SelectMedia","HalfWidth","FullWidth","RomanCharacters","Crsel","Exsel","Zoom","codeTable","k","item","nativeLocation","_","keyInfoForEvent","which","keyInfo","keyLocation","keyIdentifier","entry","define","p","v","defineProperty","prototype","get","desc","getOwnPropertyDescriptor","call","queryKeyCap","locale","toLowerCase","identifyKey","reverseEnabled","bindMethods","direction","addEventListeners","canvasEl","canvas","onTouchStart","onTouchEnd","e","touches","preventDefault","dependencies","controls","speed","fly","constrainToNavMesh","velocityCtrl","velocity","heading","Quaternion","navGroup","navNode","hasLoaded","injectControls","prevData","nav","systems","addAgent","removeAgent","name","start","end","clampedEnd","updateVelocityCtrl","updateVelocity","lengthSq","getGroup","getNode","clampStep","hasAttribute","l","control","vector2","quaternion","getPositionDelta","cameraEl","premultiply","applyQuaternion","factor","enableNegX","enablePosX","enableNegZ","enablePosZ","zVel","xVel","onAxisMove","isMoving","canRecordAxis","startingAxisData","handleSwipeAxis","handleTouchAxis","axisData","detail","axis","velX","velZ","absChangeZ","LoopMode","once","LoopOnce","repeat","LoopRepeat","pingpong","LoopPingPong","regExpEscape","replace","clip","duration","clampWhenFinished","crossFadeDuration","loop","repetitions","Infinity","timeScale","model","mixer","activeActions","getObject3D","load","AnimationMixer","action","loopDelta","stopAllAction","changes","diff","stopAction","playAction","setDuration","setLoop","setEffectiveTimeScale","fadeOut","stop","clips","animations","geometry","re","RegExp","split","map","join","match","clipAction","fadeIn","push","isNaN","ColladaLoader","Component","loader","self","src","rendererSystem","renderer","colladaModel","traverse","object","isMesh","material","color","applyColorCorrection","emissive","emissiveMap","setObject3D","format","removeObject3D","manager","undefined","DefaultLoadingManager","constructor","crossOrigin","url","onLoad","onProgress","onError","scope","path","LoaderUtils","extractUrlBase","FileLoader","setPath","text","parse","setResourcePath","resourcePath","options","convertUpAxis","warn","setCrossOrigin","getElementsByTagName","xml","array","childNodes","child","nodeName","parseStrings","parts","trim","Array","parseFloats","parseFloat","parseInts","parseInt","parseId","substring","isEmpty","parseAssetUnit","parseAssetUpAxis","textContent","parseLibrary","libraryName","parser","library","elements","buildLibrary","builder","build","getBuild","parseAnimationSampler","inputs","nodeType","semantic","parseAnimationChannel","shift","sid","arraySyntax","memberSyntax","member","indices","sampler","buildAnimation","tracks","channels","samplers","sources","target","channel","inputId","INPUT","outputId","OUTPUT","createKeyframeTracks","buildAnimationChannel","getAnimation","inputSource","outputSource","time","stride","il","j","jl","node","nodes","transform","transforms","defaultMatrix","matrix","transpose","keyframes","sort","a","b","transformAnimationData","prepareAnimationData","uuid","scale","animation","times","positionData","quaternionData","scaleData","keyframe","fromArray","decompose","w","VectorKeyframeTrack","QuaternionKeyframeTrack","property","defaultValue","empty","prev","next","getPrev","getNext","interpolate","createMissingKeyframes","buildAnimationClip","animationTracks","AnimationClip","getAnimationClip","parseSkin","bindShapeMatrix","parseSource","joints","parseJoints","vertexWeights","parseVertexWeights","vcount","buildController","geometries","skin","weights","jointOffset","JOINT","weightOffset","WEIGHT","jointSource","inverseSource","INV_BIND_MATRIX","jointCount","vertexSkinData","skinIndex","weightId","skinWeight","weight","descending","d","bindMatrix","Matrix4","identity","boneInverse","buildSkin","skinIndices","skinWeights","buildImage","init_from","getImage","images","parseEffectProfileCOMMON","surfaces","parseEffectNewparam","technique","parseEffectTechnique","extra","parseEffectExtra","parseEffectSurface","parseEffectSampler","source","parameters","parseEffectParameters","parseEffectParameter","opaque","parseEffectParameterTexture","parseEffectParameterTextureExtra","parseEffectParameterTextureExtraTechnique","toUpperCase","parseEffectExtraTechnique","buildEffect","buildMaterial","effect","effects","profile","MeshPhongMaterial","MeshLambertMaterial","MeshBasicMaterial","getTexture","textureObject","image","extension","slice","lastIndexOf","tgaLoader","textureLoader","getTextureLoader","texture","wrapS","wrapU","RepeatWrapping","ClampToEdgeWrapping","wrapT","wrapV","offsetU","offsetV","repeatU","repeatV","parameter","specular","specularMap","normalMap","lightMap","float","shininess","transparent","transparency","opacity","double_sided","side","DoubleSide","getMaterial","materials","parseCameraOptics","parseCameraTechnique","parseCameraParameters","buildCamera","optics","PerspectiveCamera","yfov","aspect_ratio","znear","zfar","ymag","xmag","aspectRatio","OrthographicCamera","getCamera","cameras","parseLightTechnique","parseLightParameters","Color","falloffAngle","f","distance","sqrt","buildLight","light","DirectionalLight","PointLight","SpotLight","AmbientLight","getLight","lights","accessor","parseGeometryVertices","parseGeometryPrimitive","primitive","count","hasUV","inputname","checkUVCoordinates","primitives","uvsNeedsFix","buildGeometry","vertices","groupedPrimitives","groupPrimitives","primitiveType","buildGeometryType","normal","uv","uv2","BufferGeometry","materialKeys","g","vc","addGroup","input","prevLength","buildGeometryData","addAttribute","Float32BufferAttribute","pushVector","sourceStride","sourceArray","c","kl","getGeometry","buildKinematicsModel","parseKinematicsTechniqueCommon","parseKinematicsJoint","links","parseKinematicsLink","parseKinematicsJointParameter","limits","static","zeroPosition","middlePosition","attachments","parseKinematicsAttachment","parseKinematicsTransform","joint","pop","obj","angle","parsePhysicsRigidBody","parsePhysicsTechniqueCommon","inertia","mass","parseKinematicsBindJointAxis","param","tmpJointIndex","jointIndex","substr","buildKinematicsScene","buildTransformList","collada","querySelector","vector","parseNode","instanceCameras","instanceControllers","instanceLights","instanceGeometries","instanceNodes","parseNodeInstance","multiply","makeTranslation","makeRotationAxis","hasNode","skeletons","instances","instance","symbol","buildSkeleton","boneData","sortedBoneData","skeleton","buildBoneHierarchy","visualScenes","children","error","bone","processed","bones","boneInverses","Skeleton","root","isBone","buildNode","objects","instanceCamera","controllers","newObjects","buildObjects","isSkinnedMesh","normalizeSkinWeights","instanceLight","Bone","Group","fallbackMaterial","resolveMaterialBinding","instanceMaterials","LineBasicMaterial","skinning","attributes","LineSegments","Line","SkinnedMesh","Mesh","buildVisualScene","group","getVisualScene","Scene","DOMParser","parseFromString","version","asset","unit","upAxis","parseAsset","TextureLoader","TGALoader","kinematics","kinematicsModels","physicsModels","kinematicsScenes","mesh","element","prepareNodes","rigidBodies","bindJointAxis","setupAnimations","kinematicsModelId","kinematicsSceneId","visualSceneId","kinematicsModel","kinematicsScene","getKinematicsScene","visualScene","jointMap","targetElement","parentVisualElement","parentElement","connect","m0","getJointValue","jointData","setJointValue","visualElement","visualElementName","setupKinematics","parseScene","setFromEuler","Euler","FBXLoader","crossorigin","fbxTree","connections","sceneGraph","FBXTreeParser","GeometryParser","AnimationParser","TextParser","BinaryParser","BinaryReader","buffer","littleEndian","dv","DataView","FBXTree","getFbxVersion","convertFBXTimeToSeconds","resourceDirectory","setResponseType","setTimeout","itemError","FBXBuffer","CORRECT","byteLength","convertArrayBufferToString","FBXText","cursor","read","result","num","isFbxFormatASCII","parseConnections","parseImages","textures","parseTextures","parseMaterials","deformers","parseDeformers","geometryMap","connectionMap","Map","Connections","rawConnection","fromID","toID","relationship","has","parents","parentRelationship","ID","childRelationship","blobs","Objects","videoNodes","Video","nodeID","videoNode","RelativeFilename","Filename","arrayBufferContent","Content","ArrayBuffer","base64Content","parseImage","filename","content","fileName","Loader","Handlers","Uint8Array","URL","createObjectURL","Blob","textureMap","textureNodes","Texture","parseTexture","textureNode","loadTexture","attrName","wrapModeU","WrapModeU","wrapModeV","WrapModeV","valueU","valueV","values","Scaling","currentPath","FileName","materialMap","materialNodes","Material","parseMaterial","materialNode","ShadingModel","parseParameters","setValues","BumpFactor","bumpScale","Diffuse","DiffuseColor","DisplacementFactor","displacementScale","Emissive","EmissiveColor","EmissiveFactor","emissiveIntensity","Opacity","ReflectionFactor","reflectivity","Shininess","Specular","SpecularColor","bumpMap","displacementMap","envMap","mapping","EquirectangularReflectionMapping","alphaMap","LayeredTexture","morphTargets","DeformerNodes","Deformer","deformerNode","relationships","attrType","parseSkeleton","geometryID","morphTarget","rawTargets","parseMorphTargets","deformerNodes","rawBones","boneNode","rawBone","Transform","transformLink","TransformLink","linkMode","Mode","Indexes","Weights","rawMorphTargets","morphTargetNode","rawMorphTarget","initialWeight","DeformPercent","fullWeights","FullWeights","geoID","modelMap","parseModels","modelNodes","Model","modelNode","setLookAtProperties","connection","parent","bindSkeleton","createAmbientLight","setupMorphMaterials","isGroup","createCamera","createLight","createMesh","createCurve","PropertyBinding","sanitizeNodeName","setModelTransforms","subBone","matrixWorld","cameraAttribute","attr","NodeAttribute","CameraProjectionType","nearClippingPlane","NearPlane","farClippingPlane","FarPlane","width","innerWidth","height","innerHeight","AspectWidth","AspectHeight","aspect","fov","FieldOfView","focalLength","FocalLength","setFocalLength","lightAttribute","LightType","intensity","Intensity","CastLightOnObject","FarAttenuationEnd","EnableFarAttenuation","InnerAngle","penumbra","OuterAngle","CastShadows","castShadow","vertexColors","VertexColors","FBX_Deformer","reduce","geo","linewidth","transformData","eulerOrder","RotationOrder","translation","Lcl_Translation","rotationOffset","RotationOffset","Lcl_Rotation","preRotation","PreRotation","postRotation","PostRotation","Lcl_Scaling","generateTransform","applyMatrix","lookAtTarget","pos","lookAt","bindMatrices","parsePoseNodes","geoConnParent","BindPoseNode","Pose","poseNodes","PoseNode","isArray","poseNode","Node","Matrix","GlobalSettings","ambientColor","AmbientColor","morphAttributes","matUuid","sharedMat","geoNodes","Geometry","parseGeometry","geoNode","parseMeshGeometry","parseNurbsGeometry","GeometricTranslation","GeometricRotation","GeometricScaling","genGeometry","preTransform","geoInfo","parseGeoNode","buffers","genBuffers","positionAttribute","vertex","applyToBufferAttribute","colors","Uint16BufferAttribute","weightsIndices","normalAttribute","Matrix3","getNormalMatrix","uvs","uvBuffer","toString","mappingType","prevMaterialIndex","materialIndex","startIndex","currentIndex","groups","lastGroup","lastIndex","addMorphTargets","vertexPositions","Vertices","vertexIndices","PolygonVertexIndex","LayerElementColor","parseVertexColors","LayerElementMaterial","parseMaterialIndices","LayerElementNormal","parseNormals","LayerElementUV","parseUVs","weightTable","polygonIndex","faceLength","displayedWeightsWarning","facePositionIndexes","faceNormals","faceColors","faceUVs","faceWeights","faceWeightIndices","vertexIndex","polygonVertexIndex","endOfFace","weightIndices","getData","wt","wIndex","Weight","weightIndex","currentWeight","comparedWeight","comparedWeightIndex","comparedWeightArray","tmp","genFace","parentGeo","parentGeoNode","rawTarget","morphGeoNode","genMorphGeometry","morphGeo","morphPositions","morphIndex","morphGeoInfo","morphBuffers","NormalNode","MappingInformationType","referenceType","ReferenceInformationType","Normals","indexBuffer","NormalIndex","NormalsIndex","dataSize","UVNode","UV","UVIndex","ColorNode","Colors","ColorIndex","MaterialNode","materialIndexBuffer","Materials","materialIndices","NURBSCurve","order","Order","startKnot","endKnot","degree","knots","KnotVector","controlPoints","pointsValues","Points","Vector4","Form","getPoints","positions","Float32Array","toArray","BufferAttribute","animationClips","rawClips","parseClips","rawClip","addClip","AnimationCurve","curveNodesMap","parseAnimationCurveNodes","parseAnimationCurves","layersMap","parseAnimationLayers","parseAnimStacks","rawCurveNodes","AnimationCurveNode","rawCurveNode","curveNode","curves","rawCurves","animationCurve","KeyTime","KeyValueFloat","animationCurveID","animationCurveRelationship","rawLayers","AnimationLayer","layerCurveNodes","modelID","rawModel","modelName","initialPosition","initialRotation","initialScale","getModelAnimTransform","preRotations","postRotations","morph","deformerID","morpherID","morphName","rawStacks","AnimationStack","layer","rawTracks","concat","generateTracks","setFromQuaternion","T","positionTrack","generateVectorTrack","R","rotationTrack","generateRotationTrack","S","scaleTrack","morphTrack","generateMorphTrack","initialValue","getTimesForAllAxes","getKeyframeTrackValues","interpolateRotations","inverse","euler","quaternionValues","val","morphNum","getObjectByName","morphTargetDictionary","NumberKeyframeTrack","filter","elem","prevValue","xIndex","yIndex","zIndex","xValue","yValue","zValue","curve","valuesSpan","absoluteSpan","numSubIntervals","step","nextValue","initialTime","interval","nextTime","interpolatedTimes","interpolatedValues","inject","getPrevNode","nodeStack","currentIndent","getCurrentNode","getCurrentProp","currentProp","pushStack","popStack","setCurrentProp","currentPropName","allNodes","line","matchComment","matchEmpty","matchBeginning","matchProperty","matchEnd","parseNodeBegin","parseNodeProperty","parseNodePropertyContinued","nodeAttrs","attrs","parseNodeAttr","currentNode","contentLine","propName","propValue","connProps","from","to","rest","append","parseNumberArray","parseNodeSpecialProperty","props","prop","innerPropName","innerPropType1","innerPropType2","innerPropFlag","innerPropValue","type2","flag","reader","skip","getUint32","endOfContent","size","endOffset","getUint64","numProperties","nameLen","getUint8","getString","propertyList","parseProperty","singleProperty","subNode","parseSubNode","getBoolean","getFloat64","getFloat32","getInt32","getInt64","getArrayBuffer","getInt16","arrayLength","encoding","compressedLength","getBooleanArray","getFloat64Array","getFloat32Array","getInt32Array","getInt64Array","Zlib","reader2","Inflate","decompress","low","high","nullByte","decodeText","dataArray","infoObject","tempMat","tempEuler","tempVec","getEulerOrder","makeRotationFromEuler","getInverse","setPosition","enums","a1","a2","fetchScript","loadLoader","promise","loaderPromise","then","GLTFLoader","gltfModel","removeScript","script","document","getElementById","parentNode","removeChild","fetchScriptInternal","Promise","resolve","reject","timeout","scriptId","Date","ceil","random","createElement","async","createScript","timeoutId","disableTimeout","clearTimeout","ok","firstScript","insertBefore","appendScript","settings","ObjectLoader","targetEl","fire","applyEnvMap","materialNames","ensureMaterialArray","needsUpdate","multiple","enableBackground","CubeTextureLoader","object3dsetHandler","oldData","addedMaterialNames","removedMaterialNames","includes","maintainedMaterialNames","setBackground","background","system","physics","GRABBED_STATE","grabbing","hitEl","constraint","onHit","onGripOpen","onGripClose","removeState","removeConstraint","evt","is","addState","CANNON","LockConstraint","body","addConstraint","on","playerHeight","maxJumps","numJumps","beginJump","events","bindings","collide","onCollide","initialVelocity","radius","linearDamping","enableSlopes","enableJumps","addComponent","Vec3","Body","fixedRotation","addShape","Sphere","addBody","removeBody","removeComponent","beforeStep","normalizedVelocity","currentSurfaceNormal","groundNormal","groundBody","didCollide","groundHeight","contacts","getContacts","maxInterval","contact","bi","ni","negate","bj","dot","projectOnPlane","rj","ri","normalize","raycastToGround","driver","world","gravity","ray","hitNormal","vFrom","vTo","Ray","_updateDirection","intersectBody","hasHit","hitNormalWorld","computeVertexNormals","MeshNormalMaterial","flatShading","applyMaterial","state","watch","observer","els","collisions","handleHit","handleHitEnd","MutationObserver","observe","childList","subtree","disconnect","objectEls","querySelectorAll","meshPosition","colliderScale","box","Box3","distanceMap","colliderRadius","scaleVec","clear","getWorldScale","apply","extent","isEntity","setFromObject","getSize","getCenter","hasLoadedNavMesh","loadNavMesh","navMesh","navMeshGeometry","isBufferGeometry","fromBufferGeometry","updateMatrixWorld","setNavMeshGeometry","destination","raycaster","Raycaster","vDest","vDelta","vNext","getPath","vCurrent","vWaypoint","gazeTarget","subVectors","origin","intersections","intersectObject","getNavMesh","point","Pathfinding","pathfinder","ZONE","registerSystem","agents","Set","setZoneData","createZone","agent","ctrl","delete","groupID","findPath","getClosestNode","endTarget","__webpack_exports__","computeCentroids","n","faces","centroid","divideScalar","roundNumber","Number","toFixed","sample","floor","mergeVertexIds","u","setPolygonCentroid","vertexIds","cleanPolygon","h","angleTo","neighbours","isConvex","cross","distanceToSquared","isPointInPoly","isVectorInPolygon","triarea2","vequal","scoreFunction","sinkDown","bubbleUp","rescoreElement","cost","visited","closed","cleanUp","heap","search","reverse","heuristic","buildZone","_buildNavigationMesh","_buildPolygonGroups","_getSharedVerticesInOrder","portals","mergeVertices","_buildPolygonsFromGeometry","polygons","_buildPolygonNeighbours","faceVertexUvs","left","right","stringPull","zones","pow","getRandomNode","Plane","Triangle","setFromCoplanarPoints","projectPoint","closestPointToPoint","I","registerPrimitive","defaultComponents","mappings","vg","defaultHexGrid","Primitive","hexgrid","fetch","response","json","addMesh","grid","HexGrid","fromJSON","board","Board","generateTilemap","addMaterial","VERSION","TAU","DEG_TO_RAD","RAD_TO_DEG","SQRT3","TILE","ENT","STR","HEX","SQR","ABS","tiles","tileGroup","overlay","finder","AStarFinder","setGrid","setEntityOnTile","cellToPixel","cell","heightOffset","tile","entity","addTile","snapTileToGrid","removeTile","splice","dispose","removeAllTiles","getTileAtCell","cellToHash","cells","snapToGrid","pixelToCell","getRandomTile","Tools","randomInt","generateOverlay","reset","generateTiles","Cell","q","userData","walkable","_calcCost","_priority","_visited","_parent","uniqueID","LinkedList","generateID","equals","cellSize","numCells","extrudeSettings","autogenerated","_createVertex","cellShape","Shape","moveTo","lineTo","autoClose","cellGeo","verticesNeedUpdate","cellShapeGeo","ShapeGeometry","_cellWidth","_cellLength","_hashDelimeter","_directions","_diagonals","_list","_vec3","_cel","_conversionVec","_geoCache","_matCache","TWO_THIRDS","_cubeRound","getCellAt","getNeighbors","getRandomCell","clearPath","generateTile","amount","ExtrudeGeometry","Tile","tileScale","bevelEnabled","bevelSegments","steps","bevelSize","bevelThickness","merge","generateTilePoly","rotateOnAxis","generate","createPointsGeometry","getJSON","callback","cache","toJSON","cos","sin","round","SqrGrid","_fullCellSize","randomizeRGB","objectType","selected","highlight","structure","_emissive","getHex","setHex","deselect","toggle","free","first","last","objToNodeMap","sortArray","addNode","swapObjects","showDebug","dump","moveUp","moveDown","_listener","isOnce","context","signal","params","execute","detach","isBound","_destroy","_bindings","_prevParams","dispatch","arguments","memorize","_shouldPropagate","validateListener","_registerListener","_indexOfListener","_addBinding","addOnce","removeAll","getNumListeners","halt","forget","Signal","allowDiagonal","heuristicFilter","list","compare","PathUtil","backtrace","biBacktrace","pathLength","expandPath","smoothenPath","m","isWalkableAt","compressPath","imageLoader","LoadingManager","ImageLoader","sourceFile","MouseCaster","down","rightDown","pickedObject","selectedObject","allHits","wheel","screenPosition","_camera","_raycaster","_preventDefault","_onDocumentMouseMove","_onDocumentMouseDown","_onDocumentMouseUp","_onMouseWheel","OVER","OUT","DOWN","UP","CLICK","WHEEL","setFromCamera","ctrlKey","clientX","clientY","stopPropagation","wheelDelta","alpha","antialias","clearColor","sortObjects","fog","lightPosition","cameraType","cameraPosition","orthoZoom","minDistance","maxDistance","zoomSpeed","noZoom","WebGLRenderer","setClearColor","container","contolled","OrbitControls","domElement","top","bottom","updateProjectionMatrix","setSize","attachTo","style","setPixelRatio","devicePixelRatio","appendChild","render","updateOrthoZoom","focusOn","SelectionManager","mouse","onSelect","onDeselect","toggleSelection","onMouse","clearSelection","clamp","sign","getShortRotation","isPlainObject","nwf","Performance","elapsedTime","lastChild","radixSort","XMLHttpRequest","onreadystatechange","status","statusText","JSON","responseText","open","setRequestHeader","send","ocean","depth","density","amplitude","amplitudeVariance","speedVariance","PlaneGeometry","waves","ang","amp","shading","FlatShading","verts","vprops","tube","segments","radial-segments","radialSegments","CatmullRomCurve3","TubeGeometry"],"mappings":"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","file":"16-66c4151959a4f4e0630d.js","sourcesContent":["require('./checkpoint-controls');\nrequire('./gamepad-controls');\nrequire('./keyboard-controls');\nrequire('./touch-controls');\nrequire('./movement-controls');\nrequire('./trackpad-controls');\n","const EPS = 0.1;\n\nmodule.exports = AFRAME.registerComponent('checkpoint-controls', {\n  schema: {\n    enabled: {default: true},\n    mode: {default: 'teleport', oneOf: ['teleport', 'animate']},\n    animateSpeed: {default: 3.0}\n  },\n\n  init: function () {\n    this.active = true;\n    this.checkpoint = null;\n\n    this.isNavMeshConstrained = false;\n\n    this.offset = new THREE.Vector3();\n    this.position = new THREE.Vector3();\n    this.targetPosition = new THREE.Vector3();\n  },\n\n  play: function () { this.active = true; },\n  pause: function () { this.active = false; },\n\n  setCheckpoint: function (checkpoint) {\n    const el = this.el;\n\n    if (!this.active) return;\n    if (this.checkpoint === checkpoint) return;\n\n    if (this.checkpoint) {\n      el.emit('navigation-end', {checkpoint: this.checkpoint});\n    }\n\n    this.checkpoint = checkpoint;\n    this.sync();\n\n    // Ignore new checkpoint if we're already there.\n    if (this.position.distanceTo(this.targetPosition) < EPS) {\n      this.checkpoint = null;\n      return;\n    }\n\n    el.emit('navigation-start', {checkpoint: checkpoint});\n\n    if (this.data.mode === 'teleport') {\n      this.el.setAttribute('position', this.targetPosition);\n      this.checkpoint = null;\n      el.emit('navigation-end', {checkpoint: checkpoint});\n      el.components['movement-controls'].updateNavLocation();\n    }\n  },\n\n  isVelocityActive: function () {\n    return !!(this.active && this.checkpoint);\n  },\n\n  getVelocity: function () {\n    if (!this.active) return;\n\n    const data = this.data;\n    const offset = this.offset;\n    const position = this.position;\n    const targetPosition = this.targetPosition;\n    const checkpoint = this.checkpoint;\n\n    this.sync();\n    if (position.distanceTo(targetPosition) < EPS) {\n      this.checkpoint = null;\n      this.el.emit('navigation-end', {checkpoint: checkpoint});\n      return offset.set(0, 0, 0);\n    }\n    offset.setLength(data.animateSpeed);\n    return offset;\n  },\n\n  sync: function () {\n    const offset = this.offset;\n    const position = this.position;\n    const targetPosition = this.targetPosition;\n\n    position.copy(this.el.getAttribute('position'));\n    this.checkpoint.object3D.getWorldPosition(targetPosition);\n    targetPosition.add(this.checkpoint.components.checkpoint.getOffset());\n    offset.copy(targetPosition).sub(position);\n  }\n});\n","/**\n * Gamepad controls for A-Frame.\n *\n * Stripped-down version of: https://github.com/donmccurdy/aframe-gamepad-controls\n *\n * For more information about the Gamepad API, see:\n * https://developer.mozilla.org/en-US/docs/Web/API/Gamepad_API/Using_the_Gamepad_API\n */\n\nconst GamepadButton = require('../../lib/GamepadButton'),\n    GamepadButtonEvent = require('../../lib/GamepadButtonEvent');\n\nconst JOYSTICK_EPS = 0.2;\n\nmodule.exports = AFRAME.registerComponent('gamepad-controls', {\n\n  /*******************************************************************\n   * Statics\n   */\n\n  GamepadButton: GamepadButton,\n\n  /*******************************************************************\n   * Schema\n   */\n\n  schema: {\n    // Controller 0-3\n    controller:        { default: 0, oneOf: [0, 1, 2, 3] },\n\n    // Enable/disable features\n    enabled:           { default: true },\n\n    // Debugging\n    debug:             { default: false },\n\n    // Heading element for rotation\n    camera:          { default: '[camera]', type: 'selector' },\n\n    // Rotation sensitivity\n    rotationSensitivity:  { default: 2.0 },\n  },\n\n  /*******************************************************************\n   * Core\n   */\n\n  /**\n   * Called once when component is attached. Generally for initial setup.\n   */\n  init: function () {\n    const scene = this.el.sceneEl;\n    this.prevTime = window.performance.now();\n\n    // Button state\n    this.buttons = {};\n\n    // Rotation\n    const rotation = this.el.object3D.rotation;\n    this.pitch = new THREE.Object3D();\n    this.pitch.rotation.x = THREE.Math.degToRad(rotation.x);\n    this.yaw = new THREE.Object3D();\n    this.yaw.position.y = 10;\n    this.yaw.rotation.y = THREE.Math.degToRad(rotation.y);\n    this.yaw.add(this.pitch);\n\n    scene.addBehavior(this);\n  },\n\n  /**\n   * Called when component is attached and when component data changes.\n   * Generally modifies the entity based on the data.\n   */\n  update: function () { this.tick(); },\n\n  /**\n   * Called on each iteration of main render loop.\n   */\n  tick: function (t, dt) {\n    this.updateButtonState();\n    this.updateRotation(dt);\n  },\n\n  /**\n   * Called when a component is removed (e.g., via removeAttribute).\n   * Generally undoes all modifications to the entity.\n   */\n  remove: function () { },\n\n  /*******************************************************************\n   * Movement\n   */\n\n  isVelocityActive: function () {\n    if (!this.data.enabled || !this.isConnected()) return false;\n\n    const dpad = this.getDpad(),\n        joystick0 = this.getJoystick(0),\n        inputX = dpad.x || joystick0.x,\n        inputY = dpad.y || joystick0.y;\n\n    return Math.abs(inputX) > JOYSTICK_EPS || Math.abs(inputY) > JOYSTICK_EPS;\n  },\n\n  getVelocityDelta: function () {\n    const dpad = this.getDpad(),\n        joystick0 = this.getJoystick(0),\n        inputX = dpad.x || joystick0.x,\n        inputY = dpad.y || joystick0.y,\n        dVelocity = new THREE.Vector3();\n\n    if (Math.abs(inputX) > JOYSTICK_EPS) {\n      dVelocity.x += inputX;\n    }\n    if (Math.abs(inputY) > JOYSTICK_EPS) {\n      dVelocity.z += inputY;\n    }\n\n    return dVelocity;\n  },\n\n  /*******************************************************************\n   * Rotation\n   */\n\n  isRotationActive: function () {\n    if (!this.data.enabled || !this.isConnected()) return false;\n\n    const joystick1 = this.getJoystick(1);\n\n    return Math.abs(joystick1.x) > JOYSTICK_EPS || Math.abs(joystick1.y) > JOYSTICK_EPS;\n  },\n\n  updateRotation: function (dt) {\n    if (!this.isRotationActive()) return;\n\n    const data = this.data;\n    const yaw = this.yaw;\n    const pitch = this.pitch;\n    const lookControls = data.camera.components['look-controls'];\n    const hasLookControls = lookControls && lookControls.pitchObject && lookControls.yawObject;\n\n    // Sync with look-controls pitch/yaw if available.\n    if (hasLookControls) {\n      pitch.rotation.copy(lookControls.pitchObject.rotation);\n      yaw.rotation.copy(lookControls.yawObject.rotation);\n    }\n\n    const lookVector = this.getJoystick(1);\n\n    if (Math.abs(lookVector.x) <= JOYSTICK_EPS) lookVector.x = 0;\n    if (Math.abs(lookVector.y) <= JOYSTICK_EPS) lookVector.y = 0;\n\n    lookVector.multiplyScalar(data.rotationSensitivity * dt / 1000);\n    yaw.rotation.y -= lookVector.x;\n    pitch.rotation.x -= lookVector.y;\n    pitch.rotation.x = Math.max(- Math.PI / 2, Math.min(Math.PI / 2, pitch.rotation.x));\n    data.camera.object3D.rotation.set(pitch.rotation.x, yaw.rotation.y, 0);\n\n    // Sync with look-controls pitch/yaw if available.\n    if (hasLookControls) {\n      lookControls.pitchObject.rotation.copy(pitch.rotation);\n      lookControls.yawObject.rotation.copy(yaw.rotation);\n    }\n  },\n\n  /*******************************************************************\n   * Button events\n   */\n\n  updateButtonState: function () {\n    const gamepad = this.getGamepad();\n    if (this.data.enabled && gamepad) {\n\n      // Fire DOM events for button state changes.\n      for (var i = 0; i < gamepad.buttons.length; i++) {\n        if (gamepad.buttons[i].pressed && !this.buttons[i]) {\n          this.emit(new GamepadButtonEvent('gamepadbuttondown', i, gamepad.buttons[i]));\n        } else if (!gamepad.buttons[i].pressed && this.buttons[i]) {\n          this.emit(new GamepadButtonEvent('gamepadbuttonup', i, gamepad.buttons[i]));\n        }\n        this.buttons[i] = gamepad.buttons[i].pressed;\n      }\n\n    } else if (Object.keys(this.buttons)) {\n      // Reset state if controls are disabled or controller is lost.\n      this.buttons = {};\n    }\n  },\n\n  emit: function (event) {\n    // Emit original event.\n    this.el.emit(event.type, event);\n\n    // Emit convenience event, identifying button index.\n    this.el.emit(\n      event.type + ':' + event.index,\n      new GamepadButtonEvent(event.type, event.index, event)\n    );\n  },\n\n  /*******************************************************************\n   * Gamepad state\n   */\n\n  /**\n   * Returns the Gamepad instance attached to the component. If connected,\n   * a proxy-controls component may provide access to Gamepad input from a\n   * remote device.\n   *\n   * @return {Gamepad}\n   */\n  getGamepad: function () {\n    const localGamepad = navigator.getGamepads\n          && navigator.getGamepads()[this.data.controller],\n        proxyControls = this.el.sceneEl.components['proxy-controls'],\n        proxyGamepad = proxyControls && proxyControls.isConnected()\n          && proxyControls.getGamepad(this.data.controller);\n    return proxyGamepad || localGamepad;\n  },\n\n  /**\n   * Returns the state of the given button.\n   * @param  {number} index The button (0-N) for which to find state.\n   * @return {GamepadButton}\n   */\n  getButton: function (index) {\n    return this.getGamepad().buttons[index];\n  },\n\n  /**\n   * Returns state of the given axis. Axes are labelled 0-N, where 0-1 will\n   * represent X/Y on the first joystick, and 2-3 X/Y on the second.\n   * @param  {number} index The axis (0-N) for which to find state.\n   * @return {number} On the interval [-1,1].\n   */\n  getAxis: function (index) {\n    return this.getGamepad().axes[index];\n  },\n\n  /**\n   * Returns the state of the given joystick (0 or 1) as a THREE.Vector2.\n   * @param  {number} id The joystick (0, 1) for which to find state.\n   * @return {THREE.Vector2}\n   */\n  getJoystick: function (index) {\n    const gamepad = this.getGamepad();\n    switch (index) {\n      case 0: return new THREE.Vector2(gamepad.axes[0], gamepad.axes[1]);\n      case 1: return new THREE.Vector2(gamepad.axes[2], gamepad.axes[3]);\n      default: throw new Error('Unexpected joystick index \"%d\".', index);\n    }\n  },\n\n  /**\n   * Returns the state of the dpad as a THREE.Vector2.\n   * @return {THREE.Vector2}\n   */\n  getDpad: function () {\n    const gamepad = this.getGamepad();\n    if (!gamepad.buttons[GamepadButton.DPAD_RIGHT]) {\n      return new THREE.Vector2();\n    }\n    return new THREE.Vector2(\n      (gamepad.buttons[GamepadButton.DPAD_RIGHT].pressed ? 1 : 0)\n      + (gamepad.buttons[GamepadButton.DPAD_LEFT].pressed ? -1 : 0),\n      (gamepad.buttons[GamepadButton.DPAD_UP].pressed ? -1 : 0)\n      + (gamepad.buttons[GamepadButton.DPAD_DOWN].pressed ? 1 : 0)\n    );\n  },\n\n  /**\n   * Returns true if the gamepad is currently connected to the system.\n   * @return {boolean}\n   */\n  isConnected: function () {\n    const gamepad = this.getGamepad();\n    return !!(gamepad && gamepad.connected);\n  },\n\n  /**\n   * Returns a string containing some information about the controller. Result\n   * may vary across browsers, for a given controller.\n   * @return {string}\n   */\n  getID: function () {\n    return this.getGamepad().id;\n  }\n});\n","module.exports = Object.assign(function GamepadButton () {}, {\n\tFACE_1: 0,\n\tFACE_2: 1,\n\tFACE_3: 2,\n\tFACE_4: 3,\n\n\tL_SHOULDER_1: 4,\n\tR_SHOULDER_1: 5,\n\tL_SHOULDER_2: 6,\n\tR_SHOULDER_2: 7,\n\n\tSELECT: 8,\n\tSTART: 9,\n\n\tDPAD_UP: 12,\n\tDPAD_DOWN: 13,\n\tDPAD_LEFT: 14,\n\tDPAD_RIGHT: 15,\n\n\tVENDOR: 16,\n});\n","function GamepadButtonEvent (type, index, details) {\n  this.type = type;\n  this.index = index;\n  this.pressed = details.pressed;\n  this.value = details.value;\n}\n\nmodule.exports = GamepadButtonEvent;\n","require('../../lib/keyboard.polyfill');\n\nconst MAX_DELTA = 0.2,\n    PROXY_FLAG = '__keyboard-controls-proxy';\n\nconst KeyboardEvent = window.KeyboardEvent;\n\n/**\n * Keyboard Controls component.\n *\n * Stripped-down version of: https://github.com/donmccurdy/aframe-keyboard-controls\n *\n * Bind keyboard events to components, or control your entities with the WASD keys.\n *\n * Why use KeyboardEvent.code? \"This is set to a string representing the key that was pressed to\n * generate the KeyboardEvent, without taking the current keyboard layout (e.g., QWERTY vs.\n * Dvorak), locale (e.g., English vs. French), or any modifier keys into account. This is useful\n * when you care about which physical key was pressed, rather thanwhich character it corresponds\n * to. For example, if you’re a writing a game, you might want a certain set of keys to move the\n * player in different directions, and that mapping should ideally be independent of keyboard\n * layout. See: https://developers.google.com/web/updates/2016/04/keyboardevent-keys-codes\n *\n * @namespace wasd-controls\n * keys the entity moves and if you release it will stop. Easing simulates friction.\n * to the entity when pressing the keys.\n * @param {bool} [enabled=true] - To completely enable or disable the controls\n */\nmodule.exports = AFRAME.registerComponent('keyboard-controls', {\n  schema: {\n    enabled:           { default: true },\n    debug:             { default: false }\n  },\n\n  init: function () {\n    this.dVelocity = new THREE.Vector3();\n    this.localKeys = {};\n    this.listeners = {\n      keydown: this.onKeyDown.bind(this),\n      keyup: this.onKeyUp.bind(this),\n      blur: this.onBlur.bind(this)\n    };\n    this.attachEventListeners();\n  },\n\n  /*******************************************************************\n  * Movement\n  */\n\n  isVelocityActive: function () {\n    return this.data.enabled && !!Object.keys(this.getKeys()).length;\n  },\n\n  getVelocityDelta: function () {\n    const data = this.data,\n        keys = this.getKeys();\n\n    this.dVelocity.set(0, 0, 0);\n    if (data.enabled) {\n      if (keys.KeyW || keys.ArrowUp)    { this.dVelocity.z -= 1; }\n      if (keys.KeyA || keys.ArrowLeft)  { this.dVelocity.x -= 1; }\n      if (keys.KeyS || keys.ArrowDown)  { this.dVelocity.z += 1; }\n      if (keys.KeyD || keys.ArrowRight) { this.dVelocity.x += 1; }\n    }\n\n    return this.dVelocity.clone();\n  },\n\n  /*******************************************************************\n  * Events\n  */\n\n  play: function () {\n    this.attachEventListeners();\n  },\n\n  pause: function () {\n    this.removeEventListeners();\n  },\n\n  remove: function () {\n    this.pause();\n  },\n\n  attachEventListeners: function () {\n    window.addEventListener('keydown', this.listeners.keydown, false);\n    window.addEventListener('keyup', this.listeners.keyup, false);\n    window.addEventListener('blur', this.listeners.blur, false);\n  },\n\n  removeEventListeners: function () {\n    window.removeEventListener('keydown', this.listeners.keydown);\n    window.removeEventListener('keyup', this.listeners.keyup);\n    window.removeEventListener('blur', this.listeners.blur);\n  },\n\n  onKeyDown: function (event) {\n    if (AFRAME.utils.shouldCaptureKeyEvent(event)) {\n      this.localKeys[event.code] = true;\n      this.emit(event);\n    }\n  },\n\n  onKeyUp: function (event) {\n    if (AFRAME.utils.shouldCaptureKeyEvent(event)) {\n      delete this.localKeys[event.code];\n      this.emit(event);\n    }\n  },\n\n  onBlur: function () {\n    for (let code in this.localKeys) {\n      if (this.localKeys.hasOwnProperty(code)) {\n        delete this.localKeys[code];\n      }\n    }\n  },\n\n  emit: function (event) {\n    // TODO - keydown only initially?\n    // TODO - where the f is the spacebar\n\n    // Emit original event.\n    if (PROXY_FLAG in event) {\n      // TODO - Method never triggered.\n      this.el.emit(event.type, event);\n    }\n\n    // Emit convenience event, identifying key.\n    this.el.emit(event.type + ':' + event.code, new KeyboardEvent(event.type, event));\n    if (this.data.debug) console.log(event.type + ':' + event.code);\n  },\n\n  /*******************************************************************\n  * Accessors\n  */\n\n  isPressed: function (code) {\n    return code in this.getKeys();\n  },\n\n  getKeys: function () {\n    if (this.isProxied()) {\n      return this.el.sceneEl.components['proxy-controls'].getKeyboard();\n    }\n    return this.localKeys;\n  },\n\n  isProxied: function () {\n    const proxyControls = this.el.sceneEl.components['proxy-controls'];\n    return proxyControls && proxyControls.isConnected();\n  }\n\n});\n","/**\n * Polyfill for the additional KeyboardEvent properties defined in the D3E and\n * D4E draft specifications, by @inexorabletash.\n *\n * See: https://github.com/inexorabletash/polyfill\n */\n(function(global) {\n  var nativeKeyboardEvent = ('KeyboardEvent' in global);\n  if (!nativeKeyboardEvent)\n    global.KeyboardEvent = function KeyboardEvent() { throw TypeError('Illegal constructor'); };\n\n  if (!('DOM_KEY_LOCATION_STANDARD' in global.KeyboardEvent)) global.KeyboardEvent.DOM_KEY_LOCATION_STANDARD = 0x00; // Default or unknown location\n  if (!('DOM_KEY_LOCATION_LEFT' in global.KeyboardEvent)) global.KeyboardEvent.DOM_KEY_LOCATION_LEFT          = 0x01; // e.g. Left Alt key\n  if (!('DOM_KEY_LOCATION_RIGHT' in global.KeyboardEvent)) global.KeyboardEvent.DOM_KEY_LOCATION_RIGHT         = 0x02; // e.g. Right Alt key\n  if (!('DOM_KEY_LOCATION_NUMPAD' in global.KeyboardEvent)) global.KeyboardEvent.DOM_KEY_LOCATION_NUMPAD        = 0x03; // e.g. Numpad 0 or +\n\n  var STANDARD = window.KeyboardEvent.DOM_KEY_LOCATION_STANDARD,\n      LEFT = window.KeyboardEvent.DOM_KEY_LOCATION_LEFT,\n      RIGHT = window.KeyboardEvent.DOM_KEY_LOCATION_RIGHT,\n      NUMPAD = window.KeyboardEvent.DOM_KEY_LOCATION_NUMPAD;\n\n  //--------------------------------------------------------------------\n  //\n  // Utilities\n  //\n  //--------------------------------------------------------------------\n\n  function contains(s, ss) { return String(s).indexOf(ss) !== -1; }\n\n  var os = (function() {\n    if (contains(navigator.platform, 'Win')) { return 'win'; }\n    if (contains(navigator.platform, 'Mac')) { return 'mac'; }\n    if (contains(navigator.platform, 'CrOS')) { return 'cros'; }\n    if (contains(navigator.platform, 'Linux')) { return 'linux'; }\n    if (contains(navigator.userAgent, 'iPad') || contains(navigator.platform, 'iPod') || contains(navigator.platform, 'iPhone')) { return 'ios'; }\n    return '';\n  } ());\n\n  var browser = (function() {\n    if (contains(navigator.userAgent, 'Chrome/')) { return 'chrome'; }\n    if (contains(navigator.vendor, 'Apple')) { return 'safari'; }\n    if (contains(navigator.userAgent, 'MSIE')) { return 'ie'; }\n    if (contains(navigator.userAgent, 'Gecko/')) { return 'moz'; }\n    if (contains(navigator.userAgent, 'Opera/')) { return 'opera'; }\n    return '';\n  } ());\n\n  var browser_os = browser + '-' + os;\n\n  function mergeIf(baseTable, select, table) {\n    if (browser_os === select || browser === select || os === select) {\n      Object.keys(table).forEach(function(keyCode) {\n        baseTable[keyCode] = table[keyCode];\n      });\n    }\n  }\n\n  function remap(o, key) {\n    var r = {};\n    Object.keys(o).forEach(function(k) {\n      var item = o[k];\n      if (key in item) {\n        r[item[key]] = item;\n      }\n    });\n    return r;\n  }\n\n  function invert(o) {\n    var r = {};\n    Object.keys(o).forEach(function(k) {\n      r[o[k]] = k;\n    });\n    return r;\n  }\n\n  //--------------------------------------------------------------------\n  //\n  // Generic Mappings\n  //\n  //--------------------------------------------------------------------\n\n  // \"keyInfo\" is a dictionary:\n  //   code: string - name from DOM Level 3 KeyboardEvent code Values\n  //     https://dvcs.w3.org/hg/dom3events/raw-file/tip/html/DOM3Events-code.html\n  //   location (optional): number - one of the DOM_KEY_LOCATION values\n  //   keyCap (optional): string - keyboard label in en-US locale\n  // USB code Usage ID from page 0x07 unless otherwise noted (Informative)\n\n  // Map of keyCode to keyInfo\n  var keyCodeToInfoTable = {\n    // 0x01 - VK_LBUTTON\n    // 0x02 - VK_RBUTTON\n    0x03: { code: 'Cancel' }, // [USB: 0x9b] char \\x0018 ??? (Not in D3E)\n    // 0x04 - VK_MBUTTON\n    // 0x05 - VK_XBUTTON1\n    // 0x06 - VK_XBUTTON2\n    0x06: { code: 'Help' }, // [USB: 0x75] ???\n    // 0x07 - undefined\n    0x08: { code: 'Backspace' }, // [USB: 0x2a] Labelled Delete on Macintosh keyboards.\n    0x09: { code: 'Tab' }, // [USB: 0x2b]\n    // 0x0A-0x0B - reserved\n    0X0C: { code: 'Clear' }, // [USB: 0x9c] NumPad Center (Not in D3E)\n    0X0D: { code: 'Enter' }, // [USB: 0x28]\n    // 0x0E-0x0F - undefined\n\n    0x10: { code: 'Shift' },\n    0x11: { code: 'Control' },\n    0x12: { code: 'Alt' },\n    0x13: { code: 'Pause' }, // [USB: 0x48]\n    0x14: { code: 'CapsLock' }, // [USB: 0x39]\n    0x15: { code: 'KanaMode' }, // [USB: 0x88] - \"HangulMode\" for Korean layout\n    0x16: { code: 'HangulMode' }, // [USB: 0x90] 0x15 as well in MSDN VK table ???\n    0x17: { code: 'JunjaMode' }, // (Not in D3E)\n    0x18: { code: 'FinalMode' }, // (Not in D3E)\n    0x19: { code: 'KanjiMode' }, // [USB: 0x91] - \"HanjaMode\" for Korean layout\n    // 0x1A - undefined\n    0x1B: { code: 'Escape' }, // [USB: 0x29]\n    0x1C: { code: 'Convert' }, // [USB: 0x8a]\n    0x1D: { code: 'NonConvert' }, // [USB: 0x8b]\n    0x1E: { code: 'Accept' }, // (Not in D3E)\n    0x1F: { code: 'ModeChange' }, // (Not in D3E)\n\n    0x20: { code: 'Space' }, // [USB: 0x2c]\n    0x21: { code: 'PageUp' }, // [USB: 0x4b]\n    0x22: { code: 'PageDown' }, // [USB: 0x4e]\n    0x23: { code: 'End' }, // [USB: 0x4d]\n    0x24: { code: 'Home' }, // [USB: 0x4a]\n    0x25: { code: 'ArrowLeft' }, // [USB: 0x50]\n    0x26: { code: 'ArrowUp' }, // [USB: 0x52]\n    0x27: { code: 'ArrowRight' }, // [USB: 0x4f]\n    0x28: { code: 'ArrowDown' }, // [USB: 0x51]\n    0x29: { code: 'Select' }, // (Not in D3E)\n    0x2A: { code: 'Print' }, // (Not in D3E)\n    0x2B: { code: 'Execute' }, // [USB: 0x74] (Not in D3E)\n    0x2C: { code: 'PrintScreen' }, // [USB: 0x46]\n    0x2D: { code: 'Insert' }, // [USB: 0x49]\n    0x2E: { code: 'Delete' }, // [USB: 0x4c]\n    0x2F: { code: 'Help' }, // [USB: 0x75] ???\n\n    0x30: { code: 'Digit0', keyCap: '0' }, // [USB: 0x27] 0)\n    0x31: { code: 'Digit1', keyCap: '1' }, // [USB: 0x1e] 1!\n    0x32: { code: 'Digit2', keyCap: '2' }, // [USB: 0x1f] 2@\n    0x33: { code: 'Digit3', keyCap: '3' }, // [USB: 0x20] 3#\n    0x34: { code: 'Digit4', keyCap: '4' }, // [USB: 0x21] 4$\n    0x35: { code: 'Digit5', keyCap: '5' }, // [USB: 0x22] 5%\n    0x36: { code: 'Digit6', keyCap: '6' }, // [USB: 0x23] 6^\n    0x37: { code: 'Digit7', keyCap: '7' }, // [USB: 0x24] 7&\n    0x38: { code: 'Digit8', keyCap: '8' }, // [USB: 0x25] 8*\n    0x39: { code: 'Digit9', keyCap: '9' }, // [USB: 0x26] 9(\n    // 0x3A-0x40 - undefined\n\n    0x41: { code: 'KeyA', keyCap: 'a' }, // [USB: 0x04]\n    0x42: { code: 'KeyB', keyCap: 'b' }, // [USB: 0x05]\n    0x43: { code: 'KeyC', keyCap: 'c' }, // [USB: 0x06]\n    0x44: { code: 'KeyD', keyCap: 'd' }, // [USB: 0x07]\n    0x45: { code: 'KeyE', keyCap: 'e' }, // [USB: 0x08]\n    0x46: { code: 'KeyF', keyCap: 'f' }, // [USB: 0x09]\n    0x47: { code: 'KeyG', keyCap: 'g' }, // [USB: 0x0a]\n    0x48: { code: 'KeyH', keyCap: 'h' }, // [USB: 0x0b]\n    0x49: { code: 'KeyI', keyCap: 'i' }, // [USB: 0x0c]\n    0x4A: { code: 'KeyJ', keyCap: 'j' }, // [USB: 0x0d]\n    0x4B: { code: 'KeyK', keyCap: 'k' }, // [USB: 0x0e]\n    0x4C: { code: 'KeyL', keyCap: 'l' }, // [USB: 0x0f]\n    0x4D: { code: 'KeyM', keyCap: 'm' }, // [USB: 0x10]\n    0x4E: { code: 'KeyN', keyCap: 'n' }, // [USB: 0x11]\n    0x4F: { code: 'KeyO', keyCap: 'o' }, // [USB: 0x12]\n\n    0x50: { code: 'KeyP', keyCap: 'p' }, // [USB: 0x13]\n    0x51: { code: 'KeyQ', keyCap: 'q' }, // [USB: 0x14]\n    0x52: { code: 'KeyR', keyCap: 'r' }, // [USB: 0x15]\n    0x53: { code: 'KeyS', keyCap: 's' }, // [USB: 0x16]\n    0x54: { code: 'KeyT', keyCap: 't' }, // [USB: 0x17]\n    0x55: { code: 'KeyU', keyCap: 'u' }, // [USB: 0x18]\n    0x56: { code: 'KeyV', keyCap: 'v' }, // [USB: 0x19]\n    0x57: { code: 'KeyW', keyCap: 'w' }, // [USB: 0x1a]\n    0x58: { code: 'KeyX', keyCap: 'x' }, // [USB: 0x1b]\n    0x59: { code: 'KeyY', keyCap: 'y' }, // [USB: 0x1c]\n    0x5A: { code: 'KeyZ', keyCap: 'z' }, // [USB: 0x1d]\n    0x5B: { code: 'OSLeft', location: LEFT }, // [USB: 0xe3]\n    0x5C: { code: 'OSRight', location: RIGHT }, // [USB: 0xe7]\n    0x5D: { code: 'ContextMenu' }, // [USB: 0x65] Context Menu\n    // 0x5E - reserved\n    0x5F: { code: 'Standby' }, // [USB: 0x82] Sleep\n\n    0x60: { code: 'Numpad0', keyCap: '0', location: NUMPAD }, // [USB: 0x62]\n    0x61: { code: 'Numpad1', keyCap: '1', location: NUMPAD }, // [USB: 0x59]\n    0x62: { code: 'Numpad2', keyCap: '2', location: NUMPAD }, // [USB: 0x5a]\n    0x63: { code: 'Numpad3', keyCap: '3', location: NUMPAD }, // [USB: 0x5b]\n    0x64: { code: 'Numpad4', keyCap: '4', location: NUMPAD }, // [USB: 0x5c]\n    0x65: { code: 'Numpad5', keyCap: '5', location: NUMPAD }, // [USB: 0x5d]\n    0x66: { code: 'Numpad6', keyCap: '6', location: NUMPAD }, // [USB: 0x5e]\n    0x67: { code: 'Numpad7', keyCap: '7', location: NUMPAD }, // [USB: 0x5f]\n    0x68: { code: 'Numpad8', keyCap: '8', location: NUMPAD }, // [USB: 0x60]\n    0x69: { code: 'Numpad9', keyCap: '9', location: NUMPAD }, // [USB: 0x61]\n    0x6A: { code: 'NumpadMultiply', keyCap: '*', location: NUMPAD }, // [USB: 0x55]\n    0x6B: { code: 'NumpadAdd', keyCap: '+', location: NUMPAD }, // [USB: 0x57]\n    0x6C: { code: 'NumpadComma', keyCap: ',', location: NUMPAD }, // [USB: 0x85]\n    0x6D: { code: 'NumpadSubtract', keyCap: '-', location: NUMPAD }, // [USB: 0x56]\n    0x6E: { code: 'NumpadDecimal', keyCap: '.', location: NUMPAD }, // [USB: 0x63]\n    0x6F: { code: 'NumpadDivide', keyCap: '/', location: NUMPAD }, // [USB: 0x54]\n\n    0x70: { code: 'F1' }, // [USB: 0x3a]\n    0x71: { code: 'F2' }, // [USB: 0x3b]\n    0x72: { code: 'F3' }, // [USB: 0x3c]\n    0x73: { code: 'F4' }, // [USB: 0x3d]\n    0x74: { code: 'F5' }, // [USB: 0x3e]\n    0x75: { code: 'F6' }, // [USB: 0x3f]\n    0x76: { code: 'F7' }, // [USB: 0x40]\n    0x77: { code: 'F8' }, // [USB: 0x41]\n    0x78: { code: 'F9' }, // [USB: 0x42]\n    0x79: { code: 'F10' }, // [USB: 0x43]\n    0x7A: { code: 'F11' }, // [USB: 0x44]\n    0x7B: { code: 'F12' }, // [USB: 0x45]\n    0x7C: { code: 'F13' }, // [USB: 0x68]\n    0x7D: { code: 'F14' }, // [USB: 0x69]\n    0x7E: { code: 'F15' }, // [USB: 0x6a]\n    0x7F: { code: 'F16' }, // [USB: 0x6b]\n\n    0x80: { code: 'F17' }, // [USB: 0x6c]\n    0x81: { code: 'F18' }, // [USB: 0x6d]\n    0x82: { code: 'F19' }, // [USB: 0x6e]\n    0x83: { code: 'F20' }, // [USB: 0x6f]\n    0x84: { code: 'F21' }, // [USB: 0x70]\n    0x85: { code: 'F22' }, // [USB: 0x71]\n    0x86: { code: 'F23' }, // [USB: 0x72]\n    0x87: { code: 'F24' }, // [USB: 0x73]\n    // 0x88-0x8F - unassigned\n\n    0x90: { code: 'NumLock', location: NUMPAD }, // [USB: 0x53]\n    0x91: { code: 'ScrollLock' }, // [USB: 0x47]\n    // 0x92-0x96 - OEM specific\n    // 0x97-0x9F - unassigned\n\n    // NOTE: 0xA0-0xA5 usually mapped to 0x10-0x12 in browsers\n    0xA0: { code: 'ShiftLeft', location: LEFT }, // [USB: 0xe1]\n    0xA1: { code: 'ShiftRight', location: RIGHT }, // [USB: 0xe5]\n    0xA2: { code: 'ControlLeft', location: LEFT }, // [USB: 0xe0]\n    0xA3: { code: 'ControlRight', location: RIGHT }, // [USB: 0xe4]\n    0xA4: { code: 'AltLeft', location: LEFT }, // [USB: 0xe2]\n    0xA5: { code: 'AltRight', location: RIGHT }, // [USB: 0xe6]\n\n    0xA6: { code: 'BrowserBack' }, // [USB: 0x0c/0x0224]\n    0xA7: { code: 'BrowserForward' }, // [USB: 0x0c/0x0225]\n    0xA8: { code: 'BrowserRefresh' }, // [USB: 0x0c/0x0227]\n    0xA9: { code: 'BrowserStop' }, // [USB: 0x0c/0x0226]\n    0xAA: { code: 'BrowserSearch' }, // [USB: 0x0c/0x0221]\n    0xAB: { code: 'BrowserFavorites' }, // [USB: 0x0c/0x0228]\n    0xAC: { code: 'BrowserHome' }, // [USB: 0x0c/0x0222]\n    0xAD: { code: 'VolumeMute' }, // [USB: 0x7f]\n    0xAE: { code: 'VolumeDown' }, // [USB: 0x81]\n    0xAF: { code: 'VolumeUp' }, // [USB: 0x80]\n\n    0xB0: { code: 'MediaTrackNext' }, // [USB: 0x0c/0x00b5]\n    0xB1: { code: 'MediaTrackPrevious' }, // [USB: 0x0c/0x00b6]\n    0xB2: { code: 'MediaStop' }, // [USB: 0x0c/0x00b7]\n    0xB3: { code: 'MediaPlayPause' }, // [USB: 0x0c/0x00cd]\n    0xB4: { code: 'LaunchMail' }, // [USB: 0x0c/0x018a]\n    0xB5: { code: 'MediaSelect' },\n    0xB6: { code: 'LaunchApp1' },\n    0xB7: { code: 'LaunchApp2' },\n    // 0xB8-0xB9 - reserved\n    0xBA: { code: 'Semicolon',  keyCap: ';' }, // [USB: 0x33] ;: (US Standard 101)\n    0xBB: { code: 'Equal', keyCap: '=' }, // [USB: 0x2e] =+\n    0xBC: { code: 'Comma', keyCap: ',' }, // [USB: 0x36] ,<\n    0xBD: { code: 'Minus', keyCap: '-' }, // [USB: 0x2d] -_\n    0xBE: { code: 'Period', keyCap: '.' }, // [USB: 0x37] .>\n    0xBF: { code: 'Slash', keyCap: '/' }, // [USB: 0x38] /? (US Standard 101)\n\n    0xC0: { code: 'Backquote', keyCap: '`' }, // [USB: 0x35] `~ (US Standard 101)\n    // 0xC1-0xCF - reserved\n\n    // 0xD0-0xD7 - reserved\n    // 0xD8-0xDA - unassigned\n    0xDB: { code: 'BracketLeft', keyCap: '[' }, // [USB: 0x2f] [{ (US Standard 101)\n    0xDC: { code: 'Backslash',  keyCap: '\\\\' }, // [USB: 0x31] \\| (US Standard 101)\n    0xDD: { code: 'BracketRight', keyCap: ']' }, // [USB: 0x30] ]} (US Standard 101)\n    0xDE: { code: 'Quote', keyCap: '\\'' }, // [USB: 0x34] '\" (US Standard 101)\n    // 0xDF - miscellaneous/varies\n\n    // 0xE0 - reserved\n    // 0xE1 - OEM specific\n    0xE2: { code: 'IntlBackslash',  keyCap: '\\\\' }, // [USB: 0x64] \\| (UK Standard 102)\n    // 0xE3-0xE4 - OEM specific\n    0xE5: { code: 'Process' }, // (Not in D3E)\n    // 0xE6 - OEM specific\n    // 0xE7 - VK_PACKET\n    // 0xE8 - unassigned\n    // 0xE9-0xEF - OEM specific\n\n    // 0xF0-0xF5 - OEM specific\n    0xF6: { code: 'Attn' }, // [USB: 0x9a] (Not in D3E)\n    0xF7: { code: 'CrSel' }, // [USB: 0xa3] (Not in D3E)\n    0xF8: { code: 'ExSel' }, // [USB: 0xa4] (Not in D3E)\n    0xF9: { code: 'EraseEof' }, // (Not in D3E)\n    0xFA: { code: 'Play' }, // (Not in D3E)\n    0xFB: { code: 'ZoomToggle' }, // (Not in D3E)\n    // 0xFC - VK_NONAME - reserved\n    // 0xFD - VK_PA1\n    0xFE: { code: 'Clear' } // [USB: 0x9c] (Not in D3E)\n  };\n\n  // No legacy keyCode, but listed in D3E:\n\n  // code: usb\n  // 'IntlHash': 0x070032,\n  // 'IntlRo': 0x070087,\n  // 'IntlYen': 0x070089,\n  // 'NumpadBackspace': 0x0700bb,\n  // 'NumpadClear': 0x0700d8,\n  // 'NumpadClearEntry': 0x0700d9,\n  // 'NumpadMemoryAdd': 0x0700d3,\n  // 'NumpadMemoryClear': 0x0700d2,\n  // 'NumpadMemoryRecall': 0x0700d1,\n  // 'NumpadMemoryStore': 0x0700d0,\n  // 'NumpadMemorySubtract': 0x0700d4,\n  // 'NumpadParenLeft': 0x0700b6,\n  // 'NumpadParenRight': 0x0700b7,\n\n  //--------------------------------------------------------------------\n  //\n  // Browser/OS Specific Mappings\n  //\n  //--------------------------------------------------------------------\n\n  mergeIf(keyCodeToInfoTable,\n          'moz', {\n            0x3B: { code: 'Semicolon', keyCap: ';' }, // [USB: 0x33] ;: (US Standard 101)\n            0x3D: { code: 'Equal', keyCap: '=' }, // [USB: 0x2e] =+\n            0x6B: { code: 'Equal', keyCap: '=' }, // [USB: 0x2e] =+\n            0x6D: { code: 'Minus', keyCap: '-' }, // [USB: 0x2d] -_\n            0xBB: { code: 'NumpadAdd', keyCap: '+', location: NUMPAD }, // [USB: 0x57]\n            0xBD: { code: 'NumpadSubtract', keyCap: '-', location: NUMPAD } // [USB: 0x56]\n          });\n\n  mergeIf(keyCodeToInfoTable,\n          'moz-mac', {\n            0x0C: { code: 'NumLock', location: NUMPAD }, // [USB: 0x53]\n            0xAD: { code: 'Minus', keyCap: '-' } // [USB: 0x2d] -_\n          });\n\n  mergeIf(keyCodeToInfoTable,\n          'moz-win', {\n            0xAD: { code: 'Minus', keyCap: '-' } // [USB: 0x2d] -_\n          });\n\n  mergeIf(keyCodeToInfoTable,\n          'chrome-mac', {\n            0x5D: { code: 'OSRight', location: RIGHT } // [USB: 0xe7]\n          });\n\n  // Windows via Bootcamp (!)\n  if (0) {\n    mergeIf(keyCodeToInfoTable,\n            'chrome-win', {\n              0xC0: { code: 'Quote', keyCap: '\\'' }, // [USB: 0x34] '\" (US Standard 101)\n              0xDE: { code: 'Backslash',  keyCap: '\\\\' }, // [USB: 0x31] \\| (US Standard 101)\n              0xDF: { code: 'Backquote', keyCap: '`' } // [USB: 0x35] `~ (US Standard 101)\n            });\n\n    mergeIf(keyCodeToInfoTable,\n            'ie', {\n              0xC0: { code: 'Quote', keyCap: '\\'' }, // [USB: 0x34] '\" (US Standard 101)\n              0xDE: { code: 'Backslash',  keyCap: '\\\\' }, // [USB: 0x31] \\| (US Standard 101)\n              0xDF: { code: 'Backquote', keyCap: '`' } // [USB: 0x35] `~ (US Standard 101)\n            });\n  }\n\n  mergeIf(keyCodeToInfoTable,\n          'safari', {\n            0x03: { code: 'Enter' }, // [USB: 0x28] old Safari\n            0x19: { code: 'Tab' } // [USB: 0x2b] old Safari for Shift+Tab\n          });\n\n  mergeIf(keyCodeToInfoTable,\n          'ios', {\n            0x0A: { code: 'Enter', location: STANDARD } // [USB: 0x28]\n          });\n\n  mergeIf(keyCodeToInfoTable,\n          'safari-mac', {\n            0x5B: { code: 'OSLeft', location: LEFT }, // [USB: 0xe3]\n            0x5D: { code: 'OSRight', location: RIGHT }, // [USB: 0xe7]\n            0xE5: { code: 'KeyQ', keyCap: 'Q' } // [USB: 0x14] On alternate presses, Ctrl+Q sends this\n          });\n\n  //--------------------------------------------------------------------\n  //\n  // Identifier Mappings\n  //\n  //--------------------------------------------------------------------\n\n  // Cases where newer-ish browsers send keyIdentifier which can be\n  // used to disambiguate keys.\n\n  // keyIdentifierTable[keyIdentifier] -> keyInfo\n\n  var keyIdentifierTable = {};\n  if ('cros' === os) {\n    keyIdentifierTable['U+00A0'] = { code: 'ShiftLeft', location: LEFT };\n    keyIdentifierTable['U+00A1'] = { code: 'ShiftRight', location: RIGHT };\n    keyIdentifierTable['U+00A2'] = { code: 'ControlLeft', location: LEFT };\n    keyIdentifierTable['U+00A3'] = { code: 'ControlRight', location: RIGHT };\n    keyIdentifierTable['U+00A4'] = { code: 'AltLeft', location: LEFT };\n    keyIdentifierTable['U+00A5'] = { code: 'AltRight', location: RIGHT };\n  }\n  if ('chrome-mac' === browser_os) {\n    keyIdentifierTable['U+0010'] = { code: 'ContextMenu' };\n  }\n  if ('safari-mac' === browser_os) {\n    keyIdentifierTable['U+0010'] = { code: 'ContextMenu' };\n  }\n  if ('ios' === os) {\n    // These only generate keyup events\n    keyIdentifierTable['U+0010'] = { code: 'Function' };\n\n    keyIdentifierTable['U+001C'] = { code: 'ArrowLeft' };\n    keyIdentifierTable['U+001D'] = { code: 'ArrowRight' };\n    keyIdentifierTable['U+001E'] = { code: 'ArrowUp' };\n    keyIdentifierTable['U+001F'] = { code: 'ArrowDown' };\n\n    keyIdentifierTable['U+0001'] = { code: 'Home' }; // [USB: 0x4a] Fn + ArrowLeft\n    keyIdentifierTable['U+0004'] = { code: 'End' }; // [USB: 0x4d] Fn + ArrowRight\n    keyIdentifierTable['U+000B'] = { code: 'PageUp' }; // [USB: 0x4b] Fn + ArrowUp\n    keyIdentifierTable['U+000C'] = { code: 'PageDown' }; // [USB: 0x4e] Fn + ArrowDown\n  }\n\n  //--------------------------------------------------------------------\n  //\n  // Location Mappings\n  //\n  //--------------------------------------------------------------------\n\n  // Cases where newer-ish browsers send location/keyLocation which\n  // can be used to disambiguate keys.\n\n  // locationTable[location][keyCode] -> keyInfo\n  var locationTable = [];\n  locationTable[LEFT] = {\n    0x10: { code: 'ShiftLeft', location: LEFT }, // [USB: 0xe1]\n    0x11: { code: 'ControlLeft', location: LEFT }, // [USB: 0xe0]\n    0x12: { code: 'AltLeft', location: LEFT } // [USB: 0xe2]\n  };\n  locationTable[RIGHT] = {\n    0x10: { code: 'ShiftRight', location: RIGHT }, // [USB: 0xe5]\n    0x11: { code: 'ControlRight', location: RIGHT }, // [USB: 0xe4]\n    0x12: { code: 'AltRight', location: RIGHT } // [USB: 0xe6]\n  };\n  locationTable[NUMPAD] = {\n    0x0D: { code: 'NumpadEnter', location: NUMPAD } // [USB: 0x58]\n  };\n\n  mergeIf(locationTable[NUMPAD], 'moz', {\n    0x6D: { code: 'NumpadSubtract', location: NUMPAD }, // [USB: 0x56]\n    0x6B: { code: 'NumpadAdd', location: NUMPAD } // [USB: 0x57]\n  });\n  mergeIf(locationTable[LEFT], 'moz-mac', {\n    0xE0: { code: 'OSLeft', location: LEFT } // [USB: 0xe3]\n  });\n  mergeIf(locationTable[RIGHT], 'moz-mac', {\n    0xE0: { code: 'OSRight', location: RIGHT } // [USB: 0xe7]\n  });\n  mergeIf(locationTable[RIGHT], 'moz-win', {\n    0x5B: { code: 'OSRight', location: RIGHT } // [USB: 0xe7]\n  });\n\n\n  mergeIf(locationTable[RIGHT], 'mac', {\n    0x5D: { code: 'OSRight', location: RIGHT } // [USB: 0xe7]\n  });\n\n  mergeIf(locationTable[NUMPAD], 'chrome-mac', {\n    0x0C: { code: 'NumLock', location: NUMPAD } // [USB: 0x53]\n  });\n\n  mergeIf(locationTable[NUMPAD], 'safari-mac', {\n    0x0C: { code: 'NumLock', location: NUMPAD }, // [USB: 0x53]\n    0xBB: { code: 'NumpadAdd', location: NUMPAD }, // [USB: 0x57]\n    0xBD: { code: 'NumpadSubtract', location: NUMPAD }, // [USB: 0x56]\n    0xBE: { code: 'NumpadDecimal', location: NUMPAD }, // [USB: 0x63]\n    0xBF: { code: 'NumpadDivide', location: NUMPAD } // [USB: 0x54]\n  });\n\n\n  //--------------------------------------------------------------------\n  //\n  // Key Values\n  //\n  //--------------------------------------------------------------------\n\n  // Mapping from `code` values to `key` values. Values defined at:\n  // https://dvcs.w3.org/hg/dom3events/raw-file/tip/html/DOM3Events-key.html\n  // Entries are only provided when `key` differs from `code`. If\n  // printable, `shiftKey` has the shifted printable character. This\n  // assumes US Standard 101 layout\n\n  var codeToKeyTable = {\n    // Modifier Keys\n    ShiftLeft: { key: 'Shift' },\n    ShiftRight: { key: 'Shift' },\n    ControlLeft: { key: 'Control' },\n    ControlRight: { key: 'Control' },\n    AltLeft: { key: 'Alt' },\n    AltRight: { key: 'Alt' },\n    OSLeft: { key: 'OS' },\n    OSRight: { key: 'OS' },\n\n    // Whitespace Keys\n    NumpadEnter: { key: 'Enter' },\n    Space: { key: ' ' },\n\n    // Printable Keys\n    Digit0: { key: '0', shiftKey: ')' },\n    Digit1: { key: '1', shiftKey: '!' },\n    Digit2: { key: '2', shiftKey: '@' },\n    Digit3: { key: '3', shiftKey: '#' },\n    Digit4: { key: '4', shiftKey: '$' },\n    Digit5: { key: '5', shiftKey: '%' },\n    Digit6: { key: '6', shiftKey: '^' },\n    Digit7: { key: '7', shiftKey: '&' },\n    Digit8: { key: '8', shiftKey: '*' },\n    Digit9: { key: '9', shiftKey: '(' },\n    KeyA: { key: 'a', shiftKey: 'A' },\n    KeyB: { key: 'b', shiftKey: 'B' },\n    KeyC: { key: 'c', shiftKey: 'C' },\n    KeyD: { key: 'd', shiftKey: 'D' },\n    KeyE: { key: 'e', shiftKey: 'E' },\n    KeyF: { key: 'f', shiftKey: 'F' },\n    KeyG: { key: 'g', shiftKey: 'G' },\n    KeyH: { key: 'h', shiftKey: 'H' },\n    KeyI: { key: 'i', shiftKey: 'I' },\n    KeyJ: { key: 'j', shiftKey: 'J' },\n    KeyK: { key: 'k', shiftKey: 'K' },\n    KeyL: { key: 'l', shiftKey: 'L' },\n    KeyM: { key: 'm', shiftKey: 'M' },\n    KeyN: { key: 'n', shiftKey: 'N' },\n    KeyO: { key: 'o', shiftKey: 'O' },\n    KeyP: { key: 'p', shiftKey: 'P' },\n    KeyQ: { key: 'q', shiftKey: 'Q' },\n    KeyR: { key: 'r', shiftKey: 'R' },\n    KeyS: { key: 's', shiftKey: 'S' },\n    KeyT: { key: 't', shiftKey: 'T' },\n    KeyU: { key: 'u', shiftKey: 'U' },\n    KeyV: { key: 'v', shiftKey: 'V' },\n    KeyW: { key: 'w', shiftKey: 'W' },\n    KeyX: { key: 'x', shiftKey: 'X' },\n    KeyY: { key: 'y', shiftKey: 'Y' },\n    KeyZ: { key: 'z', shiftKey: 'Z' },\n    Numpad0: { key: '0' },\n    Numpad1: { key: '1' },\n    Numpad2: { key: '2' },\n    Numpad3: { key: '3' },\n    Numpad4: { key: '4' },\n    Numpad5: { key: '5' },\n    Numpad6: { key: '6' },\n    Numpad7: { key: '7' },\n    Numpad8: { key: '8' },\n    Numpad9: { key: '9' },\n    NumpadMultiply: { key: '*' },\n    NumpadAdd: { key: '+' },\n    NumpadComma: { key: ',' },\n    NumpadSubtract: { key: '-' },\n    NumpadDecimal: { key: '.' },\n    NumpadDivide: { key: '/' },\n    Semicolon: { key: ';', shiftKey: ':' },\n    Equal: { key: '=', shiftKey: '+' },\n    Comma: { key: ',', shiftKey: '<' },\n    Minus: { key: '-', shiftKey: '_' },\n    Period: { key: '.', shiftKey: '>' },\n    Slash: { key: '/', shiftKey: '?' },\n    Backquote: { key: '`', shiftKey: '~' },\n    BracketLeft: { key: '[', shiftKey: '{' },\n    Backslash: { key: '\\\\', shiftKey: '|' },\n    BracketRight: { key: ']', shiftKey: '}' },\n    Quote: { key: '\\'', shiftKey: '\"' },\n    IntlBackslash: { key: '\\\\', shiftKey: '|' }\n  };\n\n  mergeIf(codeToKeyTable, 'mac', {\n    OSLeft: { key: 'Meta' },\n    OSRight: { key: 'Meta' }\n  });\n\n  // Corrections for 'key' names in older browsers (e.g. FF36-)\n  // https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent.key#Key_values\n  var keyFixTable = {\n    Esc: 'Escape',\n    Nonconvert: 'NonConvert',\n    Left: 'ArrowLeft',\n    Up: 'ArrowUp',\n    Right: 'ArrowRight',\n    Down: 'ArrowDown',\n    Del: 'Delete',\n    Menu: 'ContextMenu',\n    MediaNextTrack: 'MediaTrackNext',\n    MediaPreviousTrack: 'MediaTrackPrevious',\n    SelectMedia: 'MediaSelect',\n    HalfWidth: 'Hankaku',\n    FullWidth: 'Zenkaku',\n    RomanCharacters: 'Romaji',\n    Crsel: 'CrSel',\n    Exsel: 'ExSel',\n    Zoom: 'ZoomToggle'\n  };\n\n  //--------------------------------------------------------------------\n  //\n  // Exported Functions\n  //\n  //--------------------------------------------------------------------\n\n\n  var codeTable = remap(keyCodeToInfoTable, 'code');\n\n  try {\n    var nativeLocation = nativeKeyboardEvent && ('location' in new KeyboardEvent(''));\n  } catch (_) {}\n\n  function keyInfoForEvent(event) {\n    var keyCode = 'keyCode' in event ? event.keyCode : 'which' in event ? event.which : 0;\n\n    var keyInfo = (function(){\n      if (nativeLocation || 'keyLocation' in event) {\n        var location = nativeLocation ? event.location : event.keyLocation;\n        if (location && keyCode in locationTable[location]) {\n          return locationTable[location][keyCode];\n        }\n      }\n      if ('keyIdentifier' in event && event.keyIdentifier in keyIdentifierTable) {\n        return keyIdentifierTable[event.keyIdentifier];\n      }\n      if (keyCode in keyCodeToInfoTable) {\n        return keyCodeToInfoTable[keyCode];\n      }\n      return null;\n    }());\n\n    // TODO: Track these down and move to general tables\n    if (0) {\n      // TODO: Map these for newerish browsers?\n      // TODO: iOS only?\n      // TODO: Override with more common keyIdentifier name?\n      switch (event.keyIdentifier) {\n      case 'U+0010': keyInfo = { code: 'Function' }; break;\n      case 'U+001C': keyInfo = { code: 'ArrowLeft' }; break;\n      case 'U+001D': keyInfo = { code: 'ArrowRight' }; break;\n      case 'U+001E': keyInfo = { code: 'ArrowUp' }; break;\n      case 'U+001F': keyInfo = { code: 'ArrowDown' }; break;\n      }\n    }\n\n    if (!keyInfo)\n      return null;\n\n    var key = (function() {\n      var entry = codeToKeyTable[keyInfo.code];\n      if (!entry) return keyInfo.code;\n      return (event.shiftKey && 'shiftKey' in entry) ? entry.shiftKey : entry.key;\n    }());\n\n    return {\n      code: keyInfo.code,\n      key: key,\n      location: keyInfo.location,\n      keyCap: keyInfo.keyCap\n    };\n  }\n\n  function queryKeyCap(code, locale) {\n    code = String(code);\n    if (!codeTable.hasOwnProperty(code)) return 'Undefined';\n    if (locale && String(locale).toLowerCase() !== 'en-us') throw Error('Unsupported locale');\n    var keyInfo = codeTable[code];\n    return keyInfo.keyCap || keyInfo.code || 'Undefined';\n  }\n\n  if ('KeyboardEvent' in global && 'defineProperty' in Object) {\n    (function() {\n      function define(o, p, v) {\n        if (p in o) return;\n        Object.defineProperty(o, p, v);\n      }\n\n      define(KeyboardEvent.prototype, 'code', { get: function() {\n        var keyInfo = keyInfoForEvent(this);\n        return keyInfo ? keyInfo.code : '';\n      }});\n\n      // Fix for nonstandard `key` values (FF36-)\n      if ('key' in KeyboardEvent.prototype) {\n        var desc = Object.getOwnPropertyDescriptor(KeyboardEvent.prototype, 'key');\n        Object.defineProperty(KeyboardEvent.prototype, 'key', { get: function() {\n          var key = desc.get.call(this);\n          return keyFixTable.hasOwnProperty(key) ? keyFixTable[key] : key;\n        }});\n      }\n\n      define(KeyboardEvent.prototype, 'key', { get: function() {\n        var keyInfo = keyInfoForEvent(this);\n        return (keyInfo && 'key' in keyInfo) ? keyInfo.key : 'Unidentified';\n      }});\n\n      define(KeyboardEvent.prototype, 'location', { get: function() {\n        var keyInfo = keyInfoForEvent(this);\n        return (keyInfo && 'location' in keyInfo) ? keyInfo.location : STANDARD;\n      }});\n\n      define(KeyboardEvent.prototype, 'locale', { get: function() {\n        return '';\n      }});\n    }());\n  }\n\n  if (!('queryKeyCap' in global.KeyboardEvent))\n    global.KeyboardEvent.queryKeyCap = queryKeyCap;\n\n  // Helper for IE8-\n  global.identifyKey = function(event) {\n    if ('code' in event)\n      return;\n\n    var keyInfo = keyInfoForEvent(event);\n    event.code = keyInfo ? keyInfo.code : '';\n    event.key = (keyInfo && 'key' in keyInfo) ? keyInfo.key : 'Unidentified';\n    event.location = ('location' in event) ? event.location :\n      ('keyLocation' in event) ? event.keyLocation :\n      (keyInfo && 'location' in keyInfo) ? keyInfo.location : STANDARD;\n    event.locale = '';\n  };\n\n} (window));\n","/**\n * Touch-to-move-forward controls for mobile.\n */\nmodule.exports = AFRAME.registerComponent('touch-controls', {\n  schema: {\n    enabled: { default: true },\n    reverseEnabled: { default: true }\n  },\n\n  init: function () {\n    this.dVelocity = new THREE.Vector3();\n    this.bindMethods();\n    this.direction = 0;\n  },\n\n  play: function () {\n    this.addEventListeners();\n  },\n\n  pause: function () {\n    this.removeEventListeners();\n    this.dVelocity.set(0, 0, 0);\n  },\n\n  remove: function () {\n    this.pause();\n  },\n\n  addEventListeners: function () {\n    const sceneEl = this.el.sceneEl;\n    const canvasEl = sceneEl.canvas;\n\n    if (!canvasEl) {\n      sceneEl.addEventListener('render-target-loaded', this.addEventListeners.bind(this));\n      return;\n    }\n\n    canvasEl.addEventListener('touchstart', this.onTouchStart);\n    canvasEl.addEventListener('touchend', this.onTouchEnd);\n  },\n\n  removeEventListeners: function () {\n    const canvasEl = this.el.sceneEl && this.el.sceneEl.canvas;\n    if (!canvasEl) { return; }\n\n    canvasEl.removeEventListener('touchstart', this.onTouchStart);\n    canvasEl.removeEventListener('touchend', this.onTouchEnd);\n  },\n\n  isVelocityActive: function () {\n    return this.data.enabled && !!this.direction;\n  },\n\n  getVelocityDelta: function () {\n    this.dVelocity.z = this.direction;\n    return this.dVelocity.clone();\n  },\n\n  bindMethods: function () {\n    this.onTouchStart = this.onTouchStart.bind(this);\n    this.onTouchEnd = this.onTouchEnd.bind(this);\n  },\n\n  onTouchStart: function (e) {\n    this.direction = -1;\n    if (this.data.reverseEnabled && e.touches.length === 2) {\n      this.direction = 1;\n    }\n    e.preventDefault();\n  },\n\n  onTouchEnd: function (e) {\n    this.direction = 0;\n    e.preventDefault();\n  }\n});\n","/**\n * Movement Controls\n *\n * @author Don McCurdy <dm@donmccurdy.com>\n */\n\nconst COMPONENT_SUFFIX = '-controls',\n    MAX_DELTA = 0.2, // ms\n    EPS = 10e-6;\n\nmodule.exports = AFRAME.registerComponent('movement-controls', {\n\n  /*******************************************************************\n   * Schema\n   */\n\n  dependencies: ['rotation'],\n\n  schema: {\n    enabled:            { default: true },\n    controls:           { default: ['gamepad', 'trackpad', 'keyboard', 'touch'] },\n    speed:              { default: 0.3, min: 0 },\n    fly:                { default: false },\n    constrainToNavMesh: { default: false },\n    camera:             { default: '[movement-controls] [camera]', type: 'selector' }\n  },\n\n  /*******************************************************************\n   * Lifecycle\n   */\n\n  init: function () {\n    const el = this.el;\n\n    this.velocityCtrl = null;\n\n    this.velocity = new THREE.Vector3();\n    this.heading = new THREE.Quaternion();\n\n    // Navigation\n    this.navGroup = null;\n    this.navNode = null;\n\n    if (el.sceneEl.hasLoaded) {\n      this.injectControls();\n    } else {\n      el.sceneEl.addEventListener('loaded', this.injectControls.bind(this));\n    }\n  },\n\n  update: function (prevData) {\n    const el = this.el;\n    const data = this.data;\n    const nav = el.sceneEl.systems.nav;\n    if (el.sceneEl.hasLoaded) {\n      this.injectControls();\n    }\n    if (nav && data.constrainToNavMesh !== prevData.constrainToNavMesh) {\n      data.constrainToNavMesh\n        ? nav.addAgent(this)\n        : nav.removeAgent(this);\n    }\n  },\n\n  injectControls: function () {\n    const data = this.data;\n    var name;\n\n    for (let i = 0; i < data.controls.length; i++) {\n      name = data.controls[i] + COMPONENT_SUFFIX;\n      if (!this.el.components[name]) {\n        this.el.setAttribute(name, '');\n      }\n    }\n  },\n\n  updateNavLocation: function () {\n    this.navGroup = null;\n    this.navNode = null;\n  },\n\n  /*******************************************************************\n   * Tick\n   */\n\n  tick: (function () {\n    const start = new THREE.Vector3();\n    const end = new THREE.Vector3();\n    const clampedEnd = new THREE.Vector3();\n\n    return function (t, dt) {\n      if (!dt) return;\n\n      const el = this.el;\n      const data = this.data;\n\n      if (!data.enabled) return;\n\n      this.updateVelocityCtrl();\n      const velocityCtrl = this.velocityCtrl;\n      const velocity = this.velocity;\n\n      if (!velocityCtrl) return;\n\n      // Update velocity. If FPS is too low, reset.\n      if (dt / 1000 > MAX_DELTA) {\n        velocity.set(0, 0, 0);\n      } else {\n        this.updateVelocity(dt);\n      }\n\n      if (data.constrainToNavMesh\n          && velocityCtrl.isNavMeshConstrained !== false) {\n\n        if (velocity.lengthSq() < EPS) return;\n\n        start.copy(el.object3D.position);\n        end\n          .copy(velocity)\n          .multiplyScalar(dt / 1000)\n          .add(start);\n\n        const nav = el.sceneEl.systems.nav;\n        this.navGroup = this.navGroup === null ? nav.getGroup(start) : this.navGroup;\n        this.navNode = this.navNode || nav.getNode(start, this.navGroup);\n        this.navNode = nav.clampStep(start, end, this.navGroup, this.navNode, clampedEnd);\n        el.object3D.position.copy(clampedEnd);\n      } else if (el.hasAttribute('velocity')) {\n        el.setAttribute('velocity', velocity);\n      } else {\n        el.object3D.position.x += velocity.x * dt / 1000;\n        el.object3D.position.y += velocity.y * dt / 1000;\n        el.object3D.position.z += velocity.z * dt / 1000;\n      }\n\n    };\n  }()),\n\n  /*******************************************************************\n   * Movement\n   */\n\n  updateVelocityCtrl: function () {\n    const data = this.data;\n    if (data.enabled) {\n      for (let i = 0, l = data.controls.length; i < l; i++) {\n        const control = this.el.components[data.controls[i] + COMPONENT_SUFFIX];\n        if (control && control.isVelocityActive()) {\n          this.velocityCtrl = control;\n          return;\n        }\n      }\n      this.velocityCtrl = null;\n    }\n  },\n\n  updateVelocity: (function () {\n    const vector2 = new THREE.Vector2();\n    const quaternion = new THREE.Quaternion();\n\n    return function (dt) {\n      let dVelocity;\n      const el = this.el;\n      const control = this.velocityCtrl;\n      const velocity = this.velocity;\n      const data = this.data;\n\n      if (control) {\n        if (control.getVelocityDelta) {\n          dVelocity = control.getVelocityDelta(dt);\n        } else if (control.getVelocity) {\n          velocity.copy(control.getVelocity());\n          return;\n        } else if (control.getPositionDelta) {\n          velocity.copy(control.getPositionDelta(dt).multiplyScalar(1000 / dt));\n          return;\n        } else {\n          throw new Error('Incompatible movement controls: ', control);\n        }\n      }\n\n      if (el.hasAttribute('velocity') && !data.constrainToNavMesh) {\n        velocity.copy(this.el.getAttribute('velocity'));\n      }\n\n      if (dVelocity && data.enabled) {\n        const cameraEl = data.camera;\n\n        // Rotate to heading\n        quaternion.copy(cameraEl.object3D.quaternion);\n        quaternion.premultiply(el.object3D.quaternion);\n        dVelocity.applyQuaternion(quaternion);\n\n        const factor = dVelocity.length();\n        if (data.fly) {\n          velocity.copy(dVelocity);\n          velocity.multiplyScalar(this.data.speed * 16.66667);\n        } else {\n          vector2.set(dVelocity.x, dVelocity.z);\n          vector2.setLength(factor * this.data.speed * 16.66667);\n          velocity.x = vector2.x;\n          velocity.z = vector2.y;\n        }\n      }\n    };\n\n  }())\n});\n","/**\n * 3dof (Gear VR, Daydream) controls for mobile.\n */\nmodule.exports = AFRAME.registerComponent('trackpad-controls', {\n  schema: {\n    enabled: { default: true },\n    enableNegX: { default: true },\n    enablePosX: { default: true },\n    enableNegZ: { default: true },\n    enablePosZ: { default: true },\n    mode: { default: 'touch', oneOf: ['swipe', 'touch', 'press'] }\n\n  },\n\n  init: function () {\n    this.dVelocity = new THREE.Vector3();\n    this.zVel      = 0;\n    this.xVel      = 0;\n    this.bindMethods();\n  },\n\n  play: function () {\n    this.addEventListeners();\n  },\n\n  pause: function () {\n    this.removeEventListeners();\n    this.dVelocity.set(0, 0, 0);\n  },\n\n  remove: function () {\n    this.pause();\n  },\n\n  addEventListeners: function () {\n    const data = this.data;\n    const sceneEl = this.el.sceneEl;\n\n    sceneEl.addEventListener('axismove', this.onAxisMove);\n\n    switch (data.mode) {\n      case 'swipe':\n      case 'touch':\n        sceneEl.addEventListener('trackpadtouchstart', this.onTouchStart);\n        sceneEl.addEventListener('trackpadtouchend', this.onTouchEnd);\n        break;\n\n      case 'press':\n        sceneEl.addEventListener('trackpaddown', this.onTouchStart);\n        sceneEl.addEventListener('trackpadup', this.onTouchEnd);\n        break;\n    }\n\n  },\n\n  removeEventListeners: function () {\n    const sceneEl = this.el.sceneEl;\n\n    sceneEl.removeEventListener('axismove', this.onAxisMove);\n    sceneEl.removeEventListener('trackpadtouchstart', this.onTouchStart);\n    sceneEl.removeEventListener('trackpadtouchend', this.onTouchEnd);\n    sceneEl.removeEventListener('trackpaddown', this.onTouchStart);\n    sceneEl.removeEventListener('trackpadup', this.onTouchEnd);\n  },\n\n  isVelocityActive: function () {\n    return this.data.enabled && this.isMoving;\n  },\n\n  getVelocityDelta: function () {\n    this.dVelocity.z = this.isMoving ? -this.zVel : 1;\n    this.dVelocity.x = this.isMoving ? this.xVel : 1;\n    return this.dVelocity.clone();\n  },\n\n  bindMethods: function () {\n    this.onTouchStart = this.onTouchStart.bind(this);\n    this.onTouchEnd = this.onTouchEnd.bind(this);\n    this.onAxisMove = this.onAxisMove.bind(this);\n  },\n\n  onTouchStart: function (e) {\n    switch(this.data.mode){\n      case 'swipe':\n        this.canRecordAxis = true;\n        this.startingAxisData = [];\n        break;\n      case 'touch':\n        this.isMoving = true;\n        break;\n      case 'press':\n        this.isMoving = true;\n        break;\n    }\n\n    e.preventDefault();\n  },\n\n  onTouchEnd: function (e) {\n    if(this.data.mode == 'swipe') {\n        this.startingAxisData = [];\n    }\n\n    this.isMoving = false;\n    e.preventDefault();\n  },\n\n  onAxisMove: function(e){\n    switch (this.data.mode) {\n      case 'swipe':\n        return this.handleSwipeAxis(e);\n      case 'touch':\n      case 'press':\n        return this.handleTouchAxis(e);\n    }\n  },\n\n  handleSwipeAxis: function(e) {\n    const data = this.data;\n    const axisData = e.detail.axis;\n\n    if(this.startingAxisData.length === 0 && this.canRecordAxis){\n      this.canRecordAxis = false;\n      this.startingAxisData[0] = axisData[0];\n      this.startingAxisData[1] = axisData[1];\n    }\n\n    if(this.startingAxisData.length > 0){\n      let velX = 0;\n      let velZ = 0;\n\n      if (data.enableNegX && axisData[0] < this.startingAxisData[0]) {\n        velX = -1;\n      }\n\n      if (data.enablePosX && axisData[0] > this.startingAxisData[0]) {\n        velX = 1;\n      }\n\n      if (data.enablePosZ && axisData[1] > this.startingAxisData[1]) {\n        velZ = -1;\n      }\n\n      if (data.enableNegZ && axisData[1] < this.startingAxisData[1]) {\n        velZ = 1;\n      }\n\n      const absChangeZ  = Math.abs(this.startingAxisData[1] - axisData[1]);\n      const absChangeX  = Math.abs(this.startingAxisData[0] - axisData[0]);\n\n      if (absChangeX > absChangeZ) {\n        this.zVel = 0;\n        this.xVel = velX;\n        this.isMoving = true;\n      } else {\n        this.xVel = 0;\n        this.zVel = velZ;\n        this.isMoving = true;\n      }\n\n    }\n  },\n\n  handleTouchAxis: function(e) {\n    const data = this.data;\n    const axisData = e.detail.axis;\n\n    let velX = 0;\n    let velZ = 0;\n\n    if (data.enableNegX && axisData[0] < 0) {\n      velX = -1;\n    }\n\n    if (data.enablePosX && axisData[0] > 0) {\n      velX = 1;\n    }\n\n    if (data.enablePosZ && axisData[1] > 0) {\n      velZ = -1;\n    }\n\n    if (data.enableNegZ && axisData[1] < 0) {\n      velZ = 1;\n    }\n\n    if (Math.abs(axisData[0]) > Math.abs(axisData[1])) {\n      this.zVel = 0;\n      this.xVel = velX;\n    } else {\n      this.xVel = 0;\n      this.zVel = velZ;\n    }\n\n  }\n\n});\n\n","require('./animation-mixer');\nrequire('./collada-model-legacy');\nrequire('./fbx-model');\nrequire('./gltf-model-legacy');\nrequire('./object-model');\n","const LoopMode = {\n  once: THREE.LoopOnce,\n  repeat: THREE.LoopRepeat,\n  pingpong: THREE.LoopPingPong\n};\n\n/**\n * animation-mixer\n *\n * Player for animation clips. Intended to be compatible with any model format that supports\n * skeletal or morph animations through THREE.AnimationMixer.\n * See: https://threejs.org/docs/?q=animation#Reference/Animation/AnimationMixer\n */\nmodule.exports = AFRAME.registerComponent('animation-mixer', {\n  schema: {\n    clip:  {default: '*'},\n    duration: {default: 0},\n    clampWhenFinished: {default: false, type: 'boolean'},\n    crossFadeDuration: {default: 0},\n    loop: {default: 'repeat', oneOf: Object.keys(LoopMode)},\n    repetitions: {default: Infinity, min: 0},\n    timeScale: {default: 1}\n  },\n\n  init: function () {\n    /** @type {THREE.Mesh} */\n    this.model = null;\n    /** @type {THREE.AnimationMixer} */\n    this.mixer = null;\n    /** @type {Array<THREE.AnimationAction>} */\n    this.activeActions = [];\n\n    const model = this.el.getObject3D('mesh');\n\n    if (model) {\n      this.load(model);\n    } else {\n      this.el.addEventListener('model-loaded', (e) => {\n        this.load(e.detail.model);\n      });\n    }\n  },\n\n  load: function (model) {\n    const el = this.el;\n    this.model = model;\n    this.mixer = new THREE.AnimationMixer(model);\n    this.mixer.addEventListener('loop', (e) => {\n      el.emit('animation-loop', {action: e.action, loopDelta: e.loopDelta});\n    });\n    this.mixer.addEventListener('finished', (e) => {\n      el.emit('animation-finished', {action: e.action, direction: e.direction});\n    });\n    if (this.data.clip) this.update({});\n  },\n\n  remove: function () {\n    if (this.mixer) this.mixer.stopAllAction();\n  },\n\n  update: function (prevData) {\n    if (!prevData) return;\n\n    const data = this.data;\n    const changes = AFRAME.utils.diff(data, prevData);\n\n    // If selected clips have changed, restart animation.\n    if ('clip' in changes) {\n      this.stopAction();\n      if (data.clip) this.playAction();\n      return;\n    }\n\n    // Otherwise, modify running actions.\n    this.activeActions.forEach((action) => {\n      if ('duration' in changes && data.duration) {\n        action.setDuration(data.duration);\n      }\n      if ('clampWhenFinished' in changes) {\n        action.clampWhenFinished = data.clampWhenFinished;\n      }\n      if ('loop' in changes || 'repetitions' in changes) {\n        action.setLoop(LoopMode[data.loop], data.repetitions);\n      }\n      if ('timeScale' in changes) {\n        action.setEffectiveTimeScale(data.timeScale);\n      }\n    });\n  },\n\n  stopAction: function () {\n    const data = this.data;\n    for (let i = 0; i < this.activeActions.length; i++) {\n      data.crossFadeDuration\n        ? this.activeActions[i].fadeOut(data.crossFadeDuration)\n        : this.activeActions[i].stop();\n    }\n    this.activeActions.length = 0;\n  },\n\n  playAction: function () {\n    if (!this.mixer) return;\n\n    const model = this.model,\n        data = this.data,\n        clips = model.animations || (model.geometry || {}).animations || [];\n\n    if (!clips.length) return;\n\n    const re = wildcardToRegExp(data.clip);\n\n    for (let clip, i = 0; (clip = clips[i]); i++) {\n      if (clip.name.match(re)) {\n        const action = this.mixer.clipAction(clip, model);\n        action.enabled = true;\n        action.clampWhenFinished = data.clampWhenFinished;\n        if (data.duration) action.setDuration(data.duration);\n        if (data.timeScale !== 1) action.setEffectiveTimeScale(data.timeScale);\n        action\n          .setLoop(LoopMode[data.loop], data.repetitions)\n          .fadeIn(data.crossFadeDuration)\n          .play();\n        this.activeActions.push(action);\n      }\n    }\n  },\n\n  tick: function (t, dt) {\n    if (this.mixer && !isNaN(dt)) this.mixer.update(dt / 1000);\n  }\n});\n\n/**\n * Creates a RegExp from the given string, converting asterisks to .* expressions,\n * and escaping all other characters.\n */\nfunction wildcardToRegExp (s) {\n  return new RegExp('^' + s.split(/\\*+/).map(regExpEscape).join('.*') + '$');\n}\n\n/**\n * RegExp-escapes all characters in the given string.\n */\nfunction regExpEscape (s) {\n  return s.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&');\n}\n","THREE.ColladaLoader = require('../../lib/ColladaLoader');\n\n/**\n * collada-model-legacy\n *\n * Loader for COLLADA (.dae) format.\n */\nmodule.exports.Component = AFRAME.registerComponent('collada-model-legacy', {\n  schema: {type: 'asset'},\n\n  init: function () {\n    this.model = null;\n    this.loader = new THREE.ColladaLoader();\n  },\n\n  update: function () {\n    var self = this;\n    var el = this.el;\n    var src = this.data;\n    var rendererSystem = this.el.sceneEl.systems.renderer;\n\n    if (!src) { return; }\n\n    this.remove();\n\n    this.loader.load(src, function (colladaModel) {\n      self.model = colladaModel.scene;\n      self.model.traverse(function (object) {\n        if (object.isMesh) {\n          var material = object.material;\n          if (material.color) rendererSystem.applyColorCorrection(material.color);\n          if (material.map) rendererSystem.applyColorCorrection(material.map);\n          if (material.emissive) rendererSystem.applyColorCorrection(material.emissive);\n          if (material.emissiveMap) rendererSystem.applyColorCorrection(material.emissiveMap);\n        }\n      });\n      el.setObject3D('mesh', self.model);\n      el.emit('model-loaded', {format: 'collada', model: self.model});\n    });\n  },\n\n  remove: function () {\n    if (!this.model) { return; }\n    this.el.removeObject3D('mesh');\n  }\n});\n","/**\n * @author mrdoob / http://mrdoob.com/\n * @author Mugen87 / https://github.com/Mugen87\n */\n\nmodule.exports = THREE.ColladaLoader = function ( manager ) {\n\n  this.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n};\n\nTHREE.ColladaLoader.prototype = {\n\n  constructor: THREE.ColladaLoader,\n\n  crossOrigin: 'anonymous',\n\n  load: function ( url, onLoad, onProgress, onError ) {\n\n    var scope = this;\n\n    var path = ( scope.path === undefined ) ? THREE.LoaderUtils.extractUrlBase( url ) : scope.path;\n\n    var loader = new THREE.FileLoader( scope.manager );\n    loader.setPath( scope.path );\n    loader.load( url, function ( text ) {\n\n      onLoad( scope.parse( text, path ) );\n\n    }, onProgress, onError );\n\n  },\n\n  setPath: function ( value ) {\n\n    this.path = value;\n    return this;\n\n  },\n\n  setResourcePath: function ( value ) {\n\n    this.resourcePath = value;\n    return this;\n\n  },\n\n  options: {\n\n    set convertUpAxis( value ) {\n\n      console.warn( 'THREE.ColladaLoader: options.convertUpAxis() has been removed. Up axis is converted automatically.' );\n\n    }\n\n  },\n\n  setCrossOrigin: function ( value ) {\n\n    this.crossOrigin = value;\n    return this;\n\n  },\n\n  parse: function ( text, path ) {\n\n    function getElementsByTagName( xml, name ) {\n\n      // Non recursive xml.getElementsByTagName() ...\n\n      var array = [];\n      var childNodes = xml.childNodes;\n\n      for ( var i = 0, l = childNodes.length; i < l; i ++ ) {\n\n        var child = childNodes[ i ];\n\n        if ( child.nodeName === name ) {\n\n          array.push( child );\n\n        }\n\n      }\n\n      return array;\n\n    }\n\n    function parseStrings( text ) {\n\n      if ( text.length === 0 ) return [];\n\n      var parts = text.trim().split( /\\s+/ );\n      var array = new Array( parts.length );\n\n      for ( var i = 0, l = parts.length; i < l; i ++ ) {\n\n        array[ i ] = parts[ i ];\n\n      }\n\n      return array;\n\n    }\n\n    function parseFloats( text ) {\n\n      if ( text.length === 0 ) return [];\n\n      var parts = text.trim().split( /\\s+/ );\n      var array = new Array( parts.length );\n\n      for ( var i = 0, l = parts.length; i < l; i ++ ) {\n\n        array[ i ] = parseFloat( parts[ i ] );\n\n      }\n\n      return array;\n\n    }\n\n    function parseInts( text ) {\n\n      if ( text.length === 0 ) return [];\n\n      var parts = text.trim().split( /\\s+/ );\n      var array = new Array( parts.length );\n\n      for ( var i = 0, l = parts.length; i < l; i ++ ) {\n\n        array[ i ] = parseInt( parts[ i ] );\n\n      }\n\n      return array;\n\n    }\n\n    function parseId( text ) {\n\n      return text.substring( 1 );\n\n    }\n\n    function generateId() {\n\n      return 'three_default_' + ( count ++ );\n\n    }\n\n    function isEmpty( object ) {\n\n      return Object.keys( object ).length === 0;\n\n    }\n\n    // asset\n\n    function parseAsset( xml ) {\n\n      return {\n        unit: parseAssetUnit( getElementsByTagName( xml, 'unit' )[ 0 ] ),\n        upAxis: parseAssetUpAxis( getElementsByTagName( xml, 'up_axis' )[ 0 ] )\n      };\n\n    }\n\n    function parseAssetUnit( xml ) {\n\n      if ( ( xml !== undefined ) && ( xml.hasAttribute( 'meter' ) === true ) ) {\n\n        return parseFloat( xml.getAttribute( 'meter' ) );\n\n      } else {\n\n        return 1; // default 1 meter\n\n      }\n\n    }\n\n    function parseAssetUpAxis( xml ) {\n\n      return xml !== undefined ? xml.textContent : 'Y_UP';\n\n    }\n\n    // library\n\n    function parseLibrary( xml, libraryName, nodeName, parser ) {\n\n      var library = getElementsByTagName( xml, libraryName )[ 0 ];\n\n      if ( library !== undefined ) {\n\n        var elements = getElementsByTagName( library, nodeName );\n\n        for ( var i = 0; i < elements.length; i ++ ) {\n\n          parser( elements[ i ] );\n\n        }\n\n      }\n\n    }\n\n    function buildLibrary( data, builder ) {\n\n      for ( var name in data ) {\n\n        var object = data[ name ];\n        object.build = builder( data[ name ] );\n\n      }\n\n    }\n\n    // get\n\n    function getBuild( data, builder ) {\n\n      if ( data.build !== undefined ) return data.build;\n\n      data.build = builder( data );\n\n      return data.build;\n\n    }\n\n    // animation\n\n    function parseAnimation( xml ) {\n\n      var data = {\n        sources: {},\n        samplers: {},\n        channels: {}\n      };\n\n      for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        var id;\n\n        switch ( child.nodeName ) {\n\n          case 'source':\n            id = child.getAttribute( 'id' );\n            data.sources[ id ] = parseSource( child );\n            break;\n\n          case 'sampler':\n            id = child.getAttribute( 'id' );\n            data.samplers[ id ] = parseAnimationSampler( child );\n            break;\n\n          case 'channel':\n            id = child.getAttribute( 'target' );\n            data.channels[ id ] = parseAnimationChannel( child );\n            break;\n\n          default:\n            console.log( child );\n\n        }\n\n      }\n\n      library.animations[ xml.getAttribute( 'id' ) ] = data;\n\n    }\n\n    function parseAnimationSampler( xml ) {\n\n      var data = {\n        inputs: {},\n      };\n\n      for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        switch ( child.nodeName ) {\n\n          case 'input':\n            var id = parseId( child.getAttribute( 'source' ) );\n            var semantic = child.getAttribute( 'semantic' );\n            data.inputs[ semantic ] = id;\n            break;\n\n        }\n\n      }\n\n      return data;\n\n    }\n\n    function parseAnimationChannel( xml ) {\n\n      var data = {};\n\n      var target = xml.getAttribute( 'target' );\n\n      // parsing SID Addressing Syntax\n\n      var parts = target.split( '/' );\n\n      var id = parts.shift();\n      var sid = parts.shift();\n\n      // check selection syntax\n\n      var arraySyntax = ( sid.indexOf( '(' ) !== - 1 );\n      var memberSyntax = ( sid.indexOf( '.' ) !== - 1 );\n\n      if ( memberSyntax ) {\n\n        //  member selection access\n\n        parts = sid.split( '.' );\n        sid = parts.shift();\n        data.member = parts.shift();\n\n      } else if ( arraySyntax ) {\n\n        // array-access syntax. can be used to express fields in one-dimensional vectors or two-dimensional matrices.\n\n        var indices = sid.split( '(' );\n        sid = indices.shift();\n\n        for ( var i = 0; i < indices.length; i ++ ) {\n\n          indices[ i ] = parseInt( indices[ i ].replace( /\\)/, '' ) );\n\n        }\n\n        data.indices = indices;\n\n      }\n\n      data.id = id;\n      data.sid = sid;\n\n      data.arraySyntax = arraySyntax;\n      data.memberSyntax = memberSyntax;\n\n      data.sampler = parseId( xml.getAttribute( 'source' ) );\n\n      return data;\n\n    }\n\n    function buildAnimation( data ) {\n\n      var tracks = [];\n\n      var channels = data.channels;\n      var samplers = data.samplers;\n      var sources = data.sources;\n\n      for ( var target in channels ) {\n\n        if ( channels.hasOwnProperty( target ) ) {\n\n          var channel = channels[ target ];\n          var sampler = samplers[ channel.sampler ];\n\n          var inputId = sampler.inputs.INPUT;\n          var outputId = sampler.inputs.OUTPUT;\n\n          var inputSource = sources[ inputId ];\n          var outputSource = sources[ outputId ];\n\n          var animation = buildAnimationChannel( channel, inputSource, outputSource );\n\n          createKeyframeTracks( animation, tracks );\n\n        }\n\n      }\n\n      return tracks;\n\n    }\n\n    function getAnimation( id ) {\n\n      return getBuild( library.animations[ id ], buildAnimation );\n\n    }\n\n    function buildAnimationChannel( channel, inputSource, outputSource ) {\n\n      var node = library.nodes[ channel.id ];\n      var object3D = getNode( node.id );\n\n      var transform = node.transforms[ channel.sid ];\n      var defaultMatrix = node.matrix.clone().transpose();\n\n      var time, stride;\n      var i, il, j, jl;\n\n      var data = {};\n\n      // the collada spec allows the animation of data in various ways.\n      // depending on the transform type (matrix, translate, rotate, scale), we execute different logic\n\n      switch ( transform ) {\n\n        case 'matrix':\n\n          for ( i = 0, il = inputSource.array.length; i < il; i ++ ) {\n\n            time = inputSource.array[ i ];\n            stride = i * outputSource.stride;\n\n            if ( data[ time ] === undefined ) data[ time ] = {};\n\n            if ( channel.arraySyntax === true ) {\n\n              var value = outputSource.array[ stride ];\n              var index = channel.indices[ 0 ] + 4 * channel.indices[ 1 ];\n\n              data[ time ][ index ] = value;\n\n            } else {\n\n              for ( j = 0, jl = outputSource.stride; j < jl; j ++ ) {\n\n                data[ time ][ j ] = outputSource.array[ stride + j ];\n\n              }\n\n            }\n\n          }\n\n          break;\n\n        case 'translate':\n          console.warn( 'THREE.ColladaLoader: Animation transform type \"%s\" not yet implemented.', transform );\n          break;\n\n        case 'rotate':\n          console.warn( 'THREE.ColladaLoader: Animation transform type \"%s\" not yet implemented.', transform );\n          break;\n\n        case 'scale':\n          console.warn( 'THREE.ColladaLoader: Animation transform type \"%s\" not yet implemented.', transform );\n          break;\n\n      }\n\n      var keyframes = prepareAnimationData( data, defaultMatrix );\n\n      var animation = {\n        name: object3D.uuid,\n        keyframes: keyframes\n      };\n\n      return animation;\n\n    }\n\n    function prepareAnimationData( data, defaultMatrix ) {\n\n      var keyframes = [];\n\n      // transfer data into a sortable array\n\n      for ( var time in data ) {\n\n        keyframes.push( { time: parseFloat( time ), value: data[ time ] } );\n\n      }\n\n      // ensure keyframes are sorted by time\n\n      keyframes.sort( ascending );\n\n      // now we clean up all animation data, so we can use them for keyframe tracks\n\n      for ( var i = 0; i < 16; i ++ ) {\n\n        transformAnimationData( keyframes, i, defaultMatrix.elements[ i ] );\n\n      }\n\n      return keyframes;\n\n      // array sort function\n\n      function ascending( a, b ) {\n\n        return a.time - b.time;\n\n      }\n\n    }\n\n    var position = new THREE.Vector3();\n    var scale = new THREE.Vector3();\n    var quaternion = new THREE.Quaternion();\n\n    function createKeyframeTracks( animation, tracks ) {\n\n      var keyframes = animation.keyframes;\n      var name = animation.name;\n\n      var times = [];\n      var positionData = [];\n      var quaternionData = [];\n      var scaleData = [];\n\n      for ( var i = 0, l = keyframes.length; i < l; i ++ ) {\n\n        var keyframe = keyframes[ i ];\n\n        var time = keyframe.time;\n        var value = keyframe.value;\n\n        matrix.fromArray( value ).transpose();\n        matrix.decompose( position, quaternion, scale );\n\n        times.push( time );\n        positionData.push( position.x, position.y, position.z );\n        quaternionData.push( quaternion.x, quaternion.y, quaternion.z, quaternion.w );\n        scaleData.push( scale.x, scale.y, scale.z );\n\n      }\n\n      if ( positionData.length > 0 ) tracks.push( new THREE.VectorKeyframeTrack( name + '.position', times, positionData ) );\n      if ( quaternionData.length > 0 ) tracks.push( new THREE.QuaternionKeyframeTrack( name + '.quaternion', times, quaternionData ) );\n      if ( scaleData.length > 0 ) tracks.push( new THREE.VectorKeyframeTrack( name + '.scale', times, scaleData ) );\n\n      return tracks;\n\n    }\n\n    function transformAnimationData( keyframes, property, defaultValue ) {\n\n      var keyframe;\n\n      var empty = true;\n      var i, l;\n\n      // check, if values of a property are missing in our keyframes\n\n      for ( i = 0, l = keyframes.length; i < l; i ++ ) {\n\n        keyframe = keyframes[ i ];\n\n        if ( keyframe.value[ property ] === undefined ) {\n\n          keyframe.value[ property ] = null; // mark as missing\n\n        } else {\n\n          empty = false;\n\n        }\n\n      }\n\n      if ( empty === true ) {\n\n        // no values at all, so we set a default value\n\n        for ( i = 0, l = keyframes.length; i < l; i ++ ) {\n\n          keyframe = keyframes[ i ];\n\n          keyframe.value[ property ] = defaultValue;\n\n        }\n\n      } else {\n\n        // filling gaps\n\n        createMissingKeyframes( keyframes, property );\n\n      }\n\n    }\n\n    function createMissingKeyframes( keyframes, property ) {\n\n      var prev, next;\n\n      for ( var i = 0, l = keyframes.length; i < l; i ++ ) {\n\n        var keyframe = keyframes[ i ];\n\n        if ( keyframe.value[ property ] === null ) {\n\n          prev = getPrev( keyframes, i, property );\n          next = getNext( keyframes, i, property );\n\n          if ( prev === null ) {\n\n            keyframe.value[ property ] = next.value[ property ];\n            continue;\n\n          }\n\n          if ( next === null ) {\n\n            keyframe.value[ property ] = prev.value[ property ];\n            continue;\n\n          }\n\n          interpolate( keyframe, prev, next, property );\n\n        }\n\n      }\n\n    }\n\n    function getPrev( keyframes, i, property ) {\n\n      while ( i >= 0 ) {\n\n        var keyframe = keyframes[ i ];\n\n        if ( keyframe.value[ property ] !== null ) return keyframe;\n\n        i --;\n\n      }\n\n      return null;\n\n    }\n\n    function getNext( keyframes, i, property ) {\n\n      while ( i < keyframes.length ) {\n\n        var keyframe = keyframes[ i ];\n\n        if ( keyframe.value[ property ] !== null ) return keyframe;\n\n        i ++;\n\n      }\n\n      return null;\n\n    }\n\n    function interpolate( key, prev, next, property ) {\n\n      if ( ( next.time - prev.time ) === 0 ) {\n\n        key.value[ property ] = prev.value[ property ];\n        return;\n\n      }\n\n      key.value[ property ] = ( ( key.time - prev.time ) * ( next.value[ property ] - prev.value[ property ] ) / ( next.time - prev.time ) ) + prev.value[ property ];\n\n    }\n\n    // animation clips\n\n    function parseAnimationClip( xml ) {\n\n      var data = {\n        name: xml.getAttribute( 'id' ) || 'default',\n        start: parseFloat( xml.getAttribute( 'start' ) || 0 ),\n        end: parseFloat( xml.getAttribute( 'end' ) || 0 ),\n        animations: []\n      };\n\n      for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        switch ( child.nodeName ) {\n\n          case 'instance_animation':\n            data.animations.push( parseId( child.getAttribute( 'url' ) ) );\n            break;\n\n        }\n\n      }\n\n      library.clips[ xml.getAttribute( 'id' ) ] = data;\n\n    }\n\n    function buildAnimationClip( data ) {\n\n      var tracks = [];\n\n      var name = data.name;\n      var duration = ( data.end - data.start ) || - 1;\n      var animations = data.animations;\n\n      for ( var i = 0, il = animations.length; i < il; i ++ ) {\n\n        var animationTracks = getAnimation( animations[ i ] );\n\n        for ( var j = 0, jl = animationTracks.length; j < jl; j ++ ) {\n\n          tracks.push( animationTracks[ j ] );\n\n        }\n\n      }\n\n      return new THREE.AnimationClip( name, duration, tracks );\n\n    }\n\n    function getAnimationClip( id ) {\n\n      return getBuild( library.clips[ id ], buildAnimationClip );\n\n    }\n\n    // controller\n\n    function parseController( xml ) {\n\n      var data = {};\n\n      for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        switch ( child.nodeName ) {\n\n          case 'skin':\n            // there is exactly one skin per controller\n            data.id = parseId( child.getAttribute( 'source' ) );\n            data.skin = parseSkin( child );\n            break;\n\n          case 'morph':\n            data.id = parseId( child.getAttribute( 'source' ) );\n            console.warn( 'THREE.ColladaLoader: Morph target animation not supported yet.' );\n            break;\n\n        }\n\n      }\n\n      library.controllers[ xml.getAttribute( 'id' ) ] = data;\n\n    }\n\n    function parseSkin( xml ) {\n\n      var data = {\n        sources: {}\n      };\n\n      for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        switch ( child.nodeName ) {\n\n          case 'bind_shape_matrix':\n            data.bindShapeMatrix = parseFloats( child.textContent );\n            break;\n\n          case 'source':\n            var id = child.getAttribute( 'id' );\n            data.sources[ id ] = parseSource( child );\n            break;\n\n          case 'joints':\n            data.joints = parseJoints( child );\n            break;\n\n          case 'vertex_weights':\n            data.vertexWeights = parseVertexWeights( child );\n            break;\n\n        }\n\n      }\n\n      return data;\n\n    }\n\n    function parseJoints( xml ) {\n\n      var data = {\n        inputs: {}\n      };\n\n      for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        switch ( child.nodeName ) {\n\n          case 'input':\n            var semantic = child.getAttribute( 'semantic' );\n            var id = parseId( child.getAttribute( 'source' ) );\n            data.inputs[ semantic ] = id;\n            break;\n\n        }\n\n      }\n\n      return data;\n\n    }\n\n    function parseVertexWeights( xml ) {\n\n      var data = {\n        inputs: {}\n      };\n\n      for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        switch ( child.nodeName ) {\n\n          case 'input':\n            var semantic = child.getAttribute( 'semantic' );\n            var id = parseId( child.getAttribute( 'source' ) );\n            var offset = parseInt( child.getAttribute( 'offset' ) );\n            data.inputs[ semantic ] = { id: id, offset: offset };\n            break;\n\n          case 'vcount':\n            data.vcount = parseInts( child.textContent );\n            break;\n\n          case 'v':\n            data.v = parseInts( child.textContent );\n            break;\n\n        }\n\n      }\n\n      return data;\n\n    }\n\n    function buildController( data ) {\n\n      var build = {\n        id: data.id\n      };\n\n      var geometry = library.geometries[ build.id ];\n\n      if ( data.skin !== undefined ) {\n\n        build.skin = buildSkin( data.skin );\n\n        // we enhance the 'sources' property of the corresponding geometry with our skin data\n\n        geometry.sources.skinIndices = build.skin.indices;\n        geometry.sources.skinWeights = build.skin.weights;\n\n      }\n\n      return build;\n\n    }\n\n    function buildSkin( data ) {\n\n      var BONE_LIMIT = 4;\n\n      var build = {\n        joints: [], // this must be an array to preserve the joint order\n        indices: {\n          array: [],\n          stride: BONE_LIMIT\n        },\n        weights: {\n          array: [],\n          stride: BONE_LIMIT\n        }\n      };\n\n      var sources = data.sources;\n      var vertexWeights = data.vertexWeights;\n\n      var vcount = vertexWeights.vcount;\n      var v = vertexWeights.v;\n      var jointOffset = vertexWeights.inputs.JOINT.offset;\n      var weightOffset = vertexWeights.inputs.WEIGHT.offset;\n\n      var jointSource = data.sources[ data.joints.inputs.JOINT ];\n      var inverseSource = data.sources[ data.joints.inputs.INV_BIND_MATRIX ];\n\n      var weights = sources[ vertexWeights.inputs.WEIGHT.id ].array;\n      var stride = 0;\n\n      var i, j, l;\n\n      // procces skin data for each vertex\n\n      for ( i = 0, l = vcount.length; i < l; i ++ ) {\n\n        var jointCount = vcount[ i ]; // this is the amount of joints that affect a single vertex\n        var vertexSkinData = [];\n\n        for ( j = 0; j < jointCount; j ++ ) {\n\n          var skinIndex = v[ stride + jointOffset ];\n          var weightId = v[ stride + weightOffset ];\n          var skinWeight = weights[ weightId ];\n\n          vertexSkinData.push( { index: skinIndex, weight: skinWeight } );\n\n          stride += 2;\n\n        }\n\n        // we sort the joints in descending order based on the weights.\n        // this ensures, we only procced the most important joints of the vertex\n\n        vertexSkinData.sort( descending );\n\n        // now we provide for each vertex a set of four index and weight values.\n        // the order of the skin data matches the order of vertices\n\n        for ( j = 0; j < BONE_LIMIT; j ++ ) {\n\n          var d = vertexSkinData[ j ];\n\n          if ( d !== undefined ) {\n\n            build.indices.array.push( d.index );\n            build.weights.array.push( d.weight );\n\n          } else {\n\n            build.indices.array.push( 0 );\n            build.weights.array.push( 0 );\n\n          }\n\n        }\n\n      }\n\n      // setup bind matrix\n\n      if ( data.bindShapeMatrix ) {\n\n        build.bindMatrix = new THREE.Matrix4().fromArray( data.bindShapeMatrix ).transpose();\n\n      } else {\n\n        build.bindMatrix = new THREE.Matrix4().identity();\n\n      }\n\n      // process bones and inverse bind matrix data\n\n      for ( i = 0, l = jointSource.array.length; i < l; i ++ ) {\n\n        var name = jointSource.array[ i ];\n        var boneInverse = new THREE.Matrix4().fromArray( inverseSource.array, i * inverseSource.stride ).transpose();\n\n        build.joints.push( { name: name, boneInverse: boneInverse } );\n\n      }\n\n      return build;\n\n      // array sort function\n\n      function descending( a, b ) {\n\n        return b.weight - a.weight;\n\n      }\n\n    }\n\n    function getController( id ) {\n\n      return getBuild( library.controllers[ id ], buildController );\n\n    }\n\n    // image\n\n    function parseImage( xml ) {\n\n      var data = {\n        init_from: getElementsByTagName( xml, 'init_from' )[ 0 ].textContent\n      };\n\n      library.images[ xml.getAttribute( 'id' ) ] = data;\n\n    }\n\n    function buildImage( data ) {\n\n      if ( data.build !== undefined ) return data.build;\n\n      return data.init_from;\n\n    }\n\n    function getImage( id ) {\n\n      var data = library.images[ id ];\n\n      if ( data !== undefined ) {\n\n        return getBuild( data, buildImage );\n\n      }\n\n      console.warn( 'THREE.ColladaLoader: Couldn\\'t find image with ID:', id );\n\n      return null;\n\n    }\n\n    // effect\n\n    function parseEffect( xml ) {\n\n      var data = {};\n\n      for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        switch ( child.nodeName ) {\n\n          case 'profile_COMMON':\n            data.profile = parseEffectProfileCOMMON( child );\n            break;\n\n        }\n\n      }\n\n      library.effects[ xml.getAttribute( 'id' ) ] = data;\n\n    }\n\n    function parseEffectProfileCOMMON( xml ) {\n\n      var data = {\n        surfaces: {},\n        samplers: {}\n      };\n\n      for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        switch ( child.nodeName ) {\n\n          case 'newparam':\n            parseEffectNewparam( child, data );\n            break;\n\n          case 'technique':\n            data.technique = parseEffectTechnique( child );\n            break;\n\n          case 'extra':\n            data.extra = parseEffectExtra( child );\n            break;\n\n        }\n\n      }\n\n      return data;\n\n    }\n\n    function parseEffectNewparam( xml, data ) {\n\n      var sid = xml.getAttribute( 'sid' );\n\n      for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        switch ( child.nodeName ) {\n\n          case 'surface':\n            data.surfaces[ sid ] = parseEffectSurface( child );\n            break;\n\n          case 'sampler2D':\n            data.samplers[ sid ] = parseEffectSampler( child );\n            break;\n\n        }\n\n      }\n\n    }\n\n    function parseEffectSurface( xml ) {\n\n      var data = {};\n\n      for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        switch ( child.nodeName ) {\n\n          case 'init_from':\n            data.init_from = child.textContent;\n            break;\n\n        }\n\n      }\n\n      return data;\n\n    }\n\n    function parseEffectSampler( xml ) {\n\n      var data = {};\n\n      for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        switch ( child.nodeName ) {\n\n          case 'source':\n            data.source = child.textContent;\n            break;\n\n        }\n\n      }\n\n      return data;\n\n    }\n\n    function parseEffectTechnique( xml ) {\n\n      var data = {};\n\n      for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        switch ( child.nodeName ) {\n\n          case 'constant':\n          case 'lambert':\n          case 'blinn':\n          case 'phong':\n            data.type = child.nodeName;\n            data.parameters = parseEffectParameters( child );\n            break;\n\n        }\n\n      }\n\n      return data;\n\n    }\n\n    function parseEffectParameters( xml ) {\n\n      var data = {};\n\n      for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        switch ( child.nodeName ) {\n\n          case 'emission':\n          case 'diffuse':\n          case 'specular':\n          case 'bump':\n          case 'ambient':\n          case 'shininess':\n          case 'transparency':\n            data[ child.nodeName ] = parseEffectParameter( child );\n            break;\n          case 'transparent':\n            data[ child.nodeName ] = {\n              opaque: child.getAttribute( 'opaque' ),\n              data: parseEffectParameter( child )\n            };\n            break;\n\n        }\n\n      }\n\n      return data;\n\n    }\n\n    function parseEffectParameter( xml ) {\n\n      var data = {};\n\n      for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        switch ( child.nodeName ) {\n\n          case 'color':\n            data[ child.nodeName ] = parseFloats( child.textContent );\n            break;\n\n          case 'float':\n            data[ child.nodeName ] = parseFloat( child.textContent );\n            break;\n\n          case 'texture':\n            data[ child.nodeName ] = { id: child.getAttribute( 'texture' ), extra: parseEffectParameterTexture( child ) };\n            break;\n\n        }\n\n      }\n\n      return data;\n\n    }\n\n    function parseEffectParameterTexture( xml ) {\n\n      var data = {\n        technique: {}\n      };\n\n      for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        switch ( child.nodeName ) {\n\n          case 'extra':\n            parseEffectParameterTextureExtra( child, data );\n            break;\n\n        }\n\n      }\n\n      return data;\n\n    }\n\n    function parseEffectParameterTextureExtra( xml, data ) {\n\n      for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        switch ( child.nodeName ) {\n\n          case 'technique':\n            parseEffectParameterTextureExtraTechnique( child, data );\n            break;\n\n        }\n\n      }\n\n    }\n\n    function parseEffectParameterTextureExtraTechnique( xml, data ) {\n\n      for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        switch ( child.nodeName ) {\n\n          case 'repeatU':\n          case 'repeatV':\n          case 'offsetU':\n          case 'offsetV':\n            data.technique[ child.nodeName ] = parseFloat( child.textContent );\n            break;\n\n          case 'wrapU':\n          case 'wrapV':\n\n            // some files have values for wrapU/wrapV which become NaN via parseInt\n\n            if ( child.textContent.toUpperCase() === 'TRUE' ) {\n\n              data.technique[ child.nodeName ] = 1;\n\n            } else if ( child.textContent.toUpperCase() === 'FALSE' ) {\n\n              data.technique[ child.nodeName ] = 0;\n\n            } else {\n\n              data.technique[ child.nodeName ] = parseInt( child.textContent );\n\n            }\n\n            break;\n\n        }\n\n      }\n\n    }\n\n    function parseEffectExtra( xml ) {\n\n      var data = {};\n\n      for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        switch ( child.nodeName ) {\n\n          case 'technique':\n            data.technique = parseEffectExtraTechnique( child );\n            break;\n\n        }\n\n      }\n\n      return data;\n\n    }\n\n    function parseEffectExtraTechnique( xml ) {\n\n      var data = {};\n\n      for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        switch ( child.nodeName ) {\n\n          case 'double_sided':\n            data[ child.nodeName ] = parseInt( child.textContent );\n            break;\n\n        }\n\n      }\n\n      return data;\n\n    }\n\n    function buildEffect( data ) {\n\n      return data;\n\n    }\n\n    function getEffect( id ) {\n\n      return getBuild( library.effects[ id ], buildEffect );\n\n    }\n\n    // material\n\n    function parseMaterial( xml ) {\n\n      var data = {\n        name: xml.getAttribute( 'name' )\n      };\n\n      for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        switch ( child.nodeName ) {\n\n          case 'instance_effect':\n            data.url = parseId( child.getAttribute( 'url' ) );\n            break;\n\n        }\n\n      }\n\n      library.materials[ xml.getAttribute( 'id' ) ] = data;\n\n    }\n\n    function getTextureLoader( image ) {\n\n      var loader;\n\n      var extension = image.slice( ( image.lastIndexOf( '.' ) - 1 >>> 0 ) + 2 ); // http://www.jstips.co/en/javascript/get-file-extension/\n      extension = extension.toLowerCase();\n\n      switch ( extension ) {\n\n        case 'tga':\n          loader = tgaLoader;\n          break;\n\n        default:\n          loader = textureLoader;\n\n      }\n\n      return loader;\n\n    }\n\n    function buildMaterial( data ) {\n\n      var effect = getEffect( data.url );\n      var technique = effect.profile.technique;\n      var extra = effect.profile.extra;\n\n      var material;\n\n      switch ( technique.type ) {\n\n        case 'phong':\n        case 'blinn':\n          material = new THREE.MeshPhongMaterial();\n          break;\n\n        case 'lambert':\n          material = new THREE.MeshLambertMaterial();\n          break;\n\n        default:\n          material = new THREE.MeshBasicMaterial();\n          break;\n\n      }\n\n      material.name = data.name;\n\n      function getTexture( textureObject ) {\n\n        var sampler = effect.profile.samplers[ textureObject.id ];\n        var image = null;\n\n        // get image\n\n        if ( sampler !== undefined ) {\n\n          var surface = effect.profile.surfaces[ sampler.source ];\n          image = getImage( surface.init_from );\n\n        } else {\n\n          console.warn( 'THREE.ColladaLoader: Undefined sampler. Access image directly (see #12530).' );\n          image = getImage( textureObject.id );\n\n        }\n\n        // create texture if image is avaiable\n\n        if ( image !== null ) {\n\n          var loader = getTextureLoader( image );\n\n          if ( loader !== undefined ) {\n\n            var texture = loader.load( image );\n\n            var extra = textureObject.extra;\n\n            if ( extra !== undefined && extra.technique !== undefined && isEmpty( extra.technique ) === false ) {\n\n              var technique = extra.technique;\n\n              texture.wrapS = technique.wrapU ? THREE.RepeatWrapping : THREE.ClampToEdgeWrapping;\n              texture.wrapT = technique.wrapV ? THREE.RepeatWrapping : THREE.ClampToEdgeWrapping;\n\n              texture.offset.set( technique.offsetU || 0, technique.offsetV || 0 );\n              texture.repeat.set( technique.repeatU || 1, technique.repeatV || 1 );\n\n            } else {\n\n              texture.wrapS = THREE.RepeatWrapping;\n              texture.wrapT = THREE.RepeatWrapping;\n\n            }\n\n            return texture;\n\n          } else {\n\n            console.warn( 'THREE.ColladaLoader: Loader for texture %s not found.', image );\n\n            return null;\n\n          }\n\n        } else {\n\n          console.warn( 'THREE.ColladaLoader: Couldn\\'t create texture with ID:', textureObject.id );\n\n          return null;\n\n        }\n\n      }\n\n      var parameters = technique.parameters;\n\n      for ( var key in parameters ) {\n\n        var parameter = parameters[ key ];\n\n        switch ( key ) {\n\n          case 'diffuse':\n            if ( parameter.color ) material.color.fromArray( parameter.color );\n            if ( parameter.texture ) material.map = getTexture( parameter.texture );\n            break;\n          case 'specular':\n            if ( parameter.color && material.specular ) material.specular.fromArray( parameter.color );\n            if ( parameter.texture ) material.specularMap = getTexture( parameter.texture );\n            break;\n          case 'bump':\n            if ( parameter.texture ) material.normalMap = getTexture( parameter.texture );\n            break;\n          case 'ambient':\n            if ( parameter.texture ) material.lightMap = getTexture( parameter.texture );\n            break;\n          case 'shininess':\n            if ( parameter.float && material.shininess ) material.shininess = parameter.float;\n            break;\n          case 'emission':\n            if ( parameter.color && material.emissive ) material.emissive.fromArray( parameter.color );\n            if ( parameter.texture ) material.emissiveMap = getTexture( parameter.texture );\n            break;\n\n        }\n\n      }\n\n      //\n\n      var transparent = parameters[ 'transparent' ];\n      var transparency = parameters[ 'transparency' ];\n\n      // <transparency> does not exist but <transparent>\n\n      if ( transparency === undefined && transparent ) {\n\n        transparency = {\n          float: 1\n        };\n\n      }\n\n      // <transparent> does not exist but <transparency>\n\n      if ( transparent === undefined && transparency ) {\n\n        transparent = {\n          opaque: 'A_ONE',\n          data: {\n            color: [ 1, 1, 1, 1 ]\n          } };\n\n      }\n\n      if ( transparent && transparency ) {\n\n        // handle case if a texture exists but no color\n\n        if ( transparent.data.texture ) {\n\n          // we do not set an alpha map (see #13792)\n\n          material.transparent = true;\n\n        } else {\n\n          var color = transparent.data.color;\n\n          switch ( transparent.opaque ) {\n\n            case 'A_ONE':\n              material.opacity = color[ 3 ] * transparency.float;\n              break;\n            case 'RGB_ZERO':\n              material.opacity = 1 - ( color[ 0 ] * transparency.float );\n              break;\n            case 'A_ZERO':\n              material.opacity = 1 - ( color[ 3 ] * transparency.float );\n              break;\n            case 'RGB_ONE':\n              material.opacity = color[ 0 ] * transparency.float;\n              break;\n            default:\n              console.warn( 'THREE.ColladaLoader: Invalid opaque type \"%s\" of transparent tag.', transparent.opaque );\n\n          }\n\n          if ( material.opacity < 1 ) material.transparent = true;\n\n        }\n\n      }\n\n      //\n\n      if ( extra !== undefined && extra.technique !== undefined && extra.technique.double_sided === 1 ) {\n\n        material.side = THREE.DoubleSide;\n\n      }\n\n      return material;\n\n    }\n\n    function getMaterial( id ) {\n\n      return getBuild( library.materials[ id ], buildMaterial );\n\n    }\n\n    // camera\n\n    function parseCamera( xml ) {\n\n      var data = {\n        name: xml.getAttribute( 'name' )\n      };\n\n      for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        switch ( child.nodeName ) {\n\n          case 'optics':\n            data.optics = parseCameraOptics( child );\n            break;\n\n        }\n\n      }\n\n      library.cameras[ xml.getAttribute( 'id' ) ] = data;\n\n    }\n\n    function parseCameraOptics( xml ) {\n\n      for ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        switch ( child.nodeName ) {\n\n          case 'technique_common':\n            return parseCameraTechnique( child );\n\n        }\n\n      }\n\n      return {};\n\n    }\n\n    function parseCameraTechnique( xml ) {\n\n      var data = {};\n\n      for ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        switch ( child.nodeName ) {\n\n          case 'perspective':\n          case 'orthographic':\n\n            data.technique = child.nodeName;\n            data.parameters = parseCameraParameters( child );\n\n            break;\n\n        }\n\n      }\n\n      return data;\n\n    }\n\n    function parseCameraParameters( xml ) {\n\n      var data = {};\n\n      for ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        switch ( child.nodeName ) {\n\n          case 'xfov':\n          case 'yfov':\n          case 'xmag':\n          case 'ymag':\n          case 'znear':\n          case 'zfar':\n          case 'aspect_ratio':\n            data[ child.nodeName ] = parseFloat( child.textContent );\n            break;\n\n        }\n\n      }\n\n      return data;\n\n    }\n\n    function buildCamera( data ) {\n\n      var camera;\n\n      switch ( data.optics.technique ) {\n\n        case 'perspective':\n          camera = new THREE.PerspectiveCamera(\n            data.optics.parameters.yfov,\n            data.optics.parameters.aspect_ratio,\n            data.optics.parameters.znear,\n            data.optics.parameters.zfar\n          );\n          break;\n\n        case 'orthographic':\n          var ymag = data.optics.parameters.ymag;\n          var xmag = data.optics.parameters.xmag;\n          var aspectRatio = data.optics.parameters.aspect_ratio;\n\n          xmag = ( xmag === undefined ) ? ( ymag * aspectRatio ) : xmag;\n          ymag = ( ymag === undefined ) ? ( xmag / aspectRatio ) : ymag;\n\n          xmag *= 0.5;\n          ymag *= 0.5;\n\n          camera = new THREE.OrthographicCamera(\n            - xmag, xmag, ymag, - ymag, // left, right, top, bottom\n            data.optics.parameters.znear,\n            data.optics.parameters.zfar\n          );\n          break;\n\n        default:\n          camera = new THREE.PerspectiveCamera();\n          break;\n\n      }\n\n      camera.name = data.name;\n\n      return camera;\n\n    }\n\n    function getCamera( id ) {\n\n      var data = library.cameras[ id ];\n\n      if ( data !== undefined ) {\n\n        return getBuild( data, buildCamera );\n\n      }\n\n      console.warn( 'THREE.ColladaLoader: Couldn\\'t find camera with ID:', id );\n\n      return null;\n\n    }\n\n    // light\n\n    function parseLight( xml ) {\n\n      var data = {};\n\n      for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        switch ( child.nodeName ) {\n\n          case 'technique_common':\n            data = parseLightTechnique( child );\n            break;\n\n        }\n\n      }\n\n      library.lights[ xml.getAttribute( 'id' ) ] = data;\n\n    }\n\n    function parseLightTechnique( xml ) {\n\n      var data = {};\n\n      for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        switch ( child.nodeName ) {\n\n          case 'directional':\n          case 'point':\n          case 'spot':\n          case 'ambient':\n\n            data.technique = child.nodeName;\n            data.parameters = parseLightParameters( child );\n\n        }\n\n      }\n\n      return data;\n\n    }\n\n    function parseLightParameters( xml ) {\n\n      var data = {};\n\n      for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        switch ( child.nodeName ) {\n\n          case 'color':\n            var array = parseFloats( child.textContent );\n            data.color = new THREE.Color().fromArray( array );\n            break;\n\n          case 'falloff_angle':\n            data.falloffAngle = parseFloat( child.textContent );\n            break;\n\n          case 'quadratic_attenuation':\n            var f = parseFloat( child.textContent );\n            data.distance = f ? Math.sqrt( 1 / f ) : 0;\n            break;\n\n        }\n\n      }\n\n      return data;\n\n    }\n\n    function buildLight( data ) {\n\n      var light;\n\n      switch ( data.technique ) {\n\n        case 'directional':\n          light = new THREE.DirectionalLight();\n          break;\n\n        case 'point':\n          light = new THREE.PointLight();\n          break;\n\n        case 'spot':\n          light = new THREE.SpotLight();\n          break;\n\n        case 'ambient':\n          light = new THREE.AmbientLight();\n          break;\n\n      }\n\n      if ( data.parameters.color ) light.color.copy( data.parameters.color );\n      if ( data.parameters.distance ) light.distance = data.parameters.distance;\n\n      return light;\n\n    }\n\n    function getLight( id ) {\n\n      var data = library.lights[ id ];\n\n      if ( data !== undefined ) {\n\n        return getBuild( data, buildLight );\n\n      }\n\n      console.warn( 'THREE.ColladaLoader: Couldn\\'t find light with ID:', id );\n\n      return null;\n\n    }\n\n    // geometry\n\n    function parseGeometry( xml ) {\n\n      var data = {\n        name: xml.getAttribute( 'name' ),\n        sources: {},\n        vertices: {},\n        primitives: []\n      };\n\n      var mesh = getElementsByTagName( xml, 'mesh' )[ 0 ];\n\n      // the following tags inside geometry are not supported yet (see https://github.com/mrdoob/three.js/pull/12606): convex_mesh, spline, brep\n      if ( mesh === undefined ) return;\n\n      for ( var i = 0; i < mesh.childNodes.length; i ++ ) {\n\n        var child = mesh.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        var id = child.getAttribute( 'id' );\n\n        switch ( child.nodeName ) {\n\n          case 'source':\n            data.sources[ id ] = parseSource( child );\n            break;\n\n          case 'vertices':\n            // data.sources[ id ] = data.sources[ parseId( getElementsByTagName( child, 'input' )[ 0 ].getAttribute( 'source' ) ) ];\n            data.vertices = parseGeometryVertices( child );\n            break;\n\n          case 'polygons':\n            console.warn( 'THREE.ColladaLoader: Unsupported primitive type: ', child.nodeName );\n            break;\n\n          case 'lines':\n          case 'linestrips':\n          case 'polylist':\n          case 'triangles':\n            data.primitives.push( parseGeometryPrimitive( child ) );\n            break;\n\n          default:\n            console.log( child );\n\n        }\n\n      }\n\n      library.geometries[ xml.getAttribute( 'id' ) ] = data;\n\n    }\n\n    function parseSource( xml ) {\n\n      var data = {\n        array: [],\n        stride: 3\n      };\n\n      for ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        switch ( child.nodeName ) {\n\n          case 'float_array':\n            data.array = parseFloats( child.textContent );\n            break;\n\n          case 'Name_array':\n            data.array = parseStrings( child.textContent );\n            break;\n\n          case 'technique_common':\n            var accessor = getElementsByTagName( child, 'accessor' )[ 0 ];\n\n            if ( accessor !== undefined ) {\n\n              data.stride = parseInt( accessor.getAttribute( 'stride' ) );\n\n            }\n            break;\n\n        }\n\n      }\n\n      return data;\n\n    }\n\n    function parseGeometryVertices( xml ) {\n\n      var data = {};\n\n      for ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        data[ child.getAttribute( 'semantic' ) ] = parseId( child.getAttribute( 'source' ) );\n\n      }\n\n      return data;\n\n    }\n\n    function parseGeometryPrimitive( xml ) {\n\n      var primitive = {\n        type: xml.nodeName,\n        material: xml.getAttribute( 'material' ),\n        count: parseInt( xml.getAttribute( 'count' ) ),\n        inputs: {},\n        stride: 0,\n        hasUV: false\n      };\n\n      for ( var i = 0, l = xml.childNodes.length; i < l; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        switch ( child.nodeName ) {\n\n          case 'input':\n            var id = parseId( child.getAttribute( 'source' ) );\n            var semantic = child.getAttribute( 'semantic' );\n            var offset = parseInt( child.getAttribute( 'offset' ) );\n            var set = parseInt( child.getAttribute( 'set' ) );\n            var inputname = ( set > 0 ? semantic + set : semantic );\n            primitive.inputs[ inputname ] = { id: id, offset: offset };\n            primitive.stride = Math.max( primitive.stride, offset + 1 );\n            if ( semantic === 'TEXCOORD' ) primitive.hasUV = true;\n            break;\n\n          case 'vcount':\n            primitive.vcount = parseInts( child.textContent );\n            break;\n\n          case 'p':\n            primitive.p = parseInts( child.textContent );\n            break;\n\n        }\n\n      }\n\n      return primitive;\n\n    }\n\n    function groupPrimitives( primitives ) {\n\n      var build = {};\n\n      for ( var i = 0; i < primitives.length; i ++ ) {\n\n        var primitive = primitives[ i ];\n\n        if ( build[ primitive.type ] === undefined ) build[ primitive.type ] = [];\n\n        build[ primitive.type ].push( primitive );\n\n      }\n\n      return build;\n\n    }\n\n    function checkUVCoordinates( primitives ) {\n\n      var count = 0;\n\n      for ( var i = 0, l = primitives.length; i < l; i ++ ) {\n\n        var primitive = primitives[ i ];\n\n        if ( primitive.hasUV === true ) {\n\n          count ++;\n\n        }\n\n      }\n\n      if ( count > 0 && count < primitives.length ) {\n\n        primitives.uvsNeedsFix = true;\n\n      }\n\n    }\n\n    function buildGeometry( data ) {\n\n      var build = {};\n\n      var sources = data.sources;\n      var vertices = data.vertices;\n      var primitives = data.primitives;\n\n      if ( primitives.length === 0 ) return {};\n\n      // our goal is to create one buffer geometry for a single type of primitives\n      // first, we group all primitives by their type\n\n      var groupedPrimitives = groupPrimitives( primitives );\n\n      for ( var type in groupedPrimitives ) {\n\n        var primitiveType = groupedPrimitives[ type ];\n\n        // second, ensure consistent uv coordinates for each type of primitives (polylist,triangles or lines)\n\n        checkUVCoordinates( primitiveType );\n\n        // third, create a buffer geometry for each type of primitives\n\n        build[ type ] = buildGeometryType( primitiveType, sources, vertices );\n\n      }\n\n      return build;\n\n    }\n\n    function buildGeometryType( primitives, sources, vertices ) {\n\n      var build = {};\n\n      var position = { array: [], stride: 0 };\n      var normal = { array: [], stride: 0 };\n      var uv = { array: [], stride: 0 };\n      var uv2 = { array: [], stride: 0 };\n      var color = { array: [], stride: 0 };\n\n      var skinIndex = { array: [], stride: 4 };\n      var skinWeight = { array: [], stride: 4 };\n\n      var geometry = new THREE.BufferGeometry();\n\n      var materialKeys = [];\n\n      var start = 0;\n\n      for ( var p = 0; p < primitives.length; p ++ ) {\n\n        var primitive = primitives[ p ];\n        var inputs = primitive.inputs;\n\n        // groups\n\n        var count = 0;\n\n        switch ( primitive.type ) {\n\n          case 'lines':\n          case 'linestrips':\n            count = primitive.count * 2;\n            break;\n\n          case 'triangles':\n            count = primitive.count * 3;\n            break;\n\n          case 'polylist':\n\n            for ( var g = 0; g < primitive.count; g ++ ) {\n\n              var vc = primitive.vcount[ g ];\n\n              switch ( vc ) {\n\n                case 3:\n                  count += 3; // single triangle\n                  break;\n\n                case 4:\n                  count += 6; // quad, subdivided into two triangles\n                  break;\n\n                default:\n                  count += ( vc - 2 ) * 3; // polylist with more than four vertices\n                  break;\n\n              }\n\n            }\n\n            break;\n\n          default:\n            console.warn( 'THREE.ColladaLoader: Unknow primitive type:', primitive.type );\n\n        }\n\n        geometry.addGroup( start, count, p );\n        start += count;\n\n        // material\n\n        if ( primitive.material ) {\n\n          materialKeys.push( primitive.material );\n\n        }\n\n        // geometry data\n\n        for ( var name in inputs ) {\n\n          var input = inputs[ name ];\n\n          switch ( name ) {\n\n            case 'VERTEX':\n              for ( var key in vertices ) {\n\n                var id = vertices[ key ];\n\n                switch ( key ) {\n\n                  case 'POSITION':\n                    var prevLength = position.array.length;\n                    buildGeometryData( primitive, sources[ id ], input.offset, position.array );\n                    position.stride = sources[ id ].stride;\n\n                    if ( sources.skinWeights && sources.skinIndices ) {\n\n                      buildGeometryData( primitive, sources.skinIndices, input.offset, skinIndex.array );\n                      buildGeometryData( primitive, sources.skinWeights, input.offset, skinWeight.array );\n\n                    }\n\n                    // see #3803\n\n                    if ( primitive.hasUV === false && primitives.uvsNeedsFix === true ) {\n\n                      var count = ( position.array.length - prevLength ) / position.stride;\n\n                      for ( var i = 0; i < count; i ++ ) {\n\n                        // fill missing uv coordinates\n\n                        uv.array.push( 0, 0 );\n\n                      }\n\n                    }\n                    break;\n\n                  case 'NORMAL':\n                    buildGeometryData( primitive, sources[ id ], input.offset, normal.array );\n                    normal.stride = sources[ id ].stride;\n                    break;\n\n                  case 'COLOR':\n                    buildGeometryData( primitive, sources[ id ], input.offset, color.array );\n                    color.stride = sources[ id ].stride;\n                    break;\n\n                  case 'TEXCOORD':\n                    buildGeometryData( primitive, sources[ id ], input.offset, uv.array );\n                    uv.stride = sources[ id ].stride;\n                    break;\n\n                  case 'TEXCOORD1':\n                    buildGeometryData( primitive, sources[ id ], input.offset, uv2.array );\n                    uv.stride = sources[ id ].stride;\n                    break;\n\n                  default:\n                    console.warn( 'THREE.ColladaLoader: Semantic \"%s\" not handled in geometry build process.', key );\n\n                }\n\n              }\n              break;\n\n            case 'NORMAL':\n              buildGeometryData( primitive, sources[ input.id ], input.offset, normal.array );\n              normal.stride = sources[ input.id ].stride;\n              break;\n\n            case 'COLOR':\n              buildGeometryData( primitive, sources[ input.id ], input.offset, color.array );\n              color.stride = sources[ input.id ].stride;\n              break;\n\n            case 'TEXCOORD':\n              buildGeometryData( primitive, sources[ input.id ], input.offset, uv.array );\n              uv.stride = sources[ input.id ].stride;\n              break;\n\n            case 'TEXCOORD1':\n              buildGeometryData( primitive, sources[ input.id ], input.offset, uv2.array );\n              uv2.stride = sources[ input.id ].stride;\n              break;\n\n          }\n\n        }\n\n      }\n\n      // build geometry\n\n      if ( position.array.length > 0 ) geometry.addAttribute( 'position', new THREE.Float32BufferAttribute( position.array, position.stride ) );\n      if ( normal.array.length > 0 ) geometry.addAttribute( 'normal', new THREE.Float32BufferAttribute( normal.array, normal.stride ) );\n      if ( color.array.length > 0 ) geometry.addAttribute( 'color', new THREE.Float32BufferAttribute( color.array, color.stride ) );\n      if ( uv.array.length > 0 ) geometry.addAttribute( 'uv', new THREE.Float32BufferAttribute( uv.array, uv.stride ) );\n      if ( uv2.array.length > 0 ) geometry.addAttribute( 'uv2', new THREE.Float32BufferAttribute( uv2.array, uv2.stride ) );\n\n      if ( skinIndex.array.length > 0 ) geometry.addAttribute( 'skinIndex', new THREE.Float32BufferAttribute( skinIndex.array, skinIndex.stride ) );\n      if ( skinWeight.array.length > 0 ) geometry.addAttribute( 'skinWeight', new THREE.Float32BufferAttribute( skinWeight.array, skinWeight.stride ) );\n\n      build.data = geometry;\n      build.type = primitives[ 0 ].type;\n      build.materialKeys = materialKeys;\n\n      return build;\n\n    }\n\n    function buildGeometryData( primitive, source, offset, array ) {\n\n      var indices = primitive.p;\n      var stride = primitive.stride;\n      var vcount = primitive.vcount;\n\n      function pushVector( i ) {\n\n        var index = indices[ i + offset ] * sourceStride;\n        var length = index + sourceStride;\n\n        for ( ; index < length; index ++ ) {\n\n          array.push( sourceArray[ index ] );\n\n        }\n\n      }\n\n      var sourceArray = source.array;\n      var sourceStride = source.stride;\n\n      if ( primitive.vcount !== undefined ) {\n\n        var index = 0;\n\n        for ( var i = 0, l = vcount.length; i < l; i ++ ) {\n\n          var count = vcount[ i ];\n\n          if ( count === 4 ) {\n\n            var a = index + stride * 0;\n            var b = index + stride * 1;\n            var c = index + stride * 2;\n            var d = index + stride * 3;\n\n            pushVector( a ); pushVector( b ); pushVector( d );\n            pushVector( b ); pushVector( c ); pushVector( d );\n\n          } else if ( count === 3 ) {\n\n            var a = index + stride * 0;\n            var b = index + stride * 1;\n            var c = index + stride * 2;\n\n            pushVector( a ); pushVector( b ); pushVector( c );\n\n          } else if ( count > 4 ) {\n\n            for ( var k = 1, kl = ( count - 2 ); k <= kl; k ++ ) {\n\n              var a = index + stride * 0;\n              var b = index + stride * k;\n              var c = index + stride * ( k + 1 );\n\n              pushVector( a ); pushVector( b ); pushVector( c );\n\n            }\n\n          }\n\n          index += stride * count;\n\n        }\n\n      } else {\n\n        for ( var i = 0, l = indices.length; i < l; i += stride ) {\n\n          pushVector( i );\n\n        }\n\n      }\n\n    }\n\n    function getGeometry( id ) {\n\n      return getBuild( library.geometries[ id ], buildGeometry );\n\n    }\n\n    // kinematics\n\n    function parseKinematicsModel( xml ) {\n\n      var data = {\n        name: xml.getAttribute( 'name' ) || '',\n        joints: {},\n        links: []\n      };\n\n      for ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        switch ( child.nodeName ) {\n\n          case 'technique_common':\n            parseKinematicsTechniqueCommon( child, data );\n            break;\n\n        }\n\n      }\n\n      library.kinematicsModels[ xml.getAttribute( 'id' ) ] = data;\n\n    }\n\n    function buildKinematicsModel( data ) {\n\n      if ( data.build !== undefined ) return data.build;\n\n      return data;\n\n    }\n\n    function getKinematicsModel( id ) {\n\n      return getBuild( library.kinematicsModels[ id ], buildKinematicsModel );\n\n    }\n\n    function parseKinematicsTechniqueCommon( xml, data ) {\n\n      for ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        switch ( child.nodeName ) {\n\n          case 'joint':\n            data.joints[ child.getAttribute( 'sid' ) ] = parseKinematicsJoint( child );\n            break;\n\n          case 'link':\n            data.links.push( parseKinematicsLink( child ) );\n            break;\n\n        }\n\n      }\n\n    }\n\n    function parseKinematicsJoint( xml ) {\n\n      var data;\n\n      for ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        switch ( child.nodeName ) {\n\n          case 'prismatic':\n          case 'revolute':\n            data = parseKinematicsJointParameter( child );\n            break;\n\n        }\n\n      }\n\n      return data;\n\n    }\n\n    function parseKinematicsJointParameter( xml, data ) {\n\n      var data = {\n        sid: xml.getAttribute( 'sid' ),\n        name: xml.getAttribute( 'name' ) || '',\n        axis: new THREE.Vector3(),\n        limits: {\n          min: 0,\n          max: 0\n        },\n        type: xml.nodeName,\n        static: false,\n        zeroPosition: 0,\n        middlePosition: 0\n      };\n\n      for ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        switch ( child.nodeName ) {\n\n          case 'axis':\n            var array = parseFloats( child.textContent );\n            data.axis.fromArray( array );\n            break;\n          case 'limits':\n            var max = child.getElementsByTagName( 'max' )[ 0 ];\n            var min = child.getElementsByTagName( 'min' )[ 0 ];\n\n            data.limits.max = parseFloat( max.textContent );\n            data.limits.min = parseFloat( min.textContent );\n            break;\n\n        }\n\n      }\n\n      // if min is equal to or greater than max, consider the joint static\n\n      if ( data.limits.min >= data.limits.max ) {\n\n        data.static = true;\n\n      }\n\n      // calculate middle position\n\n      data.middlePosition = ( data.limits.min + data.limits.max ) / 2.0;\n\n      return data;\n\n    }\n\n    function parseKinematicsLink( xml ) {\n\n      var data = {\n        sid: xml.getAttribute( 'sid' ),\n        name: xml.getAttribute( 'name' ) || '',\n        attachments: [],\n        transforms: []\n      };\n\n      for ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        switch ( child.nodeName ) {\n\n          case 'attachment_full':\n            data.attachments.push( parseKinematicsAttachment( child ) );\n            break;\n\n          case 'matrix':\n          case 'translate':\n          case 'rotate':\n            data.transforms.push( parseKinematicsTransform( child ) );\n            break;\n\n        }\n\n      }\n\n      return data;\n\n    }\n\n    function parseKinematicsAttachment( xml ) {\n\n      var data = {\n        joint: xml.getAttribute( 'joint' ).split( '/' ).pop(),\n        transforms: [],\n        links: []\n      };\n\n      for ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        switch ( child.nodeName ) {\n\n          case 'link':\n            data.links.push( parseKinematicsLink( child ) );\n            break;\n\n          case 'matrix':\n          case 'translate':\n          case 'rotate':\n            data.transforms.push( parseKinematicsTransform( child ) );\n            break;\n\n        }\n\n      }\n\n      return data;\n\n    }\n\n    function parseKinematicsTransform( xml ) {\n\n      var data = {\n        type: xml.nodeName\n      };\n\n      var array = parseFloats( xml.textContent );\n\n      switch ( data.type ) {\n\n        case 'matrix':\n          data.obj = new THREE.Matrix4();\n          data.obj.fromArray( array ).transpose();\n          break;\n\n        case 'translate':\n          data.obj = new THREE.Vector3();\n          data.obj.fromArray( array );\n          break;\n\n        case 'rotate':\n          data.obj = new THREE.Vector3();\n          data.obj.fromArray( array );\n          data.angle = THREE.Math.degToRad( array[ 3 ] );\n          break;\n\n      }\n\n      return data;\n\n    }\n\n    // physics\n\n    function parsePhysicsModel( xml ) {\n\n      var data = {\n        name: xml.getAttribute( 'name' ) || '',\n        rigidBodies: {}\n      };\n\n      for ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        switch ( child.nodeName ) {\n\n          case 'rigid_body':\n            data.rigidBodies[ child.getAttribute( 'name' ) ] = {};\n            parsePhysicsRigidBody( child, data.rigidBodies[ child.getAttribute( 'name' ) ] );\n            break;\n\n        }\n\n      }\n\n      library.physicsModels[ xml.getAttribute( 'id' ) ] = data;\n\n    }\n\n    function parsePhysicsRigidBody( xml, data ) {\n\n      for ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        switch ( child.nodeName ) {\n\n          case 'technique_common':\n            parsePhysicsTechniqueCommon( child, data );\n            break;\n\n        }\n\n      }\n\n    }\n\n    function parsePhysicsTechniqueCommon( xml, data ) {\n\n      for ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        switch ( child.nodeName ) {\n\n          case 'inertia':\n            data.inertia = parseFloats( child.textContent );\n            break;\n\n          case 'mass':\n            data.mass = parseFloats( child.textContent )[ 0 ];\n            break;\n\n        }\n\n      }\n\n    }\n\n    // scene\n\n    function parseKinematicsScene( xml ) {\n\n      var data = {\n        bindJointAxis: []\n      };\n\n      for ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        switch ( child.nodeName ) {\n\n          case 'bind_joint_axis':\n            data.bindJointAxis.push( parseKinematicsBindJointAxis( child ) );\n            break;\n\n        }\n\n      }\n\n      library.kinematicsScenes[ parseId( xml.getAttribute( 'url' ) ) ] = data;\n\n    }\n\n    function parseKinematicsBindJointAxis( xml ) {\n\n      var data = {\n        target: xml.getAttribute( 'target' ).split( '/' ).pop()\n      };\n\n      for ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        switch ( child.nodeName ) {\n\n          case 'axis':\n            var param = child.getElementsByTagName( 'param' )[ 0 ];\n            data.axis = param.textContent;\n            var tmpJointIndex = data.axis.split( 'inst_' ).pop().split( 'axis' )[ 0 ];\n            data.jointIndex = tmpJointIndex.substr( 0, tmpJointIndex.length - 1 );\n            break;\n\n        }\n\n      }\n\n      return data;\n\n    }\n\n    function buildKinematicsScene( data ) {\n\n      if ( data.build !== undefined ) return data.build;\n\n      return data;\n\n    }\n\n    function getKinematicsScene( id ) {\n\n      return getBuild( library.kinematicsScenes[ id ], buildKinematicsScene );\n\n    }\n\n    function setupKinematics() {\n\n      var kinematicsModelId = Object.keys( library.kinematicsModels )[ 0 ];\n      var kinematicsSceneId = Object.keys( library.kinematicsScenes )[ 0 ];\n      var visualSceneId = Object.keys( library.visualScenes )[ 0 ];\n\n      if ( kinematicsModelId === undefined || kinematicsSceneId === undefined ) return;\n\n      var kinematicsModel = getKinematicsModel( kinematicsModelId );\n      var kinematicsScene = getKinematicsScene( kinematicsSceneId );\n      var visualScene = getVisualScene( visualSceneId );\n\n      var bindJointAxis = kinematicsScene.bindJointAxis;\n      var jointMap = {};\n\n      for ( var i = 0, l = bindJointAxis.length; i < l; i ++ ) {\n\n        var axis = bindJointAxis[ i ];\n\n        // the result of the following query is an element of type 'translate', 'rotate','scale' or 'matrix'\n\n        var targetElement = collada.querySelector( '[sid=\"' + axis.target + '\"]' );\n\n        if ( targetElement ) {\n\n          // get the parent of the transfrom element\n\n          var parentVisualElement = targetElement.parentElement;\n\n          // connect the joint of the kinematics model with the element in the visual scene\n\n          connect( axis.jointIndex, parentVisualElement );\n\n        }\n\n      }\n\n      function connect( jointIndex, visualElement ) {\n\n        var visualElementName = visualElement.getAttribute( 'name' );\n        var joint = kinematicsModel.joints[ jointIndex ];\n\n        visualScene.traverse( function ( object ) {\n\n          if ( object.name === visualElementName ) {\n\n            jointMap[ jointIndex ] = {\n              object: object,\n              transforms: buildTransformList( visualElement ),\n              joint: joint,\n              position: joint.zeroPosition\n            };\n\n          }\n\n        } );\n\n      }\n\n      var m0 = new THREE.Matrix4();\n\n      kinematics = {\n\n        joints: kinematicsModel && kinematicsModel.joints,\n\n        getJointValue: function ( jointIndex ) {\n\n          var jointData = jointMap[ jointIndex ];\n\n          if ( jointData ) {\n\n            return jointData.position;\n\n          } else {\n\n            console.warn( 'THREE.ColladaLoader: Joint ' + jointIndex + ' doesn\\'t exist.' );\n\n          }\n\n        },\n\n        setJointValue: function ( jointIndex, value ) {\n\n          var jointData = jointMap[ jointIndex ];\n\n          if ( jointData ) {\n\n            var joint = jointData.joint;\n\n            if ( value > joint.limits.max || value < joint.limits.min ) {\n\n              console.warn( 'THREE.ColladaLoader: Joint ' + jointIndex + ' value ' + value + ' outside of limits (min: ' + joint.limits.min + ', max: ' + joint.limits.max + ').' );\n\n            } else if ( joint.static ) {\n\n              console.warn( 'THREE.ColladaLoader: Joint ' + jointIndex + ' is static.' );\n\n            } else {\n\n              var object = jointData.object;\n              var axis = joint.axis;\n              var transforms = jointData.transforms;\n\n              matrix.identity();\n\n              // each update, we have to apply all transforms in the correct order\n\n              for ( var i = 0; i < transforms.length; i ++ ) {\n\n                var transform = transforms[ i ];\n\n                // if there is a connection of the transform node with a joint, apply the joint value\n\n                if ( transform.sid && transform.sid.indexOf( jointIndex ) !== - 1 ) {\n\n                  switch ( joint.type ) {\n\n                    case 'revolute':\n                      matrix.multiply( m0.makeRotationAxis( axis, THREE.Math.degToRad( value ) ) );\n                      break;\n\n                    case 'prismatic':\n                      matrix.multiply( m0.makeTranslation( axis.x * value, axis.y * value, axis.z * value ) );\n                      break;\n\n                    default:\n                      console.warn( 'THREE.ColladaLoader: Unknown joint type: ' + joint.type );\n                      break;\n\n                  }\n\n                } else {\n\n                  switch ( transform.type ) {\n\n                    case 'matrix':\n                      matrix.multiply( transform.obj );\n                      break;\n\n                    case 'translate':\n                      matrix.multiply( m0.makeTranslation( transform.obj.x, transform.obj.y, transform.obj.z ) );\n                      break;\n\n                    case 'scale':\n                      matrix.scale( transform.obj );\n                      break;\n\n                    case 'rotate':\n                      matrix.multiply( m0.makeRotationAxis( transform.obj, transform.angle ) );\n                      break;\n\n                  }\n\n                }\n\n              }\n\n              object.matrix.copy( matrix );\n              object.matrix.decompose( object.position, object.quaternion, object.scale );\n\n              jointMap[ jointIndex ].position = value;\n\n            }\n\n          } else {\n\n            console.log( 'THREE.ColladaLoader: ' + jointIndex + ' does not exist.' );\n\n          }\n\n        }\n\n      };\n\n    }\n\n    function buildTransformList( node ) {\n\n      var transforms = [];\n\n      var xml = collada.querySelector( '[id=\"' + node.id + '\"]' );\n\n      for ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        switch ( child.nodeName ) {\n\n          case 'matrix':\n            var array = parseFloats( child.textContent );\n            var matrix = new THREE.Matrix4().fromArray( array ).transpose();\n            transforms.push( {\n              sid: child.getAttribute( 'sid' ),\n              type: child.nodeName,\n              obj: matrix\n            } );\n            break;\n\n          case 'translate':\n          case 'scale':\n            var array = parseFloats( child.textContent );\n            var vector = new THREE.Vector3().fromArray( array );\n            transforms.push( {\n              sid: child.getAttribute( 'sid' ),\n              type: child.nodeName,\n              obj: vector\n            } );\n            break;\n\n          case 'rotate':\n            var array = parseFloats( child.textContent );\n            var vector = new THREE.Vector3().fromArray( array );\n            var angle = THREE.Math.degToRad( array[ 3 ] );\n            transforms.push( {\n              sid: child.getAttribute( 'sid' ),\n              type: child.nodeName,\n              obj: vector,\n              angle: angle\n            } );\n            break;\n\n        }\n\n      }\n\n      return transforms;\n\n    }\n\n    // nodes\n\n    function prepareNodes( xml ) {\n\n      var elements = xml.getElementsByTagName( 'node' );\n\n      // ensure all node elements have id attributes\n\n      for ( var i = 0; i < elements.length; i ++ ) {\n\n        var element = elements[ i ];\n\n        if ( element.hasAttribute( 'id' ) === false ) {\n\n          element.setAttribute( 'id', generateId() );\n\n        }\n\n      }\n\n    }\n\n    var matrix = new THREE.Matrix4();\n    var vector = new THREE.Vector3();\n\n    function parseNode( xml ) {\n\n      var data = {\n        name: xml.getAttribute( 'name' ) || '',\n        type: xml.getAttribute( 'type' ),\n        id: xml.getAttribute( 'id' ),\n        sid: xml.getAttribute( 'sid' ),\n        matrix: new THREE.Matrix4(),\n        nodes: [],\n        instanceCameras: [],\n        instanceControllers: [],\n        instanceLights: [],\n        instanceGeometries: [],\n        instanceNodes: [],\n        transforms: {}\n      };\n\n      for ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        if ( child.nodeType !== 1 ) continue;\n\n        switch ( child.nodeName ) {\n\n          case 'node':\n            data.nodes.push( child.getAttribute( 'id' ) );\n            parseNode( child );\n            break;\n\n          case 'instance_camera':\n            data.instanceCameras.push( parseId( child.getAttribute( 'url' ) ) );\n            break;\n\n          case 'instance_controller':\n            data.instanceControllers.push( parseNodeInstance( child ) );\n            break;\n\n          case 'instance_light':\n            data.instanceLights.push( parseId( child.getAttribute( 'url' ) ) );\n            break;\n\n          case 'instance_geometry':\n            data.instanceGeometries.push( parseNodeInstance( child ) );\n            break;\n\n          case 'instance_node':\n            data.instanceNodes.push( parseId( child.getAttribute( 'url' ) ) );\n            break;\n\n          case 'matrix':\n            var array = parseFloats( child.textContent );\n            data.matrix.multiply( matrix.fromArray( array ).transpose() );\n            data.transforms[ child.getAttribute( 'sid' ) ] = child.nodeName;\n            break;\n\n          case 'translate':\n            var array = parseFloats( child.textContent );\n            vector.fromArray( array );\n            data.matrix.multiply( matrix.makeTranslation( vector.x, vector.y, vector.z ) );\n            data.transforms[ child.getAttribute( 'sid' ) ] = child.nodeName;\n            break;\n\n          case 'rotate':\n            var array = parseFloats( child.textContent );\n            var angle = THREE.Math.degToRad( array[ 3 ] );\n            data.matrix.multiply( matrix.makeRotationAxis( vector.fromArray( array ), angle ) );\n            data.transforms[ child.getAttribute( 'sid' ) ] = child.nodeName;\n            break;\n\n          case 'scale':\n            var array = parseFloats( child.textContent );\n            data.matrix.scale( vector.fromArray( array ) );\n            data.transforms[ child.getAttribute( 'sid' ) ] = child.nodeName;\n            break;\n\n          case 'extra':\n            break;\n\n          default:\n            console.log( child );\n\n        }\n\n      }\n\n      if ( hasNode( data.id ) ) {\n\n        console.warn( 'THREE.ColladaLoader: There is already a node with ID %s. Exclude current node from further processing.', data.id );\n\n      } else {\n\n        library.nodes[ data.id ] = data;\n\n      }\n\n      return data;\n\n    }\n\n    function parseNodeInstance( xml ) {\n\n      var data = {\n        id: parseId( xml.getAttribute( 'url' ) ),\n        materials: {},\n        skeletons: []\n      };\n\n      for ( var i = 0; i < xml.childNodes.length; i ++ ) {\n\n        var child = xml.childNodes[ i ];\n\n        switch ( child.nodeName ) {\n\n          case 'bind_material':\n            var instances = child.getElementsByTagName( 'instance_material' );\n\n            for ( var j = 0; j < instances.length; j ++ ) {\n\n              var instance = instances[ j ];\n              var symbol = instance.getAttribute( 'symbol' );\n              var target = instance.getAttribute( 'target' );\n\n              data.materials[ symbol ] = parseId( target );\n\n            }\n\n            break;\n\n          case 'skeleton':\n            data.skeletons.push( parseId( child.textContent ) );\n            break;\n\n          default:\n            break;\n\n        }\n\n      }\n\n      return data;\n\n    }\n\n    function buildSkeleton( skeletons, joints ) {\n\n      var boneData = [];\n      var sortedBoneData = [];\n\n      var i, j, data;\n\n      // a skeleton can have multiple root bones. collada expresses this\n      // situtation with multiple \"skeleton\" tags per controller instance\n\n      for ( i = 0; i < skeletons.length; i ++ ) {\n\n        var skeleton = skeletons[ i ];\n\n        var root;\n\n        if ( hasNode( skeleton ) ) {\n\n          root = getNode( skeleton );\n          buildBoneHierarchy( root, joints, boneData );\n\n        } else if ( hasVisualScene( skeleton ) ) {\n\n          // handle case where the skeleton refers to the visual scene (#13335)\n\n          var visualScene = library.visualScenes[ skeleton ];\n          var children = visualScene.children;\n\n          for ( var j = 0; j < children.length; j ++ ) {\n\n            var child = children[ j ];\n\n            if ( child.type === 'JOINT' ) {\n\n              var root = getNode( child.id );\n              buildBoneHierarchy( root, joints, boneData );\n\n            }\n\n          }\n\n        } else {\n\n          console.error( 'THREE.ColladaLoader: Unable to find root bone of skeleton with ID:', skeleton );\n\n        }\n\n      }\n\n      // sort bone data (the order is defined in the corresponding controller)\n\n      for ( i = 0; i < joints.length; i ++ ) {\n\n        for ( j = 0; j < boneData.length; j ++ ) {\n\n          data = boneData[ j ];\n\n          if ( data.bone.name === joints[ i ].name ) {\n\n            sortedBoneData[ i ] = data;\n            data.processed = true;\n            break;\n\n          }\n\n        }\n\n      }\n\n      // add unprocessed bone data at the end of the list\n\n      for ( i = 0; i < boneData.length; i ++ ) {\n\n        data = boneData[ i ];\n\n        if ( data.processed === false ) {\n\n          sortedBoneData.push( data );\n          data.processed = true;\n\n        }\n\n      }\n\n      // setup arrays for skeleton creation\n\n      var bones = [];\n      var boneInverses = [];\n\n      for ( i = 0; i < sortedBoneData.length; i ++ ) {\n\n        data = sortedBoneData[ i ];\n\n        bones.push( data.bone );\n        boneInverses.push( data.boneInverse );\n\n      }\n\n      return new THREE.Skeleton( bones, boneInverses );\n\n    }\n\n    function buildBoneHierarchy( root, joints, boneData ) {\n\n      // setup bone data from visual scene\n\n      root.traverse( function ( object ) {\n\n        if ( object.isBone === true ) {\n\n          var boneInverse;\n\n          // retrieve the boneInverse from the controller data\n\n          for ( var i = 0; i < joints.length; i ++ ) {\n\n            var joint = joints[ i ];\n\n            if ( joint.name === object.name ) {\n\n              boneInverse = joint.boneInverse;\n              break;\n\n            }\n\n          }\n\n          if ( boneInverse === undefined ) {\n\n            // Unfortunately, there can be joints in the visual scene that are not part of the\n            // corresponding controller. In this case, we have to create a dummy boneInverse matrix\n            // for the respective bone. This bone won't affect any vertices, because there are no skin indices\n            // and weights defined for it. But we still have to add the bone to the sorted bone list in order to\n            // ensure a correct animation of the model.\n\n            boneInverse = new THREE.Matrix4();\n\n          }\n\n          boneData.push( { bone: object, boneInverse: boneInverse, processed: false } );\n\n        }\n\n      } );\n\n    }\n\n    function buildNode( data ) {\n\n      var objects = [];\n\n      var matrix = data.matrix;\n      var nodes = data.nodes;\n      var type = data.type;\n      var instanceCameras = data.instanceCameras;\n      var instanceControllers = data.instanceControllers;\n      var instanceLights = data.instanceLights;\n      var instanceGeometries = data.instanceGeometries;\n      var instanceNodes = data.instanceNodes;\n\n      // nodes\n\n      for ( var i = 0, l = nodes.length; i < l; i ++ ) {\n\n        objects.push( getNode( nodes[ i ] ) );\n\n      }\n\n      // instance cameras\n\n      for ( var i = 0, l = instanceCameras.length; i < l; i ++ ) {\n\n        var instanceCamera = getCamera( instanceCameras[ i ] );\n\n        if ( instanceCamera !== null ) {\n\n          objects.push( instanceCamera.clone() );\n\n        }\n\n      }\n\n      // instance controllers\n\n      for ( var i = 0, l = instanceControllers.length; i < l; i ++ ) {\n\n        var instance = instanceControllers[ i ];\n        var controller = getController( instance.id );\n        var geometries = getGeometry( controller.id );\n        var newObjects = buildObjects( geometries, instance.materials );\n\n        var skeletons = instance.skeletons;\n        var joints = controller.skin.joints;\n\n        var skeleton = buildSkeleton( skeletons, joints );\n\n        for ( var j = 0, jl = newObjects.length; j < jl; j ++ ) {\n\n          var object = newObjects[ j ];\n\n          if ( object.isSkinnedMesh ) {\n\n            object.bind( skeleton, controller.skin.bindMatrix );\n            object.normalizeSkinWeights();\n\n          }\n\n          objects.push( object );\n\n        }\n\n      }\n\n      // instance lights\n\n      for ( var i = 0, l = instanceLights.length; i < l; i ++ ) {\n\n        var instanceLight = getLight( instanceLights[ i ] );\n\n        if ( instanceLight !== null ) {\n\n          objects.push( instanceLight.clone() );\n\n        }\n\n      }\n\n      // instance geometries\n\n      for ( var i = 0, l = instanceGeometries.length; i < l; i ++ ) {\n\n        var instance = instanceGeometries[ i ];\n\n        // a single geometry instance in collada can lead to multiple object3Ds.\n        // this is the case when primitives are combined like triangles and lines\n\n        var geometries = getGeometry( instance.id );\n        var newObjects = buildObjects( geometries, instance.materials );\n\n        for ( var j = 0, jl = newObjects.length; j < jl; j ++ ) {\n\n          objects.push( newObjects[ j ] );\n\n        }\n\n      }\n\n      // instance nodes\n\n      for ( var i = 0, l = instanceNodes.length; i < l; i ++ ) {\n\n        objects.push( getNode( instanceNodes[ i ] ).clone() );\n\n      }\n\n      var object;\n\n      if ( nodes.length === 0 && objects.length === 1 ) {\n\n        object = objects[ 0 ];\n\n      } else {\n\n        object = ( type === 'JOINT' ) ? new THREE.Bone() : new THREE.Group();\n\n        for ( var i = 0; i < objects.length; i ++ ) {\n\n          object.add( objects[ i ] );\n\n        }\n\n      }\n\n      if ( object.name === '' ) {\n\n        object.name = ( type === 'JOINT' ) ? data.sid : data.name;\n\n      }\n\n      object.matrix.copy( matrix );\n      object.matrix.decompose( object.position, object.quaternion, object.scale );\n\n      return object;\n\n    }\n\n    var fallbackMaterial = new THREE.MeshBasicMaterial( { color: 0xff00ff } );\n\n    function resolveMaterialBinding( keys, instanceMaterials ) {\n\n      var materials = [];\n\n      for ( var i = 0, l = keys.length; i < l; i ++ ) {\n\n        var id = instanceMaterials[ keys[ i ] ];\n\n        if ( id === undefined ) {\n\n          console.warn( 'THREE.ColladaLoader: Material with key %s not found. Apply fallback material.', keys[ i ] );\n          materials.push( fallbackMaterial );\n\n        } else {\n\n          materials.push( getMaterial( id ) );\n\n        }\n\n      }\n\n      return materials;\n\n    }\n\n    function buildObjects( geometries, instanceMaterials ) {\n\n      var objects = [];\n\n      for ( var type in geometries ) {\n\n        var geometry = geometries[ type ];\n\n        var materials = resolveMaterialBinding( geometry.materialKeys, instanceMaterials );\n\n        // handle case if no materials are defined\n\n        if ( materials.length === 0 ) {\n\n          if ( type === 'lines' || type === 'linestrips' ) {\n\n            materials.push( new THREE.LineBasicMaterial() );\n\n          } else {\n\n            materials.push( new THREE.MeshPhongMaterial() );\n\n          }\n\n        }\n\n        // regard skinning\n\n        var skinning = ( geometry.data.attributes.skinIndex !== undefined );\n\n        if ( skinning ) {\n\n          for ( var i = 0, l = materials.length; i < l; i ++ ) {\n\n            materials[ i ].skinning = true;\n\n          }\n\n        }\n\n        // choose between a single or multi materials (material array)\n\n        var material = ( materials.length === 1 ) ? materials[ 0 ] : materials;\n\n        // now create a specific 3D object\n\n        var object;\n\n        switch ( type ) {\n\n          case 'lines':\n            object = new THREE.LineSegments( geometry.data, material );\n            break;\n\n          case 'linestrips':\n            object = new THREE.Line( geometry.data, material );\n            break;\n\n          case 'triangles':\n          case 'polylist':\n            if ( skinning ) {\n\n              object = new THREE.SkinnedMesh( geometry.data, material );\n\n            } else {\n\n              object = new THREE.Mesh( geometry.data, material );\n\n            }\n            break;\n\n        }\n\n        objects.push( object );\n\n      }\n\n      return objects;\n\n    }\n\n    function hasNode( id ) {\n\n      return library.nodes[ id ] !== undefined;\n\n    }\n\n    function getNode( id ) {\n\n      return getBuild( library.nodes[ id ], buildNode );\n\n    }\n\n    // visual scenes\n\n    function parseVisualScene( xml ) {\n\n      var data = {\n        name: xml.getAttribute( 'name' ),\n        children: []\n      };\n\n      prepareNodes( xml );\n\n      var elements = getElementsByTagName( xml, 'node' );\n\n      for ( var i = 0; i < elements.length; i ++ ) {\n\n        data.children.push( parseNode( elements[ i ] ) );\n\n      }\n\n      library.visualScenes[ xml.getAttribute( 'id' ) ] = data;\n\n    }\n\n    function buildVisualScene( data ) {\n\n      var group = new THREE.Group();\n      group.name = data.name;\n\n      var children = data.children;\n\n      for ( var i = 0; i < children.length; i ++ ) {\n\n        var child = children[ i ];\n\n        group.add( getNode( child.id ) );\n\n      }\n\n      return group;\n\n    }\n\n    function hasVisualScene( id ) {\n\n      return library.visualScenes[ id ] !== undefined;\n\n    }\n\n    function getVisualScene( id ) {\n\n      return getBuild( library.visualScenes[ id ], buildVisualScene );\n\n    }\n\n    // scenes\n\n    function parseScene( xml ) {\n\n      var instance = getElementsByTagName( xml, 'instance_visual_scene' )[ 0 ];\n      return getVisualScene( parseId( instance.getAttribute( 'url' ) ) );\n\n    }\n\n    function setupAnimations() {\n\n      var clips = library.clips;\n\n      if ( isEmpty( clips ) === true ) {\n\n        if ( isEmpty( library.animations ) === false ) {\n\n          // if there are animations but no clips, we create a default clip for playback\n\n          var tracks = [];\n\n          for ( var id in library.animations ) {\n\n            var animationTracks = getAnimation( id );\n\n            for ( var i = 0, l = animationTracks.length; i < l; i ++ ) {\n\n              tracks.push( animationTracks[ i ] );\n\n            }\n\n          }\n\n          animations.push( new THREE.AnimationClip( 'default', - 1, tracks ) );\n\n        }\n\n      } else {\n\n        for ( var id in clips ) {\n\n          animations.push( getAnimationClip( id ) );\n\n        }\n\n      }\n\n    }\n\n    if ( text.length === 0 ) {\n\n      return { scene: new THREE.Scene() };\n\n    }\n\n    var xml = new DOMParser().parseFromString( text, 'application/xml' );\n\n    var collada = getElementsByTagName( xml, 'COLLADA' )[ 0 ];\n\n    // metadata\n\n    var version = collada.getAttribute( 'version' );\n    console.log( 'THREE.ColladaLoader: File version', version );\n\n    var asset = parseAsset( getElementsByTagName( collada, 'asset' )[ 0 ] );\n    var textureLoader = new THREE.TextureLoader( this.manager );\n    textureLoader.setPath( this.resourcePath || path ).setCrossOrigin( this.crossOrigin );\n\n    var tgaLoader;\n\n    if ( THREE.TGALoader ) {\n\n      tgaLoader = new THREE.TGALoader( this.manager );\n      tgaLoader.setPath( this.resourcePath || path );\n\n    }\n\n    //\n\n    var animations = [];\n    var kinematics = {};\n    var count = 0;\n\n    //\n\n    var library = {\n      animations: {},\n      clips: {},\n      controllers: {},\n      images: {},\n      effects: {},\n      materials: {},\n      cameras: {},\n      lights: {},\n      geometries: {},\n      nodes: {},\n      visualScenes: {},\n      kinematicsModels: {},\n      physicsModels: {},\n      kinematicsScenes: {}\n    };\n\n    parseLibrary( collada, 'library_animations', 'animation', parseAnimation );\n    parseLibrary( collada, 'library_animation_clips', 'animation_clip', parseAnimationClip );\n    parseLibrary( collada, 'library_controllers', 'controller', parseController );\n    parseLibrary( collada, 'library_images', 'image', parseImage );\n    parseLibrary( collada, 'library_effects', 'effect', parseEffect );\n    parseLibrary( collada, 'library_materials', 'material', parseMaterial );\n    parseLibrary( collada, 'library_cameras', 'camera', parseCamera );\n    parseLibrary( collada, 'library_lights', 'light', parseLight );\n    parseLibrary( collada, 'library_geometries', 'geometry', parseGeometry );\n    parseLibrary( collada, 'library_nodes', 'node', parseNode );\n    parseLibrary( collada, 'library_visual_scenes', 'visual_scene', parseVisualScene );\n    parseLibrary( collada, 'library_kinematics_models', 'kinematics_model', parseKinematicsModel );\n    parseLibrary( collada, 'library_physics_models', 'physics_model', parsePhysicsModel );\n    parseLibrary( collada, 'scene', 'instance_kinematics_scene', parseKinematicsScene );\n\n    buildLibrary( library.animations, buildAnimation );\n    buildLibrary( library.clips, buildAnimationClip );\n    buildLibrary( library.controllers, buildController );\n    buildLibrary( library.images, buildImage );\n    buildLibrary( library.effects, buildEffect );\n    buildLibrary( library.materials, buildMaterial );\n    buildLibrary( library.cameras, buildCamera );\n    buildLibrary( library.lights, buildLight );\n    buildLibrary( library.geometries, buildGeometry );\n    buildLibrary( library.visualScenes, buildVisualScene );\n\n    setupAnimations();\n    setupKinematics();\n\n    var scene = parseScene( getElementsByTagName( collada, 'scene' )[ 0 ] );\n\n    if ( asset.upAxis === 'Z_UP' ) {\n\n      scene.quaternion.setFromEuler( new THREE.Euler( - Math.PI / 2, 0, 0 ) );\n\n    }\n\n    scene.scale.multiplyScalar( asset.unit );\n\n    return {\n      animations: animations,\n      kinematics: kinematics,\n      library: library,\n      scene: scene\n    };\n\n  }\n\n};\n","THREE.FBXLoader = require('../../lib/FBXLoader');\n\n/**\n * fbx-model\n *\n * Loader for FBX format. Supports ASCII, but *not* binary, models.\n */\nmodule.exports = AFRAME.registerComponent('fbx-model', {\n  schema: {\n    src:         { type: 'asset' },\n    crossorigin: { default: '' }\n  },\n\n  init: function () {\n    this.model = null;\n  },\n\n  update: function () {\n    const data = this.data;\n    if (!data.src) return;\n\n    this.remove();\n    const loader = new THREE.FBXLoader();\n    if (data.crossorigin) loader.setCrossOrigin(data.crossorigin);\n    loader.load(data.src, this.load.bind(this));\n  },\n\n  load: function (model) {\n    this.model = model;\n    this.el.setObject3D('mesh', model);\n    this.el.emit('model-loaded', {format: 'fbx', model: model});\n  },\n\n  remove: function () {\n    if (this.model) this.el.removeObject3D('mesh');\n  }\n});\n","/**\n * @author Kyle-Larson https://github.com/Kyle-Larson\n * @author Takahiro https://github.com/takahirox\n * @author Lewy Blue https://github.com/looeee\n *\n * Loader loads FBX file and generates Group representing FBX scene.\n * Requires FBX file to be >= 7.0 and in ASCII or >= 6400 in Binary format\n * Versions lower than this may load but will probably have errors\n *\n * Needs Support:\n *  Morph normals / blend shape normals\n *\n * FBX format references:\n * \thttps://wiki.blender.org/index.php/User:Mont29/Foundation/FBX_File_Structure\n * \thttp://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_index_html (C++ SDK reference)\n *\n * \tBinary format specification:\n *\t\thttps://code.blender.org/2013/08/fbx-binary-file-format-specification/\n */\n\n\nmodule.exports = THREE.FBXLoader = ( function () {\n\n\tvar fbxTree;\n\tvar connections;\n\tvar sceneGraph;\n\n\tfunction FBXLoader( manager ) {\n\n\t\tthis.manager = ( manager !== undefined ) ? manager : THREE.DefaultLoadingManager;\n\n\t}\n\n\tFBXLoader.prototype = {\n\n\t\tconstructor: FBXLoader,\n\n\t\tcrossOrigin: 'anonymous',\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\t\t\tvar self = this;\n\n\t\t\tvar resourceDirectory = THREE.LoaderUtils.extractUrlBase( url );\n\n\t\t\tvar loader = new THREE.FileLoader( this.manager );\n\t\t\tloader.setResponseType( 'arraybuffer' );\n\t\t\tloader.load( url, function ( buffer ) {\n\n\t\t\t\ttry {\n\n\t\t\t\t\tvar scene = self.parse( buffer, resourceDirectory );\n\t\t\t\t\tonLoad( scene );\n\n\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\tsetTimeout( function () {\n\n\t\t\t\t\t\tif ( onError ) onError( error );\n\n\t\t\t\t\t\tself.manager.itemError( url );\n\n\t\t\t\t\t}, 0 );\n\n\t\t\t\t}\n\n\t\t\t}, onProgress, onError );\n\t\t},\n\n\t\tsetCrossOrigin: function ( value ) {\n\n\t\t\tthis.crossOrigin = value;\n\t\t\treturn this;\n\n\t\t},\n\n\t\tparse: function ( FBXBuffer, resourceDirectory ) {\n\n\t\t\tif ( isFbxFormatBinary( FBXBuffer ) ) {\n\n\t\t\t\tfbxTree = new BinaryParser().parse( FBXBuffer );\n\n\t\t\t} else {\n\n\t\t\t\tvar FBXText = convertArrayBufferToString( FBXBuffer );\n\n\t\t\t\tif ( ! isFbxFormatASCII( FBXText ) ) {\n\n\t\t\t\t\tthrow new Error( 'THREE.FBXLoader: Unknown format.' );\n\n\t\t\t\t}\n\n\t\t\t\tif ( getFbxVersion( FBXText ) < 7000 ) {\n\n\t\t\t\t\tthrow new Error( 'THREE.FBXLoader: FBX version not supported, FileVersion: ' + getFbxVersion( FBXText ) );\n\n\t\t\t\t}\n\n\t\t\t\tfbxTree = new TextParser().parse( FBXText );\n\n\t\t\t}\n\n\t\t\t//console.log( FBXTree );\n\n\t\t\tvar textureLoader = new THREE.TextureLoader( this.manager ).setPath( resourceDirectory ).setCrossOrigin( this.crossOrigin );\n\n\t\t\treturn new FBXTreeParser( textureLoader ).parse( fbxTree );\n\n\t\t}\n\n\t};\n\n\t// Parse the FBXTree object returned by the BinaryParser or TextParser and return a THREE.Group\n\tfunction FBXTreeParser( textureLoader ) {\n\n\t\tthis.textureLoader = textureLoader;\n\n\t}\n\n\tFBXTreeParser.prototype = {\n\n\t\tconstructor: FBXTreeParser,\n\n\t\tparse: function () {\n\n\t\t\tconnections = this.parseConnections();\n\n\t\t\tvar images = this.parseImages();\n\t\t\tvar textures = this.parseTextures( images );\n\t\t\tvar materials = this.parseMaterials( textures );\n\t\t\tvar deformers = this.parseDeformers();\n\t\t\tvar geometryMap = new GeometryParser().parse( deformers );\n\n\t\t\tthis.parseScene( deformers, geometryMap, materials );\n\n\t\t\treturn sceneGraph;\n\n\t\t},\n\n\t\t// Parses FBXTree.Connections which holds parent-child connections between objects (e.g. material -> texture, model->geometry )\n\t\t// and details the connection type\n\t\tparseConnections: function () {\n\n\t\t\tvar connectionMap = new Map();\n\n\t\t\tif ( 'Connections' in fbxTree ) {\n\n\t\t\t\tvar rawConnections = fbxTree.Connections.connections;\n\n\t\t\t\trawConnections.forEach( function ( rawConnection ) {\n\n\t\t\t\t\tvar fromID = rawConnection[ 0 ];\n\t\t\t\t\tvar toID = rawConnection[ 1 ];\n\t\t\t\t\tvar relationship = rawConnection[ 2 ];\n\n\t\t\t\t\tif ( ! connectionMap.has( fromID ) ) {\n\n\t\t\t\t\t\tconnectionMap.set( fromID, {\n\t\t\t\t\t\t\tparents: [],\n\t\t\t\t\t\t\tchildren: []\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar parentRelationship = { ID: toID, relationship: relationship };\n\t\t\t\t\tconnectionMap.get( fromID ).parents.push( parentRelationship );\n\n\t\t\t\t\tif ( ! connectionMap.has( toID ) ) {\n\n\t\t\t\t\t\tconnectionMap.set( toID, {\n\t\t\t\t\t\t\tparents: [],\n\t\t\t\t\t\t\tchildren: []\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar childRelationship = { ID: fromID, relationship: relationship };\n\t\t\t\t\tconnectionMap.get( toID ).children.push( childRelationship );\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\treturn connectionMap;\n\n\t\t},\n\n\t\t// Parse FBXTree.Objects.Video for embedded image data\n\t\t// These images are connected to textures in FBXTree.Objects.Textures\n\t\t// via FBXTree.Connections.\n\t\tparseImages: function () {\n\n\t\t\tvar images = {};\n\t\t\tvar blobs = {};\n\n\t\t\tif ( 'Video' in fbxTree.Objects ) {\n\n\t\t\t\tvar videoNodes = fbxTree.Objects.Video;\n\n\t\t\t\tfor ( var nodeID in videoNodes ) {\n\n\t\t\t\t\tvar videoNode = videoNodes[ nodeID ];\n\n\t\t\t\t\tvar id = parseInt( nodeID );\n\n\t\t\t\t\timages[ id ] = videoNode.RelativeFilename || videoNode.Filename;\n\n\t\t\t\t\t// raw image data is in videoNode.Content\n\t\t\t\t\tif ( 'Content' in videoNode ) {\n\n\t\t\t\t\t\tvar arrayBufferContent = ( videoNode.Content instanceof ArrayBuffer ) && ( videoNode.Content.byteLength > 0 );\n\t\t\t\t\t\tvar base64Content = ( typeof videoNode.Content === 'string' ) && ( videoNode.Content !== '' );\n\n\t\t\t\t\t\tif ( arrayBufferContent || base64Content ) {\n\n\t\t\t\t\t\t\tvar image = this.parseImage( videoNodes[ nodeID ] );\n\n\t\t\t\t\t\t\tblobs[ videoNode.RelativeFilename || videoNode.Filename ] = image;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tfor ( var id in images ) {\n\n\t\t\t\tvar filename = images[ id ];\n\n\t\t\t\tif ( blobs[ filename ] !== undefined ) images[ id ] = blobs[ filename ];\n\t\t\t\telse images[ id ] = images[ id ].split( '\\\\' ).pop();\n\n\t\t\t}\n\n\t\t\treturn images;\n\n\t\t},\n\n\t\t// Parse embedded image data in FBXTree.Video.Content\n\t\tparseImage: function ( videoNode ) {\n\n\t\t\tvar content = videoNode.Content;\n\t\t\tvar fileName = videoNode.RelativeFilename || videoNode.Filename;\n\t\t\tvar extension = fileName.slice( fileName.lastIndexOf( '.' ) + 1 ).toLowerCase();\n\n\t\t\tvar type;\n\n\t\t\tswitch ( extension ) {\n\n\t\t\t\tcase 'bmp':\n\n\t\t\t\t\ttype = 'image/bmp';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'jpg':\n\t\t\t\tcase 'jpeg':\n\n\t\t\t\t\ttype = 'image/jpeg';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'png':\n\n\t\t\t\t\ttype = 'image/png';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'tif':\n\n\t\t\t\t\ttype = 'image/tiff';\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'tga':\n\n\t\t\t\t\tif ( typeof THREE.TGALoader !== 'function' ) {\n\n\t\t\t\t\t\tconsole.warn( 'FBXLoader: THREE.TGALoader is required to load TGA textures' );\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( THREE.Loader.Handlers.get( '.tga' ) === null ) {\n\n\t\t\t\t\t\t\tTHREE.Loader.Handlers.add( /\\.tga$/i, new THREE.TGALoader() );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttype = 'image/tga';\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\tdefault:\n\n\t\t\t\t\tconsole.warn( 'FBXLoader: Image type \"' + extension + '\" is not supported.' );\n\t\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\tif ( typeof content === 'string' ) { // ASCII format\n\n\t\t\t\treturn 'data:' + type + ';base64,' + content;\n\n\t\t\t} else { // Binary Format\n\n\t\t\t\tvar array = new Uint8Array( content );\n\t\t\t\treturn window.URL.createObjectURL( new Blob( [ array ], { type: type } ) );\n\n\t\t\t}\n\n\t\t},\n\n\t\t// Parse nodes in FBXTree.Objects.Texture\n\t\t// These contain details such as UV scaling, cropping, rotation etc and are connected\n\t\t// to images in FBXTree.Objects.Video\n\t\tparseTextures: function ( images ) {\n\n\t\t\tvar textureMap = new Map();\n\n\t\t\tif ( 'Texture' in fbxTree.Objects ) {\n\n\t\t\t\tvar textureNodes = fbxTree.Objects.Texture;\n\t\t\t\tfor ( var nodeID in textureNodes ) {\n\n\t\t\t\t\tvar texture = this.parseTexture( textureNodes[ nodeID ], images );\n\t\t\t\t\ttextureMap.set( parseInt( nodeID ), texture );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn textureMap;\n\n\t\t},\n\n\t\t// Parse individual node in FBXTree.Objects.Texture\n\t\tparseTexture: function ( textureNode, images ) {\n\n\t\t\tvar texture = this.loadTexture( textureNode, images );\n\n\t\t\ttexture.ID = textureNode.id;\n\n\t\t\ttexture.name = textureNode.attrName;\n\n\t\t\tvar wrapModeU = textureNode.WrapModeU;\n\t\t\tvar wrapModeV = textureNode.WrapModeV;\n\n\t\t\tvar valueU = wrapModeU !== undefined ? wrapModeU.value : 0;\n\t\t\tvar valueV = wrapModeV !== undefined ? wrapModeV.value : 0;\n\n\t\t\t// http://download.autodesk.com/us/fbx/SDKdocs/FBX_SDK_Help/files/fbxsdkref/class_k_fbx_texture.html#889640e63e2e681259ea81061b85143a\n\t\t\t// 0: repeat(default), 1: clamp\n\n\t\t\ttexture.wrapS = valueU === 0 ? THREE.RepeatWrapping : THREE.ClampToEdgeWrapping;\n\t\t\ttexture.wrapT = valueV === 0 ? THREE.RepeatWrapping : THREE.ClampToEdgeWrapping;\n\n\t\t\tif ( 'Scaling' in textureNode ) {\n\n\t\t\t\tvar values = textureNode.Scaling.value;\n\n\t\t\t\ttexture.repeat.x = values[ 0 ];\n\t\t\t\ttexture.repeat.y = values[ 1 ];\n\n\t\t\t}\n\n\t\t\treturn texture;\n\n\t\t},\n\n\t\t// load a texture specified as a blob or data URI, or via an external URL using THREE.TextureLoader\n\t\tloadTexture: function ( textureNode, images ) {\n\n\t\t\tvar fileName;\n\n\t\t\tvar currentPath = this.textureLoader.path;\n\n\t\t\tvar children = connections.get( textureNode.id ).children;\n\n\t\t\tif ( children !== undefined && children.length > 0 && images[ children[ 0 ].ID ] !== undefined ) {\n\n\t\t\t\tfileName = images[ children[ 0 ].ID ];\n\n\t\t\t\tif ( fileName.indexOf( 'blob:' ) === 0 || fileName.indexOf( 'data:' ) === 0 ) {\n\n\t\t\t\t\tthis.textureLoader.setPath( undefined );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar texture;\n\n\t\t\tvar extension = textureNode.FileName.slice( - 3 ).toLowerCase();\n\n\t\t\tif ( extension === 'tga' ) {\n\n\t\t\t\tvar loader = THREE.Loader.Handlers.get( '.tga' );\n\n\t\t\t\tif ( loader === null ) {\n\n\t\t\t\t\tconsole.warn( 'FBXLoader: TGALoader not found, creating empty placeholder texture for', fileName );\n\t\t\t\t\ttexture = new THREE.Texture();\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttexture = loader.load( fileName );\n\n\t\t\t\t}\n\n\t\t\t} else if ( extension === 'psd' ) {\n\n\t\t\t\tconsole.warn( 'FBXLoader: PSD textures are not supported, creating empty placeholder texture for', fileName );\n\t\t\t\ttexture = new THREE.Texture();\n\n\t\t\t} else {\n\n\t\t\t\ttexture = this.textureLoader.load( fileName );\n\n\t\t\t}\n\n\t\t\tthis.textureLoader.setPath( currentPath );\n\n\t\t\treturn texture;\n\n\t\t},\n\n\t\t// Parse nodes in FBXTree.Objects.Material\n\t\tparseMaterials: function ( textureMap ) {\n\n\t\t\tvar materialMap = new Map();\n\n\t\t\tif ( 'Material' in fbxTree.Objects ) {\n\n\t\t\t\tvar materialNodes = fbxTree.Objects.Material;\n\n\t\t\t\tfor ( var nodeID in materialNodes ) {\n\n\t\t\t\t\tvar material = this.parseMaterial( materialNodes[ nodeID ], textureMap );\n\n\t\t\t\t\tif ( material !== null ) materialMap.set( parseInt( nodeID ), material );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn materialMap;\n\n\t\t},\n\n\t\t// Parse single node in FBXTree.Objects.Material\n\t\t// Materials are connected to texture maps in FBXTree.Objects.Textures\n\t\t// FBX format currently only supports Lambert and Phong shading models\n\t\tparseMaterial: function ( materialNode, textureMap ) {\n\n\t\t\tvar ID = materialNode.id;\n\t\t\tvar name = materialNode.attrName;\n\t\t\tvar type = materialNode.ShadingModel;\n\n\t\t\t// Case where FBX wraps shading model in property object.\n\t\t\tif ( typeof type === 'object' ) {\n\n\t\t\t\ttype = type.value;\n\n\t\t\t}\n\n\t\t\t// Ignore unused materials which don't have any connections.\n\t\t\tif ( ! connections.has( ID ) ) return null;\n\n\t\t\tvar parameters = this.parseParameters( materialNode, textureMap, ID );\n\n\t\t\tvar material;\n\n\t\t\tswitch ( type.toLowerCase() ) {\n\n\t\t\t\tcase 'phong':\n\t\t\t\t\tmaterial = new THREE.MeshPhongMaterial();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'lambert':\n\t\t\t\t\tmaterial = new THREE.MeshLambertMaterial();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.warn( 'THREE.FBXLoader: unknown material type \"%s\". Defaulting to MeshPhongMaterial.', type );\n\t\t\t\t\tmaterial = new THREE.MeshPhongMaterial( { color: 0x3300ff } );\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tmaterial.setValues( parameters );\n\t\t\tmaterial.name = name;\n\n\t\t\treturn material;\n\n\t\t},\n\n\t\t// Parse FBX material and return parameters suitable for a three.js material\n\t\t// Also parse the texture map and return any textures associated with the material\n\t\tparseParameters: function ( materialNode, textureMap, ID ) {\n\n\t\t\tvar parameters = {};\n\n\t\t\tif ( materialNode.BumpFactor ) {\n\n\t\t\t\tparameters.bumpScale = materialNode.BumpFactor.value;\n\n\t\t\t}\n\t\t\tif ( materialNode.Diffuse ) {\n\n\t\t\t\tparameters.color = new THREE.Color().fromArray( materialNode.Diffuse.value );\n\n\t\t\t} else if ( materialNode.DiffuseColor && materialNode.DiffuseColor.type === 'Color' ) {\n\n\t\t\t\t// The blender exporter exports diffuse here instead of in materialNode.Diffuse\n\t\t\t\tparameters.color = new THREE.Color().fromArray( materialNode.DiffuseColor.value );\n\n\t\t\t}\n\t\t\tif ( materialNode.DisplacementFactor ) {\n\n\t\t\t\tparameters.displacementScale = materialNode.DisplacementFactor.value;\n\n\t\t\t}\n\t\t\tif ( materialNode.Emissive ) {\n\n\t\t\t\tparameters.emissive = new THREE.Color().fromArray( materialNode.Emissive.value );\n\n\t\t\t} else if ( materialNode.EmissiveColor && materialNode.EmissiveColor.type === 'Color' ) {\n\n\t\t\t\t// The blender exporter exports emissive color here instead of in materialNode.Emissive\n\t\t\t\tparameters.emissive = new THREE.Color().fromArray( materialNode.EmissiveColor.value );\n\n\t\t\t}\n\t\t\tif ( materialNode.EmissiveFactor ) {\n\n\t\t\t\tparameters.emissiveIntensity = parseFloat( materialNode.EmissiveFactor.value );\n\n\t\t\t}\n\t\t\tif ( materialNode.Opacity ) {\n\n\t\t\t\tparameters.opacity = parseFloat( materialNode.Opacity.value );\n\n\t\t\t}\n\t\t\tif ( parameters.opacity < 1.0 ) {\n\n\t\t\t\tparameters.transparent = true;\n\n\t\t\t}\n\t\t\tif ( materialNode.ReflectionFactor ) {\n\n\t\t\t\tparameters.reflectivity = materialNode.ReflectionFactor.value;\n\n\t\t\t}\n\t\t\tif ( materialNode.Shininess ) {\n\n\t\t\t\tparameters.shininess = materialNode.Shininess.value;\n\n\t\t\t}\n\t\t\tif ( materialNode.Specular ) {\n\n\t\t\t\tparameters.specular = new THREE.Color().fromArray( materialNode.Specular.value );\n\n\t\t\t} else if ( materialNode.SpecularColor && materialNode.SpecularColor.type === 'Color' ) {\n\n\t\t\t\t// The blender exporter exports specular color here instead of in materialNode.Specular\n\t\t\t\tparameters.specular = new THREE.Color().fromArray( materialNode.SpecularColor.value );\n\n\t\t\t}\n\n\t\t\tvar self = this;\n\t\t\tconnections.get( ID ).children.forEach( function ( child ) {\n\n\t\t\t\tvar type = child.relationship;\n\n\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\tcase 'Bump':\n\t\t\t\t\t\tparameters.bumpMap = self.getTexture( textureMap, child.ID );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'DiffuseColor':\n\t\t\t\t\t\tparameters.map = self.getTexture( textureMap, child.ID );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'DisplacementColor':\n\t\t\t\t\t\tparameters.displacementMap = self.getTexture( textureMap, child.ID );\n\t\t\t\t\t\tbreak;\n\n\n\t\t\t\t\tcase 'EmissiveColor':\n\t\t\t\t\t\tparameters.emissiveMap = self.getTexture( textureMap, child.ID );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'NormalMap':\n\t\t\t\t\t\tparameters.normalMap = self.getTexture( textureMap, child.ID );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'ReflectionColor':\n\t\t\t\t\t\tparameters.envMap = self.getTexture( textureMap, child.ID );\n\t\t\t\t\t\tparameters.envMap.mapping = THREE.EquirectangularReflectionMapping;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'SpecularColor':\n\t\t\t\t\t\tparameters.specularMap = self.getTexture( textureMap, child.ID );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'TransparentColor':\n\t\t\t\t\t\tparameters.alphaMap = self.getTexture( textureMap, child.ID );\n\t\t\t\t\t\tparameters.transparent = true;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'AmbientColor':\n\t\t\t\t\tcase 'ShininessExponent': // AKA glossiness map\n\t\t\t\t\tcase 'SpecularFactor': // AKA specularLevel\n\t\t\t\t\tcase 'VectorDisplacementColor': // NOTE: Seems to be a copy of DisplacementColor\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.warn( 'THREE.FBXLoader: %s map is not supported in three.js, skipping texture.', type );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\treturn parameters;\n\n\t\t},\n\n\t\t// get a texture from the textureMap for use by a material.\n\t\tgetTexture: function ( textureMap, id ) {\n\n\t\t\t// if the texture is a layered texture, just use the first layer and issue a warning\n\t\t\tif ( 'LayeredTexture' in fbxTree.Objects && id in fbxTree.Objects.LayeredTexture ) {\n\n\t\t\t\tconsole.warn( 'THREE.FBXLoader: layered textures are not supported in three.js. Discarding all but first layer.' );\n\t\t\t\tid = connections.get( id ).children[ 0 ].ID;\n\n\t\t\t}\n\n\t\t\treturn textureMap.get( id );\n\n\t\t},\n\n\t\t// Parse nodes in FBXTree.Objects.Deformer\n\t\t// Deformer node can contain skinning or Vertex Cache animation data, however only skinning is supported here\n\t\t// Generates map of Skeleton-like objects for use later when generating and binding skeletons.\n\t\tparseDeformers: function () {\n\n\t\t\tvar skeletons = {};\n\t\t\tvar morphTargets = {};\n\n\t\t\tif ( 'Deformer' in fbxTree.Objects ) {\n\n\t\t\t\tvar DeformerNodes = fbxTree.Objects.Deformer;\n\n\t\t\t\tfor ( var nodeID in DeformerNodes ) {\n\n\t\t\t\t\tvar deformerNode = DeformerNodes[ nodeID ];\n\n\t\t\t\t\tvar relationships = connections.get( parseInt( nodeID ) );\n\n\t\t\t\t\tif ( deformerNode.attrType === 'Skin' ) {\n\n\t\t\t\t\t\tvar skeleton = this.parseSkeleton( relationships, DeformerNodes );\n\t\t\t\t\t\tskeleton.ID = nodeID;\n\n\t\t\t\t\t\tif ( relationships.parents.length > 1 ) console.warn( 'THREE.FBXLoader: skeleton attached to more than one geometry is not supported.' );\n\t\t\t\t\t\tskeleton.geometryID = relationships.parents[ 0 ].ID;\n\n\t\t\t\t\t\tskeletons[ nodeID ] = skeleton;\n\n\t\t\t\t\t} else if ( deformerNode.attrType === 'BlendShape' ) {\n\n\t\t\t\t\t\tvar morphTarget = {\n\t\t\t\t\t\t\tid: nodeID,\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tmorphTarget.rawTargets = this.parseMorphTargets( relationships, DeformerNodes );\n\t\t\t\t\t\tmorphTarget.id = nodeID;\n\n\t\t\t\t\t\tif ( relationships.parents.length > 1 ) console.warn( 'THREE.FBXLoader: morph target attached to more than one geometry is not supported.' );\n\n\t\t\t\t\t\tmorphTargets[ nodeID ] = morphTarget;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn {\n\n\t\t\t\tskeletons: skeletons,\n\t\t\t\tmorphTargets: morphTargets,\n\n\t\t\t};\n\n\t\t},\n\n\t\t// Parse single nodes in FBXTree.Objects.Deformer\n\t\t// The top level skeleton node has type 'Skin' and sub nodes have type 'Cluster'\n\t\t// Each skin node represents a skeleton and each cluster node represents a bone\n\t\tparseSkeleton: function ( relationships, deformerNodes ) {\n\n\t\t\tvar rawBones = [];\n\n\t\t\trelationships.children.forEach( function ( child ) {\n\n\t\t\t\tvar boneNode = deformerNodes[ child.ID ];\n\n\t\t\t\tif ( boneNode.attrType !== 'Cluster' ) return;\n\n\t\t\t\tvar rawBone = {\n\n\t\t\t\t\tID: child.ID,\n\t\t\t\t\tindices: [],\n\t\t\t\t\tweights: [],\n\t\t\t\t\ttransform: new THREE.Matrix4().fromArray( boneNode.Transform.a ),\n\t\t\t\t\ttransformLink: new THREE.Matrix4().fromArray( boneNode.TransformLink.a ),\n\t\t\t\t\tlinkMode: boneNode.Mode,\n\n\t\t\t\t};\n\n\t\t\t\tif ( 'Indexes' in boneNode ) {\n\n\t\t\t\t\trawBone.indices = boneNode.Indexes.a;\n\t\t\t\t\trawBone.weights = boneNode.Weights.a;\n\n\t\t\t\t}\n\n\t\t\t\trawBones.push( rawBone );\n\n\t\t\t} );\n\n\t\t\treturn {\n\n\t\t\t\trawBones: rawBones,\n\t\t\t\tbones: []\n\n\t\t\t};\n\n\t\t},\n\n\t\t// The top level morph deformer node has type \"BlendShape\" and sub nodes have type \"BlendShapeChannel\"\n\t\tparseMorphTargets: function ( relationships, deformerNodes ) {\n\n\t\t\tvar rawMorphTargets = [];\n\n\t\t\tfor ( var i = 0; i < relationships.children.length; i ++ ) {\n\n\t\t\t\tif ( i === 8 ) {\n\n\t\t\t\t\tconsole.warn( 'FBXLoader: maximum of 8 morph targets supported. Ignoring additional targets.' );\n\n\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tvar child = relationships.children[ i ];\n\n\t\t\t\tvar morphTargetNode = deformerNodes[ child.ID ];\n\n\t\t\t\tvar rawMorphTarget = {\n\n\t\t\t\t\tname: morphTargetNode.attrName,\n\t\t\t\t\tinitialWeight: morphTargetNode.DeformPercent,\n\t\t\t\t\tid: morphTargetNode.id,\n\t\t\t\t\tfullWeights: morphTargetNode.FullWeights.a\n\n\t\t\t\t};\n\n\t\t\t\tif ( morphTargetNode.attrType !== 'BlendShapeChannel' ) return;\n\n\t\t\t\tvar targetRelationships = connections.get( parseInt( child.ID ) );\n\n\t\t\t\ttargetRelationships.children.forEach( function ( child ) {\n\n\t\t\t\t\tif ( child.relationship === undefined ) rawMorphTarget.geoID = child.ID;\n\n\t\t\t\t} );\n\n\t\t\t\trawMorphTargets.push( rawMorphTarget );\n\n\t\t\t}\n\n\t\t\treturn rawMorphTargets;\n\n\t\t},\n\n\t\t// create the main THREE.Group() to be returned by the loader\n\t\tparseScene: function ( deformers, geometryMap, materialMap ) {\n\n\t\t\tsceneGraph = new THREE.Group();\n\n\t\t\tvar modelMap = this.parseModels( deformers.skeletons, geometryMap, materialMap );\n\n\t\t\tvar modelNodes = fbxTree.Objects.Model;\n\n\t\t\tvar self = this;\n\t\t\tmodelMap.forEach( function ( model ) {\n\n\t\t\t\tvar modelNode = modelNodes[ model.ID ];\n\t\t\t\tself.setLookAtProperties( model, modelNode );\n\n\t\t\t\tvar parentConnections = connections.get( model.ID ).parents;\n\n\t\t\t\tparentConnections.forEach( function ( connection ) {\n\n\t\t\t\t\tvar parent = modelMap.get( connection.ID );\n\t\t\t\t\tif ( parent !== undefined ) parent.add( model );\n\n\t\t\t\t} );\n\n\t\t\t\tif ( model.parent === null ) {\n\n\t\t\t\t\tsceneGraph.add( model );\n\n\t\t\t\t}\n\n\n\t\t\t} );\n\n\t\t\tthis.bindSkeleton( deformers.skeletons, geometryMap, modelMap );\n\n\t\t\tthis.createAmbientLight();\n\n\t\t\tthis.setupMorphMaterials();\n\n\t\t\tvar animations = new AnimationParser().parse();\n\n\t\t\t// if all the models where already combined in a single group, just return that\n\t\t\tif ( sceneGraph.children.length === 1 && sceneGraph.children[ 0 ].isGroup ) {\n\n\t\t\t\tsceneGraph.children[ 0 ].animations = animations;\n\t\t\t\tsceneGraph = sceneGraph.children[ 0 ];\n\n\t\t\t}\n\n\t\t\tsceneGraph.animations = animations;\n\n\t\t},\n\n\t\t// parse nodes in FBXTree.Objects.Model\n\t\tparseModels: function ( skeletons, geometryMap, materialMap ) {\n\n\t\t\tvar modelMap = new Map();\n\t\t\tvar modelNodes = fbxTree.Objects.Model;\n\n\t\t\tfor ( var nodeID in modelNodes ) {\n\n\t\t\t\tvar id = parseInt( nodeID );\n\t\t\t\tvar node = modelNodes[ nodeID ];\n\t\t\t\tvar relationships = connections.get( id );\n\n\t\t\t\tvar model = this.buildSkeleton( relationships, skeletons, id, node.attrName );\n\n\t\t\t\tif ( ! model ) {\n\n\t\t\t\t\tswitch ( node.attrType ) {\n\n\t\t\t\t\t\tcase 'Camera':\n\t\t\t\t\t\t\tmodel = this.createCamera( relationships );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'Light':\n\t\t\t\t\t\t\tmodel = this.createLight( relationships );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'Mesh':\n\t\t\t\t\t\t\tmodel = this.createMesh( relationships, geometryMap, materialMap );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'NurbsCurve':\n\t\t\t\t\t\t\tmodel = this.createCurve( relationships, geometryMap );\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'LimbNode': // usually associated with a Bone, however if a Bone was not created we'll make a Group instead\n\t\t\t\t\t\tcase 'Null':\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tmodel = new THREE.Group();\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmodel.name = THREE.PropertyBinding.sanitizeNodeName( node.attrName );\n\t\t\t\t\tmodel.ID = id;\n\n\t\t\t\t}\n\n\t\t\t\tthis.setModelTransforms( model, node );\n\t\t\t\tmodelMap.set( id, model );\n\n\t\t\t}\n\n\t\t\treturn modelMap;\n\n\t\t},\n\n\t\tbuildSkeleton: function ( relationships, skeletons, id, name ) {\n\n\t\t\tvar bone = null;\n\n\t\t\trelationships.parents.forEach( function ( parent ) {\n\n\t\t\t\tfor ( var ID in skeletons ) {\n\n\t\t\t\t\tvar skeleton = skeletons[ ID ];\n\n\t\t\t\t\tskeleton.rawBones.forEach( function ( rawBone, i ) {\n\n\t\t\t\t\t\tif ( rawBone.ID === parent.ID ) {\n\n\t\t\t\t\t\t\tvar subBone = bone;\n\t\t\t\t\t\t\tbone = new THREE.Bone();\n\t\t\t\t\t\t\tbone.matrixWorld.copy( rawBone.transformLink );\n\n\t\t\t\t\t\t\t// set name and id here - otherwise in cases where \"subBone\" is created it will not have a name / id\n\t\t\t\t\t\t\tbone.name = THREE.PropertyBinding.sanitizeNodeName( name );\n\t\t\t\t\t\t\tbone.ID = id;\n\n\t\t\t\t\t\t\tskeleton.bones[ i ] = bone;\n\n\t\t\t\t\t\t\t// In cases where a bone is shared between multiple meshes\n\t\t\t\t\t\t\t// duplicate the bone here and and it as a child of the first bone\n\t\t\t\t\t\t\tif ( subBone !== null ) {\n\n\t\t\t\t\t\t\t\tbone.add( subBone );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\treturn bone;\n\n\t\t},\n\n\t\t// create a THREE.PerspectiveCamera or THREE.OrthographicCamera\n\t\tcreateCamera: function ( relationships ) {\n\n\t\t\tvar model;\n\t\t\tvar cameraAttribute;\n\n\t\t\trelationships.children.forEach( function ( child ) {\n\n\t\t\t\tvar attr = fbxTree.Objects.NodeAttribute[ child.ID ];\n\n\t\t\t\tif ( attr !== undefined ) {\n\n\t\t\t\t\tcameraAttribute = attr;\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\tif ( cameraAttribute === undefined ) {\n\n\t\t\t\tmodel = new THREE.Object3D();\n\n\t\t\t} else {\n\n\t\t\t\tvar type = 0;\n\t\t\t\tif ( cameraAttribute.CameraProjectionType !== undefined && cameraAttribute.CameraProjectionType.value === 1 ) {\n\n\t\t\t\t\ttype = 1;\n\n\t\t\t\t}\n\n\t\t\t\tvar nearClippingPlane = 1;\n\t\t\t\tif ( cameraAttribute.NearPlane !== undefined ) {\n\n\t\t\t\t\tnearClippingPlane = cameraAttribute.NearPlane.value / 1000;\n\n\t\t\t\t}\n\n\t\t\t\tvar farClippingPlane = 1000;\n\t\t\t\tif ( cameraAttribute.FarPlane !== undefined ) {\n\n\t\t\t\t\tfarClippingPlane = cameraAttribute.FarPlane.value / 1000;\n\n\t\t\t\t}\n\n\n\t\t\t\tvar width = window.innerWidth;\n\t\t\t\tvar height = window.innerHeight;\n\n\t\t\t\tif ( cameraAttribute.AspectWidth !== undefined && cameraAttribute.AspectHeight !== undefined ) {\n\n\t\t\t\t\twidth = cameraAttribute.AspectWidth.value;\n\t\t\t\t\theight = cameraAttribute.AspectHeight.value;\n\n\t\t\t\t}\n\n\t\t\t\tvar aspect = width / height;\n\n\t\t\t\tvar fov = 45;\n\t\t\t\tif ( cameraAttribute.FieldOfView !== undefined ) {\n\n\t\t\t\t\tfov = cameraAttribute.FieldOfView.value;\n\n\t\t\t\t}\n\n\t\t\t\tvar focalLength = cameraAttribute.FocalLength ? cameraAttribute.FocalLength.value : null;\n\n\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\tcase 0: // Perspective\n\t\t\t\t\t\tmodel = new THREE.PerspectiveCamera( fov, aspect, nearClippingPlane, farClippingPlane );\n\t\t\t\t\t\tif ( focalLength !== null ) model.setFocalLength( focalLength );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 1: // Orthographic\n\t\t\t\t\t\tmodel = new THREE.OrthographicCamera( - width / 2, width / 2, height / 2, - height / 2, nearClippingPlane, farClippingPlane );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.warn( 'THREE.FBXLoader: Unknown camera type ' + type + '.' );\n\t\t\t\t\t\tmodel = new THREE.Object3D();\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn model;\n\n\t\t},\n\n\t\t// Create a THREE.DirectionalLight, THREE.PointLight or THREE.SpotLight\n\t\tcreateLight: function ( relationships ) {\n\n\t\t\tvar model;\n\t\t\tvar lightAttribute;\n\n\t\t\trelationships.children.forEach( function ( child ) {\n\n\t\t\t\tvar attr = fbxTree.Objects.NodeAttribute[ child.ID ];\n\n\t\t\t\tif ( attr !== undefined ) {\n\n\t\t\t\t\tlightAttribute = attr;\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\tif ( lightAttribute === undefined ) {\n\n\t\t\t\tmodel = new THREE.Object3D();\n\n\t\t\t} else {\n\n\t\t\t\tvar type;\n\n\t\t\t\t// LightType can be undefined for Point lights\n\t\t\t\tif ( lightAttribute.LightType === undefined ) {\n\n\t\t\t\t\ttype = 0;\n\n\t\t\t\t} else {\n\n\t\t\t\t\ttype = lightAttribute.LightType.value;\n\n\t\t\t\t}\n\n\t\t\t\tvar color = 0xffffff;\n\n\t\t\t\tif ( lightAttribute.Color !== undefined ) {\n\n\t\t\t\t\tcolor = new THREE.Color().fromArray( lightAttribute.Color.value );\n\n\t\t\t\t}\n\n\t\t\t\tvar intensity = ( lightAttribute.Intensity === undefined ) ? 1 : lightAttribute.Intensity.value / 100;\n\n\t\t\t\t// light disabled\n\t\t\t\tif ( lightAttribute.CastLightOnObject !== undefined && lightAttribute.CastLightOnObject.value === 0 ) {\n\n\t\t\t\t\tintensity = 0;\n\n\t\t\t\t}\n\n\t\t\t\tvar distance = 0;\n\t\t\t\tif ( lightAttribute.FarAttenuationEnd !== undefined ) {\n\n\t\t\t\t\tif ( lightAttribute.EnableFarAttenuation !== undefined && lightAttribute.EnableFarAttenuation.value === 0 ) {\n\n\t\t\t\t\t\tdistance = 0;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tdistance = lightAttribute.FarAttenuationEnd.value;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// TODO: could this be calculated linearly from FarAttenuationStart to FarAttenuationEnd?\n\t\t\t\tvar decay = 1;\n\n\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\tcase 0: // Point\n\t\t\t\t\t\tmodel = new THREE.PointLight( color, intensity, distance, decay );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 1: // Directional\n\t\t\t\t\t\tmodel = new THREE.DirectionalLight( color, intensity );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 2: // Spot\n\t\t\t\t\t\tvar angle = Math.PI / 3;\n\n\t\t\t\t\t\tif ( lightAttribute.InnerAngle !== undefined ) {\n\n\t\t\t\t\t\t\tangle = THREE.Math.degToRad( lightAttribute.InnerAngle.value );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar penumbra = 0;\n\t\t\t\t\t\tif ( lightAttribute.OuterAngle !== undefined ) {\n\n\t\t\t\t\t\t// TODO: this is not correct - FBX calculates outer and inner angle in degrees\n\t\t\t\t\t\t// with OuterAngle > InnerAngle && OuterAngle <= Math.PI\n\t\t\t\t\t\t// while three.js uses a penumbra between (0, 1) to attenuate the inner angle\n\t\t\t\t\t\t\tpenumbra = THREE.Math.degToRad( lightAttribute.OuterAngle.value );\n\t\t\t\t\t\t\tpenumbra = Math.max( penumbra, 1 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmodel = new THREE.SpotLight( color, intensity, distance, angle, penumbra, decay );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tconsole.warn( 'THREE.FBXLoader: Unknown light type ' + lightAttribute.LightType.value + ', defaulting to a THREE.PointLight.' );\n\t\t\t\t\t\tmodel = new THREE.PointLight( color, intensity );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\tif ( lightAttribute.CastShadows !== undefined && lightAttribute.CastShadows.value === 1 ) {\n\n\t\t\t\t\tmodel.castShadow = true;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn model;\n\n\t\t},\n\n\t\tcreateMesh: function ( relationships, geometryMap, materialMap ) {\n\n\t\t\tvar model;\n\t\t\tvar geometry = null;\n\t\t\tvar material = null;\n\t\t\tvar materials = [];\n\n\t\t\t// get geometry and materials(s) from connections\n\t\t\trelationships.children.forEach( function ( child ) {\n\n\t\t\t\tif ( geometryMap.has( child.ID ) ) {\n\n\t\t\t\t\tgeometry = geometryMap.get( child.ID );\n\n\t\t\t\t}\n\n\t\t\t\tif ( materialMap.has( child.ID ) ) {\n\n\t\t\t\t\tmaterials.push( materialMap.get( child.ID ) );\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\tif ( materials.length > 1 ) {\n\n\t\t\t\tmaterial = materials;\n\n\t\t\t} else if ( materials.length > 0 ) {\n\n\t\t\t\tmaterial = materials[ 0 ];\n\n\t\t\t} else {\n\n\t\t\t\tmaterial = new THREE.MeshPhongMaterial( { color: 0xcccccc } );\n\t\t\t\tmaterials.push( material );\n\n\t\t\t}\n\n\t\t\tif ( 'color' in geometry.attributes ) {\n\n\t\t\t\tmaterials.forEach( function ( material ) {\n\n\t\t\t\t\tmaterial.vertexColors = THREE.VertexColors;\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tif ( geometry.FBX_Deformer ) {\n\n\t\t\t\tmaterials.forEach( function ( material ) {\n\n\t\t\t\t\tmaterial.skinning = true;\n\n\t\t\t\t} );\n\n\t\t\t\tmodel = new THREE.SkinnedMesh( geometry, material );\n\n\t\t\t} else {\n\n\t\t\t\tmodel = new THREE.Mesh( geometry, material );\n\n\t\t\t}\n\n\t\t\treturn model;\n\n\t\t},\n\n\t\tcreateCurve: function ( relationships, geometryMap ) {\n\n\t\t\tvar geometry = relationships.children.reduce( function ( geo, child ) {\n\n\t\t\t\tif ( geometryMap.has( child.ID ) ) geo = geometryMap.get( child.ID );\n\n\t\t\t\treturn geo;\n\n\t\t\t}, null );\n\n\t\t\t// FBX does not list materials for Nurbs lines, so we'll just put our own in here.\n\t\t\tvar material = new THREE.LineBasicMaterial( { color: 0x3300ff, linewidth: 1 } );\n\t\t\treturn new THREE.Line( geometry, material );\n\n\t\t},\n\n\t\t// parse the model node for transform details and apply them to the model\n\t\tsetModelTransforms: function ( model, modelNode ) {\n\n\t\t\tvar transformData = {};\n\n\t\t\tif ( 'RotationOrder' in modelNode ) transformData.eulerOrder = parseInt( modelNode.RotationOrder.value );\n\t\t\tif ( 'Lcl_Translation' in modelNode ) transformData.translation = modelNode.Lcl_Translation.value;\n\t\t\tif ( 'RotationOffset' in modelNode ) transformData.rotationOffset = modelNode.RotationOffset.value;\n\t\t\tif ( 'Lcl_Rotation' in modelNode ) transformData.rotation = modelNode.Lcl_Rotation.value;\n\t\t\tif ( 'PreRotation' in modelNode ) transformData.preRotation = modelNode.PreRotation.value;\n\t\t\tif ( 'PostRotation' in modelNode ) transformData.postRotation = modelNode.PostRotation.value;\n\t\t\tif ( 'Lcl_Scaling' in modelNode ) transformData.scale = modelNode.Lcl_Scaling.value;\n\n\t\t\tvar transform = generateTransform( transformData );\n\n\t\t\tmodel.applyMatrix( transform );\n\n\t\t},\n\n\t\tsetLookAtProperties: function ( model, modelNode ) {\n\n\t\t\tif ( 'LookAtProperty' in modelNode ) {\n\n\t\t\t\tvar children = connections.get( model.ID ).children;\n\n\t\t\t\tchildren.forEach( function ( child ) {\n\n\t\t\t\t\tif ( child.relationship === 'LookAtProperty' ) {\n\n\t\t\t\t\t\tvar lookAtTarget = fbxTree.Objects.Model[ child.ID ];\n\n\t\t\t\t\t\tif ( 'Lcl_Translation' in lookAtTarget ) {\n\n\t\t\t\t\t\t\tvar pos = lookAtTarget.Lcl_Translation.value;\n\n\t\t\t\t\t\t\t// DirectionalLight, SpotLight\n\t\t\t\t\t\t\tif ( model.target !== undefined ) {\n\n\t\t\t\t\t\t\t\tmodel.target.position.fromArray( pos );\n\t\t\t\t\t\t\t\tsceneGraph.add( model.target );\n\n\t\t\t\t\t\t\t} else { // Cameras and other Object3Ds\n\n\t\t\t\t\t\t\t\tmodel.lookAt( new THREE.Vector3().fromArray( pos ) );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t},\n\n\t\tbindSkeleton: function ( skeletons, geometryMap, modelMap ) {\n\n\t\t\tvar bindMatrices = this.parsePoseNodes();\n\n\t\t\tfor ( var ID in skeletons ) {\n\n\t\t\t\tvar skeleton = skeletons[ ID ];\n\n\t\t\t\tvar parents = connections.get( parseInt( skeleton.ID ) ).parents;\n\n\t\t\t\tparents.forEach( function ( parent ) {\n\n\t\t\t\t\tif ( geometryMap.has( parent.ID ) ) {\n\n\t\t\t\t\t\tvar geoID = parent.ID;\n\t\t\t\t\t\tvar geoRelationships = connections.get( geoID );\n\n\t\t\t\t\t\tgeoRelationships.parents.forEach( function ( geoConnParent ) {\n\n\t\t\t\t\t\t\tif ( modelMap.has( geoConnParent.ID ) ) {\n\n\t\t\t\t\t\t\t\tvar model = modelMap.get( geoConnParent.ID );\n\n\t\t\t\t\t\t\t\tmodel.bind( new THREE.Skeleton( skeleton.bones ), bindMatrices[ geoConnParent.ID ] );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t},\n\n\t\tparsePoseNodes: function () {\n\n\t\t\tvar bindMatrices = {};\n\n\t\t\tif ( 'Pose' in fbxTree.Objects ) {\n\n\t\t\t\tvar BindPoseNode = fbxTree.Objects.Pose;\n\n\t\t\t\tfor ( var nodeID in BindPoseNode ) {\n\n\t\t\t\t\tif ( BindPoseNode[ nodeID ].attrType === 'BindPose' ) {\n\n\t\t\t\t\t\tvar poseNodes = BindPoseNode[ nodeID ].PoseNode;\n\n\t\t\t\t\t\tif ( Array.isArray( poseNodes ) ) {\n\n\t\t\t\t\t\t\tposeNodes.forEach( function ( poseNode ) {\n\n\t\t\t\t\t\t\t\tbindMatrices[ poseNode.Node ] = new THREE.Matrix4().fromArray( poseNode.Matrix.a );\n\n\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tbindMatrices[ poseNodes.Node ] = new THREE.Matrix4().fromArray( poseNodes.Matrix.a );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn bindMatrices;\n\n\t\t},\n\n\t\t// Parse ambient color in FBXTree.GlobalSettings - if it's not set to black (default), create an ambient light\n\t\tcreateAmbientLight: function () {\n\n\t\t\tif ( 'GlobalSettings' in fbxTree && 'AmbientColor' in fbxTree.GlobalSettings ) {\n\n\t\t\t\tvar ambientColor = fbxTree.GlobalSettings.AmbientColor.value;\n\t\t\t\tvar r = ambientColor[ 0 ];\n\t\t\t\tvar g = ambientColor[ 1 ];\n\t\t\t\tvar b = ambientColor[ 2 ];\n\n\t\t\t\tif ( r !== 0 || g !== 0 || b !== 0 ) {\n\n\t\t\t\t\tvar color = new THREE.Color( r, g, b );\n\t\t\t\t\tsceneGraph.add( new THREE.AmbientLight( color, 1 ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tsetupMorphMaterials: function () {\n\n\t\t\tsceneGraph.traverse( function ( child ) {\n\n\t\t\t\tif ( child.isMesh ) {\n\n\t\t\t\t\tif ( child.geometry.morphAttributes.position || child.geometry.morphAttributes.normal ) {\n\n\t\t\t\t\t\tvar uuid = child.uuid;\n\t\t\t\t\t\tvar matUuid = child.material.uuid;\n\n\t\t\t\t\t\t// if a geometry has morph targets, it cannot share the material with other geometries\n\t\t\t\t\t\tvar sharedMat = false;\n\n\t\t\t\t\t\tsceneGraph.traverse( function ( child ) {\n\n\t\t\t\t\t\t\tif ( child.isMesh ) {\n\n\t\t\t\t\t\t\t\tif ( child.material.uuid === matUuid && child.uuid !== uuid ) sharedMat = true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t\tif ( sharedMat === true ) child.material = child.material.clone();\n\n\t\t\t\t\t\tchild.material.morphTargets = true;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t},\n\n\t};\n\n\t// parse Geometry data from FBXTree and return map of BufferGeometries\n\tfunction GeometryParser() {}\n\n\tGeometryParser.prototype = {\n\n\t\tconstructor: GeometryParser,\n\n\t\t// Parse nodes in FBXTree.Objects.Geometry\n\t\tparse: function ( deformers ) {\n\n\t\t\tvar geometryMap = new Map();\n\n\t\t\tif ( 'Geometry' in fbxTree.Objects ) {\n\n\t\t\t\tvar geoNodes = fbxTree.Objects.Geometry;\n\n\t\t\t\tfor ( var nodeID in geoNodes ) {\n\n\t\t\t\t\tvar relationships = connections.get( parseInt( nodeID ) );\n\t\t\t\t\tvar geo = this.parseGeometry( relationships, geoNodes[ nodeID ], deformers );\n\n\t\t\t\t\tgeometryMap.set( parseInt( nodeID ), geo );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn geometryMap;\n\n\t\t},\n\n\t\t// Parse single node in FBXTree.Objects.Geometry\n\t\tparseGeometry: function ( relationships, geoNode, deformers ) {\n\n\t\t\tswitch ( geoNode.attrType ) {\n\n\t\t\t\tcase 'Mesh':\n\t\t\t\t\treturn this.parseMeshGeometry( relationships, geoNode, deformers );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'NurbsCurve':\n\t\t\t\t\treturn this.parseNurbsGeometry( geoNode );\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t},\n\n\t\t// Parse single node mesh geometry in FBXTree.Objects.Geometry\n\t\tparseMeshGeometry: function ( relationships, geoNode, deformers ) {\n\n\t\t\tvar skeletons = deformers.skeletons;\n\t\t\tvar morphTargets = deformers.morphTargets;\n\n\t\t\tvar modelNodes = relationships.parents.map( function ( parent ) {\n\n\t\t\t\treturn fbxTree.Objects.Model[ parent.ID ];\n\n\t\t\t} );\n\n\t\t\t// don't create geometry if it is not associated with any models\n\t\t\tif ( modelNodes.length === 0 ) return;\n\n\t\t\tvar skeleton = relationships.children.reduce( function ( skeleton, child ) {\n\n\t\t\t\tif ( skeletons[ child.ID ] !== undefined ) skeleton = skeletons[ child.ID ];\n\n\t\t\t\treturn skeleton;\n\n\t\t\t}, null );\n\n\t\t\tvar morphTarget = relationships.children.reduce( function ( morphTarget, child ) {\n\n\t\t\t\tif ( morphTargets[ child.ID ] !== undefined ) morphTarget = morphTargets[ child.ID ];\n\n\t\t\t\treturn morphTarget;\n\n\t\t\t}, null );\n\n\t\t\t// TODO: if there is more than one model associated with the geometry, AND the models have\n\t\t\t// different geometric transforms, then this will cause problems\n\t\t\t// if ( modelNodes.length > 1 ) { }\n\n\t\t\t// For now just assume one model and get the preRotations from that\n\t\t\tvar modelNode = modelNodes[ 0 ];\n\n\t\t\tvar transformData = {};\n\n\t\t\tif ( 'RotationOrder' in modelNode ) transformData.eulerOrder = modelNode.RotationOrder.value;\n\t\t\tif ( 'GeometricTranslation' in modelNode ) transformData.translation = modelNode.GeometricTranslation.value;\n\t\t\tif ( 'GeometricRotation' in modelNode ) transformData.rotation = modelNode.GeometricRotation.value;\n\t\t\tif ( 'GeometricScaling' in modelNode ) transformData.scale = modelNode.GeometricScaling.value;\n\n\t\t\tvar transform = generateTransform( transformData );\n\n\t\t\treturn this.genGeometry( geoNode, skeleton, morphTarget, transform );\n\n\t\t},\n\n\t\t// Generate a THREE.BufferGeometry from a node in FBXTree.Objects.Geometry\n\t\tgenGeometry: function ( geoNode, skeleton, morphTarget, preTransform ) {\n\n\t\t\tvar geo = new THREE.BufferGeometry();\n\t\t\tif ( geoNode.attrName ) geo.name = geoNode.attrName;\n\n\t\t\tvar geoInfo = this.parseGeoNode( geoNode, skeleton );\n\t\t\tvar buffers = this.genBuffers( geoInfo );\n\n\t\t\tvar positionAttribute = new THREE.Float32BufferAttribute( buffers.vertex, 3 );\n\n\t\t\tpreTransform.applyToBufferAttribute( positionAttribute );\n\n\t\t\tgeo.addAttribute( 'position', positionAttribute );\n\n\t\t\tif ( buffers.colors.length > 0 ) {\n\n\t\t\t\tgeo.addAttribute( 'color', new THREE.Float32BufferAttribute( buffers.colors, 3 ) );\n\n\t\t\t}\n\n\t\t\tif ( skeleton ) {\n\n\t\t\t\tgeo.addAttribute( 'skinIndex', new THREE.Uint16BufferAttribute( buffers.weightsIndices, 4 ) );\n\n\t\t\t\tgeo.addAttribute( 'skinWeight', new THREE.Float32BufferAttribute( buffers.vertexWeights, 4 ) );\n\n\t\t\t\t// used later to bind the skeleton to the model\n\t\t\t\tgeo.FBX_Deformer = skeleton;\n\n\t\t\t}\n\n\t\t\tif ( buffers.normal.length > 0 ) {\n\n\t\t\t\tvar normalAttribute = new THREE.Float32BufferAttribute( buffers.normal, 3 );\n\n\t\t\t\tvar normalMatrix = new THREE.Matrix3().getNormalMatrix( preTransform );\n\t\t\t\tnormalMatrix.applyToBufferAttribute( normalAttribute );\n\n\t\t\t\tgeo.addAttribute( 'normal', normalAttribute );\n\n\t\t\t}\n\n\t\t\tbuffers.uvs.forEach( function ( uvBuffer, i ) {\n\n\t\t\t\t// subsequent uv buffers are called 'uv1', 'uv2', ...\n\t\t\t\tvar name = 'uv' + ( i + 1 ).toString();\n\n\t\t\t\t// the first uv buffer is just called 'uv'\n\t\t\t\tif ( i === 0 ) {\n\n\t\t\t\t\tname = 'uv';\n\n\t\t\t\t}\n\n\t\t\t\tgeo.addAttribute( name, new THREE.Float32BufferAttribute( buffers.uvs[ i ], 2 ) );\n\n\t\t\t} );\n\n\t\t\tif ( geoInfo.material && geoInfo.material.mappingType !== 'AllSame' ) {\n\n\t\t\t\t// Convert the material indices of each vertex into rendering groups on the geometry.\n\t\t\t\tvar prevMaterialIndex = buffers.materialIndex[ 0 ];\n\t\t\t\tvar startIndex = 0;\n\n\t\t\t\tbuffers.materialIndex.forEach( function ( currentIndex, i ) {\n\n\t\t\t\t\tif ( currentIndex !== prevMaterialIndex ) {\n\n\t\t\t\t\t\tgeo.addGroup( startIndex, i - startIndex, prevMaterialIndex );\n\n\t\t\t\t\t\tprevMaterialIndex = currentIndex;\n\t\t\t\t\t\tstartIndex = i;\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\n\t\t\t\t// the loop above doesn't add the last group, do that here.\n\t\t\t\tif ( geo.groups.length > 0 ) {\n\n\t\t\t\t\tvar lastGroup = geo.groups[ geo.groups.length - 1 ];\n\t\t\t\t\tvar lastIndex = lastGroup.start + lastGroup.count;\n\n\t\t\t\t\tif ( lastIndex !== buffers.materialIndex.length ) {\n\n\t\t\t\t\t\tgeo.addGroup( lastIndex, buffers.materialIndex.length - lastIndex, prevMaterialIndex );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\t// case where there are multiple materials but the whole geometry is only\n\t\t\t\t// using one of them\n\t\t\t\tif ( geo.groups.length === 0 ) {\n\n\t\t\t\t\tgeo.addGroup( 0, buffers.materialIndex.length, buffers.materialIndex[ 0 ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tthis.addMorphTargets( geo, geoNode, morphTarget, preTransform );\n\n\t\t\treturn geo;\n\n\t\t},\n\n\t\tparseGeoNode: function ( geoNode, skeleton ) {\n\n\t\t\tvar geoInfo = {};\n\n\t\t\tgeoInfo.vertexPositions = ( geoNode.Vertices !== undefined ) ? geoNode.Vertices.a : [];\n\t\t\tgeoInfo.vertexIndices = ( geoNode.PolygonVertexIndex !== undefined ) ? geoNode.PolygonVertexIndex.a : [];\n\n\t\t\tif ( geoNode.LayerElementColor ) {\n\n\t\t\t\tgeoInfo.color = this.parseVertexColors( geoNode.LayerElementColor[ 0 ] );\n\n\t\t\t}\n\n\t\t\tif ( geoNode.LayerElementMaterial ) {\n\n\t\t\t\tgeoInfo.material = this.parseMaterialIndices( geoNode.LayerElementMaterial[ 0 ] );\n\n\t\t\t}\n\n\t\t\tif ( geoNode.LayerElementNormal ) {\n\n\t\t\t\tgeoInfo.normal = this.parseNormals( geoNode.LayerElementNormal[ 0 ] );\n\n\t\t\t}\n\n\t\t\tif ( geoNode.LayerElementUV ) {\n\n\t\t\t\tgeoInfo.uv = [];\n\n\t\t\t\tvar i = 0;\n\t\t\t\twhile ( geoNode.LayerElementUV[ i ] ) {\n\n\t\t\t\t\tgeoInfo.uv.push( this.parseUVs( geoNode.LayerElementUV[ i ] ) );\n\t\t\t\t\ti ++;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tgeoInfo.weightTable = {};\n\n\t\t\tif ( skeleton !== null ) {\n\n\t\t\t\tgeoInfo.skeleton = skeleton;\n\n\t\t\t\tskeleton.rawBones.forEach( function ( rawBone, i ) {\n\n\t\t\t\t\t// loop over the bone's vertex indices and weights\n\t\t\t\t\trawBone.indices.forEach( function ( index, j ) {\n\n\t\t\t\t\t\tif ( geoInfo.weightTable[ index ] === undefined ) geoInfo.weightTable[ index ] = [];\n\n\t\t\t\t\t\tgeoInfo.weightTable[ index ].push( {\n\n\t\t\t\t\t\t\tid: i,\n\t\t\t\t\t\t\tweight: rawBone.weights[ j ],\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t} );\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\treturn geoInfo;\n\n\t\t},\n\n\t\tgenBuffers: function ( geoInfo ) {\n\n\t\t\tvar buffers = {\n\t\t\t\tvertex: [],\n\t\t\t\tnormal: [],\n\t\t\t\tcolors: [],\n\t\t\t\tuvs: [],\n\t\t\t\tmaterialIndex: [],\n\t\t\t\tvertexWeights: [],\n\t\t\t\tweightsIndices: [],\n\t\t\t};\n\n\t\t\tvar polygonIndex = 0;\n\t\t\tvar faceLength = 0;\n\t\t\tvar displayedWeightsWarning = false;\n\n\t\t\t// these will hold data for a single face\n\t\t\tvar facePositionIndexes = [];\n\t\t\tvar faceNormals = [];\n\t\t\tvar faceColors = [];\n\t\t\tvar faceUVs = [];\n\t\t\tvar faceWeights = [];\n\t\t\tvar faceWeightIndices = [];\n\n\t\t\tvar self = this;\n\t\t\tgeoInfo.vertexIndices.forEach( function ( vertexIndex, polygonVertexIndex ) {\n\n\t\t\t\tvar endOfFace = false;\n\n\t\t\t\t// Face index and vertex index arrays are combined in a single array\n\t\t\t\t// A cube with quad faces looks like this:\n\t\t\t\t// PolygonVertexIndex: *24 {\n\t\t\t\t//  a: 0, 1, 3, -3, 2, 3, 5, -5, 4, 5, 7, -7, 6, 7, 1, -1, 1, 7, 5, -4, 6, 0, 2, -5\n\t\t\t\t//  }\n\t\t\t\t// Negative numbers mark the end of a face - first face here is 0, 1, 3, -3\n\t\t\t\t// to find index of last vertex bit shift the index: ^ - 1\n\t\t\t\tif ( vertexIndex < 0 ) {\n\n\t\t\t\t\tvertexIndex = vertexIndex ^ - 1; // equivalent to ( x * -1 ) - 1\n\t\t\t\t\tendOfFace = true;\n\n\t\t\t\t}\n\n\t\t\t\tvar weightIndices = [];\n\t\t\t\tvar weights = [];\n\n\t\t\t\tfacePositionIndexes.push( vertexIndex * 3, vertexIndex * 3 + 1, vertexIndex * 3 + 2 );\n\n\t\t\t\tif ( geoInfo.color ) {\n\n\t\t\t\t\tvar data = getData( polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.color );\n\n\t\t\t\t\tfaceColors.push( data[ 0 ], data[ 1 ], data[ 2 ] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( geoInfo.skeleton ) {\n\n\t\t\t\t\tif ( geoInfo.weightTable[ vertexIndex ] !== undefined ) {\n\n\t\t\t\t\t\tgeoInfo.weightTable[ vertexIndex ].forEach( function ( wt ) {\n\n\t\t\t\t\t\t\tweights.push( wt.weight );\n\t\t\t\t\t\t\tweightIndices.push( wt.id );\n\n\t\t\t\t\t\t} );\n\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( weights.length > 4 ) {\n\n\t\t\t\t\t\tif ( ! displayedWeightsWarning ) {\n\n\t\t\t\t\t\t\tconsole.warn( 'THREE.FBXLoader: Vertex has more than 4 skinning weights assigned to vertex. Deleting additional weights.' );\n\t\t\t\t\t\t\tdisplayedWeightsWarning = true;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar wIndex = [ 0, 0, 0, 0 ];\n\t\t\t\t\t\tvar Weight = [ 0, 0, 0, 0 ];\n\n\t\t\t\t\t\tweights.forEach( function ( weight, weightIndex ) {\n\n\t\t\t\t\t\t\tvar currentWeight = weight;\n\t\t\t\t\t\t\tvar currentIndex = weightIndices[ weightIndex ];\n\n\t\t\t\t\t\t\tWeight.forEach( function ( comparedWeight, comparedWeightIndex, comparedWeightArray ) {\n\n\t\t\t\t\t\t\t\tif ( currentWeight > comparedWeight ) {\n\n\t\t\t\t\t\t\t\t\tcomparedWeightArray[ comparedWeightIndex ] = currentWeight;\n\t\t\t\t\t\t\t\t\tcurrentWeight = comparedWeight;\n\n\t\t\t\t\t\t\t\t\tvar tmp = wIndex[ comparedWeightIndex ];\n\t\t\t\t\t\t\t\t\twIndex[ comparedWeightIndex ] = currentIndex;\n\t\t\t\t\t\t\t\t\tcurrentIndex = tmp;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t} );\n\n\t\t\t\t\t\tweightIndices = wIndex;\n\t\t\t\t\t\tweights = Weight;\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// if the weight array is shorter than 4 pad with 0s\n\t\t\t\t\twhile ( weights.length < 4 ) {\n\n\t\t\t\t\t\tweights.push( 0 );\n\t\t\t\t\t\tweightIndices.push( 0 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( var i = 0; i < 4; ++ i ) {\n\n\t\t\t\t\t\tfaceWeights.push( weights[ i ] );\n\t\t\t\t\t\tfaceWeightIndices.push( weightIndices[ i ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( geoInfo.normal ) {\n\n\t\t\t\t\tvar data = getData( polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.normal );\n\n\t\t\t\t\tfaceNormals.push( data[ 0 ], data[ 1 ], data[ 2 ] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( geoInfo.material && geoInfo.material.mappingType !== 'AllSame' ) {\n\n\t\t\t\t\tvar materialIndex = getData( polygonVertexIndex, polygonIndex, vertexIndex, geoInfo.material )[ 0 ];\n\n\t\t\t\t}\n\n\t\t\t\tif ( geoInfo.uv ) {\n\n\t\t\t\t\tgeoInfo.uv.forEach( function ( uv, i ) {\n\n\t\t\t\t\t\tvar data = getData( polygonVertexIndex, polygonIndex, vertexIndex, uv );\n\n\t\t\t\t\t\tif ( faceUVs[ i ] === undefined ) {\n\n\t\t\t\t\t\t\tfaceUVs[ i ] = [];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfaceUVs[ i ].push( data[ 0 ] );\n\t\t\t\t\t\tfaceUVs[ i ].push( data[ 1 ] );\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t\tfaceLength ++;\n\n\t\t\t\tif ( endOfFace ) {\n\n\t\t\t\t\tself.genFace( buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength );\n\n\t\t\t\t\tpolygonIndex ++;\n\t\t\t\t\tfaceLength = 0;\n\n\t\t\t\t\t// reset arrays for the next face\n\t\t\t\t\tfacePositionIndexes = [];\n\t\t\t\t\tfaceNormals = [];\n\t\t\t\t\tfaceColors = [];\n\t\t\t\t\tfaceUVs = [];\n\t\t\t\t\tfaceWeights = [];\n\t\t\t\t\tfaceWeightIndices = [];\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\treturn buffers;\n\n\t\t},\n\n\t\t// Generate data for a single face in a geometry. If the face is a quad then split it into 2 tris\n\t\tgenFace: function ( buffers, geoInfo, facePositionIndexes, materialIndex, faceNormals, faceColors, faceUVs, faceWeights, faceWeightIndices, faceLength ) {\n\n\t\t\tfor ( var i = 2; i < faceLength; i ++ ) {\n\n\t\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ 0 ] ] );\n\t\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ 1 ] ] );\n\t\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ 2 ] ] );\n\n\t\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ ( i - 1 ) * 3 ] ] );\n\t\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ ( i - 1 ) * 3 + 1 ] ] );\n\t\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ ( i - 1 ) * 3 + 2 ] ] );\n\n\t\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ i * 3 ] ] );\n\t\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ i * 3 + 1 ] ] );\n\t\t\t\tbuffers.vertex.push( geoInfo.vertexPositions[ facePositionIndexes[ i * 3 + 2 ] ] );\n\n\t\t\t\tif ( geoInfo.skeleton ) {\n\n\t\t\t\t\tbuffers.vertexWeights.push( faceWeights[ 0 ] );\n\t\t\t\t\tbuffers.vertexWeights.push( faceWeights[ 1 ] );\n\t\t\t\t\tbuffers.vertexWeights.push( faceWeights[ 2 ] );\n\t\t\t\t\tbuffers.vertexWeights.push( faceWeights[ 3 ] );\n\n\t\t\t\t\tbuffers.vertexWeights.push( faceWeights[ ( i - 1 ) * 4 ] );\n\t\t\t\t\tbuffers.vertexWeights.push( faceWeights[ ( i - 1 ) * 4 + 1 ] );\n\t\t\t\t\tbuffers.vertexWeights.push( faceWeights[ ( i - 1 ) * 4 + 2 ] );\n\t\t\t\t\tbuffers.vertexWeights.push( faceWeights[ ( i - 1 ) * 4 + 3 ] );\n\n\t\t\t\t\tbuffers.vertexWeights.push( faceWeights[ i * 4 ] );\n\t\t\t\t\tbuffers.vertexWeights.push( faceWeights[ i * 4 + 1 ] );\n\t\t\t\t\tbuffers.vertexWeights.push( faceWeights[ i * 4 + 2 ] );\n\t\t\t\t\tbuffers.vertexWeights.push( faceWeights[ i * 4 + 3 ] );\n\n\t\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ 0 ] );\n\t\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ 1 ] );\n\t\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ 2 ] );\n\t\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ 3 ] );\n\n\t\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ ( i - 1 ) * 4 ] );\n\t\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ ( i - 1 ) * 4 + 1 ] );\n\t\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ ( i - 1 ) * 4 + 2 ] );\n\t\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ ( i - 1 ) * 4 + 3 ] );\n\n\t\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ i * 4 ] );\n\t\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ i * 4 + 1 ] );\n\t\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ i * 4 + 2 ] );\n\t\t\t\t\tbuffers.weightsIndices.push( faceWeightIndices[ i * 4 + 3 ] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( geoInfo.color ) {\n\n\t\t\t\t\tbuffers.colors.push( faceColors[ 0 ] );\n\t\t\t\t\tbuffers.colors.push( faceColors[ 1 ] );\n\t\t\t\t\tbuffers.colors.push( faceColors[ 2 ] );\n\n\t\t\t\t\tbuffers.colors.push( faceColors[ ( i - 1 ) * 3 ] );\n\t\t\t\t\tbuffers.colors.push( faceColors[ ( i - 1 ) * 3 + 1 ] );\n\t\t\t\t\tbuffers.colors.push( faceColors[ ( i - 1 ) * 3 + 2 ] );\n\n\t\t\t\t\tbuffers.colors.push( faceColors[ i * 3 ] );\n\t\t\t\t\tbuffers.colors.push( faceColors[ i * 3 + 1 ] );\n\t\t\t\t\tbuffers.colors.push( faceColors[ i * 3 + 2 ] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( geoInfo.material && geoInfo.material.mappingType !== 'AllSame' ) {\n\n\t\t\t\t\tbuffers.materialIndex.push( materialIndex );\n\t\t\t\t\tbuffers.materialIndex.push( materialIndex );\n\t\t\t\t\tbuffers.materialIndex.push( materialIndex );\n\n\t\t\t\t}\n\n\t\t\t\tif ( geoInfo.normal ) {\n\n\t\t\t\t\tbuffers.normal.push( faceNormals[ 0 ] );\n\t\t\t\t\tbuffers.normal.push( faceNormals[ 1 ] );\n\t\t\t\t\tbuffers.normal.push( faceNormals[ 2 ] );\n\n\t\t\t\t\tbuffers.normal.push( faceNormals[ ( i - 1 ) * 3 ] );\n\t\t\t\t\tbuffers.normal.push( faceNormals[ ( i - 1 ) * 3 + 1 ] );\n\t\t\t\t\tbuffers.normal.push( faceNormals[ ( i - 1 ) * 3 + 2 ] );\n\n\t\t\t\t\tbuffers.normal.push( faceNormals[ i * 3 ] );\n\t\t\t\t\tbuffers.normal.push( faceNormals[ i * 3 + 1 ] );\n\t\t\t\t\tbuffers.normal.push( faceNormals[ i * 3 + 2 ] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( geoInfo.uv ) {\n\n\t\t\t\t\tgeoInfo.uv.forEach( function ( uv, j ) {\n\n\t\t\t\t\t\tif ( buffers.uvs[ j ] === undefined ) buffers.uvs[ j ] = [];\n\n\t\t\t\t\t\tbuffers.uvs[ j ].push( faceUVs[ j ][ 0 ] );\n\t\t\t\t\t\tbuffers.uvs[ j ].push( faceUVs[ j ][ 1 ] );\n\n\t\t\t\t\t\tbuffers.uvs[ j ].push( faceUVs[ j ][ ( i - 1 ) * 2 ] );\n\t\t\t\t\t\tbuffers.uvs[ j ].push( faceUVs[ j ][ ( i - 1 ) * 2 + 1 ] );\n\n\t\t\t\t\t\tbuffers.uvs[ j ].push( faceUVs[ j ][ i * 2 ] );\n\t\t\t\t\t\tbuffers.uvs[ j ].push( faceUVs[ j ][ i * 2 + 1 ] );\n\n\t\t\t\t\t} );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\taddMorphTargets: function ( parentGeo, parentGeoNode, morphTarget, preTransform ) {\n\n\t\t\tif ( morphTarget === null ) return;\n\n\t\t\tparentGeo.morphAttributes.position = [];\n\t\t\tparentGeo.morphAttributes.normal = [];\n\n\t\t\tvar self = this;\n\t\t\tmorphTarget.rawTargets.forEach( function ( rawTarget ) {\n\n\t\t\t\tvar morphGeoNode = fbxTree.Objects.Geometry[ rawTarget.geoID ];\n\n\t\t\t\tif ( morphGeoNode !== undefined ) {\n\n\t\t\t\t\tself.genMorphGeometry( parentGeo, parentGeoNode, morphGeoNode, preTransform );\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t},\n\n\t\t// a morph geometry node is similar to a standard  node, and the node is also contained\n\t\t// in FBXTree.Objects.Geometry, however it can only have attributes for position, normal\n\t\t// and a special attribute Index defining which vertices of the original geometry are affected\n\t\t// Normal and position attributes only have data for the vertices that are affected by the morph\n\t\tgenMorphGeometry: function ( parentGeo, parentGeoNode, morphGeoNode, preTransform ) {\n\n\t\t\tvar morphGeo = new THREE.BufferGeometry();\n\t\t\tif ( morphGeoNode.attrName ) morphGeo.name = morphGeoNode.attrName;\n\n\t\t\tvar vertexIndices = ( parentGeoNode.PolygonVertexIndex !== undefined ) ? parentGeoNode.PolygonVertexIndex.a : [];\n\n\t\t\t// make a copy of the parent's vertex positions\n\t\t\tvar vertexPositions = ( parentGeoNode.Vertices !== undefined ) ? parentGeoNode.Vertices.a.slice() : [];\n\n\t\t\tvar morphPositions = ( morphGeoNode.Vertices !== undefined ) ? morphGeoNode.Vertices.a : [];\n\t\t\tvar indices = ( morphGeoNode.Indexes !== undefined ) ? morphGeoNode.Indexes.a : [];\n\n\t\t\tfor ( var i = 0; i < indices.length; i ++ ) {\n\n\t\t\t\tvar morphIndex = indices[ i ] * 3;\n\n\t\t\t\t// FBX format uses blend shapes rather than morph targets. This can be converted\n\t\t\t\t// by additively combining the blend shape positions with the original geometry's positions\n\t\t\t\tvertexPositions[ morphIndex ] += morphPositions[ i * 3 ];\n\t\t\t\tvertexPositions[ morphIndex + 1 ] += morphPositions[ i * 3 + 1 ];\n\t\t\t\tvertexPositions[ morphIndex + 2 ] += morphPositions[ i * 3 + 2 ];\n\n\t\t\t}\n\n\t\t\t// TODO: add morph normal support\n\t\t\tvar morphGeoInfo = {\n\t\t\t\tvertexIndices: vertexIndices,\n\t\t\t\tvertexPositions: vertexPositions,\n\t\t\t};\n\n\t\t\tvar morphBuffers = this.genBuffers( morphGeoInfo );\n\n\t\t\tvar positionAttribute = new THREE.Float32BufferAttribute( morphBuffers.vertex, 3 );\n\t\t\tpositionAttribute.name = morphGeoNode.attrName;\n\n\t\t\tpreTransform.applyToBufferAttribute( positionAttribute );\n\n\t\t\tparentGeo.morphAttributes.position.push( positionAttribute );\n\n\t\t},\n\n\t\t// Parse normal from FBXTree.Objects.Geometry.LayerElementNormal if it exists\n\t\tparseNormals: function ( NormalNode ) {\n\n\t\t\tvar mappingType = NormalNode.MappingInformationType;\n\t\t\tvar referenceType = NormalNode.ReferenceInformationType;\n\t\t\tvar buffer = NormalNode.Normals.a;\n\t\t\tvar indexBuffer = [];\n\t\t\tif ( referenceType === 'IndexToDirect' ) {\n\n\t\t\t\tif ( 'NormalIndex' in NormalNode ) {\n\n\t\t\t\t\tindexBuffer = NormalNode.NormalIndex.a;\n\n\t\t\t\t} else if ( 'NormalsIndex' in NormalNode ) {\n\n\t\t\t\t\tindexBuffer = NormalNode.NormalsIndex.a;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tdataSize: 3,\n\t\t\t\tbuffer: buffer,\n\t\t\t\tindices: indexBuffer,\n\t\t\t\tmappingType: mappingType,\n\t\t\t\treferenceType: referenceType\n\t\t\t};\n\n\t\t},\n\n\t\t// Parse UVs from FBXTree.Objects.Geometry.LayerElementUV if it exists\n\t\tparseUVs: function ( UVNode ) {\n\n\t\t\tvar mappingType = UVNode.MappingInformationType;\n\t\t\tvar referenceType = UVNode.ReferenceInformationType;\n\t\t\tvar buffer = UVNode.UV.a;\n\t\t\tvar indexBuffer = [];\n\t\t\tif ( referenceType === 'IndexToDirect' ) {\n\n\t\t\t\tindexBuffer = UVNode.UVIndex.a;\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tdataSize: 2,\n\t\t\t\tbuffer: buffer,\n\t\t\t\tindices: indexBuffer,\n\t\t\t\tmappingType: mappingType,\n\t\t\t\treferenceType: referenceType\n\t\t\t};\n\n\t\t},\n\n\t\t// Parse Vertex Colors from FBXTree.Objects.Geometry.LayerElementColor if it exists\n\t\tparseVertexColors: function ( ColorNode ) {\n\n\t\t\tvar mappingType = ColorNode.MappingInformationType;\n\t\t\tvar referenceType = ColorNode.ReferenceInformationType;\n\t\t\tvar buffer = ColorNode.Colors.a;\n\t\t\tvar indexBuffer = [];\n\t\t\tif ( referenceType === 'IndexToDirect' ) {\n\n\t\t\t\tindexBuffer = ColorNode.ColorIndex.a;\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tdataSize: 4,\n\t\t\t\tbuffer: buffer,\n\t\t\t\tindices: indexBuffer,\n\t\t\t\tmappingType: mappingType,\n\t\t\t\treferenceType: referenceType\n\t\t\t};\n\n\t\t},\n\n\t\t// Parse mapping and material data in FBXTree.Objects.Geometry.LayerElementMaterial if it exists\n\t\tparseMaterialIndices: function ( MaterialNode ) {\n\n\t\t\tvar mappingType = MaterialNode.MappingInformationType;\n\t\t\tvar referenceType = MaterialNode.ReferenceInformationType;\n\n\t\t\tif ( mappingType === 'NoMappingInformation' ) {\n\n\t\t\t\treturn {\n\t\t\t\t\tdataSize: 1,\n\t\t\t\t\tbuffer: [ 0 ],\n\t\t\t\t\tindices: [ 0 ],\n\t\t\t\t\tmappingType: 'AllSame',\n\t\t\t\t\treferenceType: referenceType\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\tvar materialIndexBuffer = MaterialNode.Materials.a;\n\n\t\t\t// Since materials are stored as indices, there's a bit of a mismatch between FBX and what\n\t\t\t// we expect.So we create an intermediate buffer that points to the index in the buffer,\n\t\t\t// for conforming with the other functions we've written for other data.\n\t\t\tvar materialIndices = [];\n\n\t\t\tfor ( var i = 0; i < materialIndexBuffer.length; ++ i ) {\n\n\t\t\t\tmaterialIndices.push( i );\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tdataSize: 1,\n\t\t\t\tbuffer: materialIndexBuffer,\n\t\t\t\tindices: materialIndices,\n\t\t\t\tmappingType: mappingType,\n\t\t\t\treferenceType: referenceType\n\t\t\t};\n\n\t\t},\n\n\t\t// Generate a NurbGeometry from a node in FBXTree.Objects.Geometry\n\t\tparseNurbsGeometry: function ( geoNode ) {\n\n\t\t\tif ( THREE.NURBSCurve === undefined ) {\n\n\t\t\t\tconsole.error( 'THREE.FBXLoader: The loader relies on THREE.NURBSCurve for any nurbs present in the model. Nurbs will show up as empty geometry.' );\n\t\t\t\treturn new THREE.BufferGeometry();\n\n\t\t\t}\n\n\t\t\tvar order = parseInt( geoNode.Order );\n\n\t\t\tif ( isNaN( order ) ) {\n\n\t\t\t\tconsole.error( 'THREE.FBXLoader: Invalid Order %s given for geometry ID: %s', geoNode.Order, geoNode.id );\n\t\t\t\treturn new THREE.BufferGeometry();\n\n\t\t\t}\n\n\t\t\tvar degree = order - 1;\n\n\t\t\tvar knots = geoNode.KnotVector.a;\n\t\t\tvar controlPoints = [];\n\t\t\tvar pointsValues = geoNode.Points.a;\n\n\t\t\tfor ( var i = 0, l = pointsValues.length; i < l; i += 4 ) {\n\n\t\t\t\tcontrolPoints.push( new THREE.Vector4().fromArray( pointsValues, i ) );\n\n\t\t\t}\n\n\t\t\tvar startKnot, endKnot;\n\n\t\t\tif ( geoNode.Form === 'Closed' ) {\n\n\t\t\t\tcontrolPoints.push( controlPoints[ 0 ] );\n\n\t\t\t} else if ( geoNode.Form === 'Periodic' ) {\n\n\t\t\t\tstartKnot = degree;\n\t\t\t\tendKnot = knots.length - 1 - startKnot;\n\n\t\t\t\tfor ( var i = 0; i < degree; ++ i ) {\n\n\t\t\t\t\tcontrolPoints.push( controlPoints[ i ] );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar curve = new THREE.NURBSCurve( degree, knots, controlPoints, startKnot, endKnot );\n\t\t\tvar vertices = curve.getPoints( controlPoints.length * 7 );\n\n\t\t\tvar positions = new Float32Array( vertices.length * 3 );\n\n\t\t\tvertices.forEach( function ( vertex, i ) {\n\n\t\t\t\tvertex.toArray( positions, i * 3 );\n\n\t\t\t} );\n\n\t\t\tvar geometry = new THREE.BufferGeometry();\n\t\t\tgeometry.addAttribute( 'position', new THREE.BufferAttribute( positions, 3 ) );\n\n\t\t\treturn geometry;\n\n\t\t},\n\n\t};\n\n\t// parse animation data from FBXTree\n\tfunction AnimationParser() {}\n\n\tAnimationParser.prototype = {\n\n\t\tconstructor: AnimationParser,\n\n\t\t// take raw animation clips and turn them into three.js animation clips\n\t\tparse: function () {\n\n\t\t\tvar animationClips = [];\n\n\n\t\t\tvar rawClips = this.parseClips();\n\n\t\t\tif ( rawClips === undefined ) return animationClips;\n\n\t\t\tfor ( var key in rawClips ) {\n\n\t\t\t\tvar rawClip = rawClips[ key ];\n\n\t\t\t\tvar clip = this.addClip( rawClip );\n\n\t\t\t\tanimationClips.push( clip );\n\n\t\t\t}\n\n\t\t\treturn animationClips;\n\n\t\t},\n\n\t\tparseClips: function () {\n\n\t\t\t// since the actual transformation data is stored in FBXTree.Objects.AnimationCurve,\n\t\t\t// if this is undefined we can safely assume there are no animations\n\t\t\tif ( fbxTree.Objects.AnimationCurve === undefined ) return undefined;\n\n\t\t\tvar curveNodesMap = this.parseAnimationCurveNodes();\n\n\t\t\tthis.parseAnimationCurves( curveNodesMap );\n\n\t\t\tvar layersMap = this.parseAnimationLayers( curveNodesMap );\n\t\t\tvar rawClips = this.parseAnimStacks( layersMap );\n\n\t\t\treturn rawClips;\n\n\t\t},\n\n\t\t// parse nodes in FBXTree.Objects.AnimationCurveNode\n\t\t// each AnimationCurveNode holds data for an animation transform for a model (e.g. left arm rotation )\n\t\t// and is referenced by an AnimationLayer\n\t\tparseAnimationCurveNodes: function () {\n\n\t\t\tvar rawCurveNodes = fbxTree.Objects.AnimationCurveNode;\n\n\t\t\tvar curveNodesMap = new Map();\n\n\t\t\tfor ( var nodeID in rawCurveNodes ) {\n\n\t\t\t\tvar rawCurveNode = rawCurveNodes[ nodeID ];\n\n\t\t\t\tif ( rawCurveNode.attrName.match( /S|R|T|DeformPercent/ ) !== null ) {\n\n\t\t\t\t\tvar curveNode = {\n\n\t\t\t\t\t\tid: rawCurveNode.id,\n\t\t\t\t\t\tattr: rawCurveNode.attrName,\n\t\t\t\t\t\tcurves: {},\n\n\t\t\t\t\t};\n\n\t\t\t\t\tcurveNodesMap.set( curveNode.id, curveNode );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn curveNodesMap;\n\n\t\t},\n\n\t\t// parse nodes in FBXTree.Objects.AnimationCurve and connect them up to\n\t\t// previously parsed AnimationCurveNodes. Each AnimationCurve holds data for a single animated\n\t\t// axis ( e.g. times and values of x rotation)\n\t\tparseAnimationCurves: function ( curveNodesMap ) {\n\n\t\t\tvar rawCurves = fbxTree.Objects.AnimationCurve;\n\n\t\t\t// TODO: Many values are identical up to roundoff error, but won't be optimised\n\t\t\t// e.g. position times: [0, 0.4, 0. 8]\n\t\t\t// position values: [7.23538335023477e-7, 93.67518615722656, -0.9982695579528809, 7.23538335023477e-7, 93.67518615722656, -0.9982695579528809, 7.235384487103147e-7, 93.67520904541016, -0.9982695579528809]\n\t\t\t// clearly, this should be optimised to\n\t\t\t// times: [0], positions [7.23538335023477e-7, 93.67518615722656, -0.9982695579528809]\n\t\t\t// this shows up in nearly every FBX file, and generally time array is length > 100\n\n\t\t\tfor ( var nodeID in rawCurves ) {\n\n\t\t\t\tvar animationCurve = {\n\n\t\t\t\t\tid: rawCurves[ nodeID ].id,\n\t\t\t\t\ttimes: rawCurves[ nodeID ].KeyTime.a.map( convertFBXTimeToSeconds ),\n\t\t\t\t\tvalues: rawCurves[ nodeID ].KeyValueFloat.a,\n\n\t\t\t\t};\n\n\t\t\t\tvar relationships = connections.get( animationCurve.id );\n\n\t\t\t\tif ( relationships !== undefined ) {\n\n\t\t\t\t\tvar animationCurveID = relationships.parents[ 0 ].ID;\n\t\t\t\t\tvar animationCurveRelationship = relationships.parents[ 0 ].relationship;\n\n\t\t\t\t\tif ( animationCurveRelationship.match( /X/ ) ) {\n\n\t\t\t\t\t\tcurveNodesMap.get( animationCurveID ).curves[ 'x' ] = animationCurve;\n\n\t\t\t\t\t} else if ( animationCurveRelationship.match( /Y/ ) ) {\n\n\t\t\t\t\t\tcurveNodesMap.get( animationCurveID ).curves[ 'y' ] = animationCurve;\n\n\t\t\t\t\t} else if ( animationCurveRelationship.match( /Z/ ) ) {\n\n\t\t\t\t\t\tcurveNodesMap.get( animationCurveID ).curves[ 'z' ] = animationCurve;\n\n\t\t\t\t\t} else if ( animationCurveRelationship.match( /d|DeformPercent/ ) && curveNodesMap.has( animationCurveID ) ) {\n\n\t\t\t\t\t\tcurveNodesMap.get( animationCurveID ).curves[ 'morph' ] = animationCurve;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\t// parse nodes in FBXTree.Objects.AnimationLayer. Each layers holds references\n\t\t// to various AnimationCurveNodes and is referenced by an AnimationStack node\n\t\t// note: theoretically a stack can have multiple layers, however in practice there always seems to be one per stack\n\t\tparseAnimationLayers: function ( curveNodesMap ) {\n\n\t\t\tvar rawLayers = fbxTree.Objects.AnimationLayer;\n\n\t\t\tvar layersMap = new Map();\n\n\t\t\tfor ( var nodeID in rawLayers ) {\n\n\t\t\t\tvar layerCurveNodes = [];\n\n\t\t\t\tvar connection = connections.get( parseInt( nodeID ) );\n\n\t\t\t\tif ( connection !== undefined ) {\n\n\t\t\t\t\t// all the animationCurveNodes used in the layer\n\t\t\t\t\tvar children = connection.children;\n\n\t\t\t\t\tvar self = this;\n\t\t\t\t\tchildren.forEach( function ( child, i ) {\n\n\t\t\t\t\t\tif ( curveNodesMap.has( child.ID ) ) {\n\n\t\t\t\t\t\t\tvar curveNode = curveNodesMap.get( child.ID );\n\n\t\t\t\t\t\t\t// check that the curves are defined for at least one axis, otherwise ignore the curveNode\n\t\t\t\t\t\t\tif ( curveNode.curves.x !== undefined || curveNode.curves.y !== undefined || curveNode.curves.z !== undefined ) {\n\n\t\t\t\t\t\t\t\tif ( layerCurveNodes[ i ] === undefined ) {\n\n\t\t\t\t\t\t\t\t\tvar modelID;\n\n\t\t\t\t\t\t\t\t\tconnections.get( child.ID ).parents.forEach( function ( parent ) {\n\n\t\t\t\t\t\t\t\t\t\tif ( parent.relationship !== undefined ) modelID = parent.ID;\n\n\t\t\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t\t\t\tvar rawModel = fbxTree.Objects.Model[ modelID.toString() ];\n\n\t\t\t\t\t\t\t\t\tvar node = {\n\n\t\t\t\t\t\t\t\t\t\tmodelName: THREE.PropertyBinding.sanitizeNodeName( rawModel.attrName ),\n\t\t\t\t\t\t\t\t\t\tinitialPosition: [ 0, 0, 0 ],\n\t\t\t\t\t\t\t\t\t\tinitialRotation: [ 0, 0, 0 ],\n\t\t\t\t\t\t\t\t\t\tinitialScale: [ 1, 1, 1 ],\n\t\t\t\t\t\t\t\t\t\ttransform: self.getModelAnimTransform( rawModel ),\n\n\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t\t// if the animated model is pre rotated, we'll have to apply the pre rotations to every\n\t\t\t\t\t\t\t\t\t// animation value as well\n\t\t\t\t\t\t\t\t\tif ( 'PreRotation' in rawModel ) node.preRotations = rawModel.PreRotation.value;\n\t\t\t\t\t\t\t\t\tif ( 'PostRotation' in rawModel ) node.postRotations = rawModel.PostRotation.value;\n\n\t\t\t\t\t\t\t\t\tlayerCurveNodes[ i ] = node;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tlayerCurveNodes[ i ][ curveNode.attr ] = curveNode;\n\n\t\t\t\t\t\t\t} else if ( curveNode.curves.morph !== undefined ) {\n\n\t\t\t\t\t\t\t\tif ( layerCurveNodes[ i ] === undefined ) {\n\n\t\t\t\t\t\t\t\t\tvar deformerID;\n\n\t\t\t\t\t\t\t\t\tconnections.get( child.ID ).parents.forEach( function ( parent ) {\n\n\t\t\t\t\t\t\t\t\t\tif ( parent.relationship !== undefined ) deformerID = parent.ID;\n\n\t\t\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t\t\t\tvar morpherID = connections.get( deformerID ).parents[ 0 ].ID;\n\t\t\t\t\t\t\t\t\tvar geoID = connections.get( morpherID ).parents[ 0 ].ID;\n\n\t\t\t\t\t\t\t\t\t// assuming geometry is not used in more than one model\n\t\t\t\t\t\t\t\t\tvar modelID = connections.get( geoID ).parents[ 0 ].ID;\n\n\t\t\t\t\t\t\t\t\tvar rawModel = fbxTree.Objects.Model[ modelID ];\n\n\t\t\t\t\t\t\t\t\tvar node = {\n\n\t\t\t\t\t\t\t\t\t\tmodelName: THREE.PropertyBinding.sanitizeNodeName( rawModel.attrName ),\n\t\t\t\t\t\t\t\t\t\tmorphName: fbxTree.Objects.Deformer[ deformerID ].attrName,\n\n\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t\tlayerCurveNodes[ i ] = node;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tlayerCurveNodes[ i ][ curveNode.attr ] = curveNode;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} );\n\n\t\t\t\t\tlayersMap.set( parseInt( nodeID ), layerCurveNodes );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn layersMap;\n\n\t\t},\n\n\t\tgetModelAnimTransform: function ( modelNode ) {\n\n\t\t\tvar transformData = {};\n\n\t\t\tif ( 'RotationOrder' in modelNode ) transformData.eulerOrder = parseInt( modelNode.RotationOrder.value );\n\n\t\t\tif ( 'Lcl_Translation' in modelNode ) transformData.translation = modelNode.Lcl_Translation.value;\n\t\t\tif ( 'RotationOffset' in modelNode ) transformData.rotationOffset = modelNode.RotationOffset.value;\n\n\t\t\tif ( 'Lcl_Rotation' in modelNode ) transformData.rotation = modelNode.Lcl_Rotation.value;\n\t\t\tif ( 'PreRotation' in modelNode ) transformData.preRotation = modelNode.PreRotation.value;\n\n\t\t\tif ( 'PostRotation' in modelNode ) transformData.postRotation = modelNode.PostRotation.value;\n\n\t\t\tif ( 'Lcl_Scaling' in modelNode ) transformData.scale = modelNode.Lcl_Scaling.value;\n\n\t\t\treturn generateTransform( transformData );\n\n\t\t},\n\n\t\t// parse nodes in FBXTree.Objects.AnimationStack. These are the top level node in the animation\n\t\t// hierarchy. Each Stack node will be used to create a THREE.AnimationClip\n\t\tparseAnimStacks: function ( layersMap ) {\n\n\t\t\tvar rawStacks = fbxTree.Objects.AnimationStack;\n\n\t\t\t// connect the stacks (clips) up to the layers\n\t\t\tvar rawClips = {};\n\n\t\t\tfor ( var nodeID in rawStacks ) {\n\n\t\t\t\tvar children = connections.get( parseInt( nodeID ) ).children;\n\n\t\t\t\tif ( children.length > 1 ) {\n\n\t\t\t\t\t// it seems like stacks will always be associated with a single layer. But just in case there are files\n\t\t\t\t\t// where there are multiple layers per stack, we'll display a warning\n\t\t\t\t\tconsole.warn( 'THREE.FBXLoader: Encountered an animation stack with multiple layers, this is currently not supported. Ignoring subsequent layers.' );\n\n\t\t\t\t}\n\n\t\t\t\tvar layer = layersMap.get( children[ 0 ].ID );\n\n\t\t\t\trawClips[ nodeID ] = {\n\n\t\t\t\t\tname: rawStacks[ nodeID ].attrName,\n\t\t\t\t\tlayer: layer,\n\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t\treturn rawClips;\n\n\t\t},\n\n\t\taddClip: function ( rawClip ) {\n\n\t\t\tvar tracks = [];\n\n\t\t\tvar self = this;\n\t\t\trawClip.layer.forEach( function ( rawTracks ) {\n\n\t\t\t\ttracks = tracks.concat( self.generateTracks( rawTracks ) );\n\n\t\t\t} );\n\n\t\t\treturn new THREE.AnimationClip( rawClip.name, - 1, tracks );\n\n\t\t},\n\n\t\tgenerateTracks: function ( rawTracks ) {\n\n\t\t\tvar tracks = [];\n\n\t\t\tvar initialPosition = new THREE.Vector3();\n\t\t\tvar initialRotation = new THREE.Quaternion();\n\t\t\tvar initialScale = new THREE.Vector3();\n\n\t\t\tif ( rawTracks.transform ) rawTracks.transform.decompose( initialPosition, initialRotation, initialScale );\n\n\t\t\tinitialPosition = initialPosition.toArray();\n\t\t\tinitialRotation = new THREE.Euler().setFromQuaternion( initialRotation ).toArray(); // todo: euler order\n\t\t\tinitialScale = initialScale.toArray();\n\n\t\t\tif ( rawTracks.T !== undefined && Object.keys( rawTracks.T.curves ).length > 0 ) {\n\n\t\t\t\tvar positionTrack = this.generateVectorTrack( rawTracks.modelName, rawTracks.T.curves, initialPosition, 'position' );\n\t\t\t\tif ( positionTrack !== undefined ) tracks.push( positionTrack );\n\n\t\t\t}\n\n\t\t\tif ( rawTracks.R !== undefined && Object.keys( rawTracks.R.curves ).length > 0 ) {\n\n\t\t\t\tvar rotationTrack = this.generateRotationTrack( rawTracks.modelName, rawTracks.R.curves, initialRotation, rawTracks.preRotations, rawTracks.postRotations );\n\t\t\t\tif ( rotationTrack !== undefined ) tracks.push( rotationTrack );\n\n\t\t\t}\n\n\t\t\tif ( rawTracks.S !== undefined && Object.keys( rawTracks.S.curves ).length > 0 ) {\n\n\t\t\t\tvar scaleTrack = this.generateVectorTrack( rawTracks.modelName, rawTracks.S.curves, initialScale, 'scale' );\n\t\t\t\tif ( scaleTrack !== undefined ) tracks.push( scaleTrack );\n\n\t\t\t}\n\n\t\t\tif ( rawTracks.DeformPercent !== undefined ) {\n\n\t\t\t\tvar morphTrack = this.generateMorphTrack( rawTracks );\n\t\t\t\tif ( morphTrack !== undefined ) tracks.push( morphTrack );\n\n\t\t\t}\n\n\t\t\treturn tracks;\n\n\t\t},\n\n\t\tgenerateVectorTrack: function ( modelName, curves, initialValue, type ) {\n\n\t\t\tvar times = this.getTimesForAllAxes( curves );\n\t\t\tvar values = this.getKeyframeTrackValues( times, curves, initialValue );\n\n\t\t\treturn new THREE.VectorKeyframeTrack( modelName + '.' + type, times, values );\n\n\t\t},\n\n\t\tgenerateRotationTrack: function ( modelName, curves, initialValue, preRotations, postRotations ) {\n\n\t\t\tif ( curves.x !== undefined ) {\n\n\t\t\t\tthis.interpolateRotations( curves.x );\n\t\t\t\tcurves.x.values = curves.x.values.map( THREE.Math.degToRad );\n\n\t\t\t}\n\t\t\tif ( curves.y !== undefined ) {\n\n\t\t\t\tthis.interpolateRotations( curves.y );\n\t\t\t\tcurves.y.values = curves.y.values.map( THREE.Math.degToRad );\n\n\t\t\t}\n\t\t\tif ( curves.z !== undefined ) {\n\n\t\t\t\tthis.interpolateRotations( curves.z );\n\t\t\t\tcurves.z.values = curves.z.values.map( THREE.Math.degToRad );\n\n\t\t\t}\n\n\t\t\tvar times = this.getTimesForAllAxes( curves );\n\t\t\tvar values = this.getKeyframeTrackValues( times, curves, initialValue );\n\n\t\t\tif ( preRotations !== undefined ) {\n\n\t\t\t\tpreRotations = preRotations.map( THREE.Math.degToRad );\n\t\t\t\tpreRotations.push( 'ZYX' );\n\n\t\t\t\tpreRotations = new THREE.Euler().fromArray( preRotations );\n\t\t\t\tpreRotations = new THREE.Quaternion().setFromEuler( preRotations );\n\n\t\t\t}\n\n\t\t\tif ( postRotations !== undefined ) {\n\n\t\t\t\tpostRotations = postRotations.map( THREE.Math.degToRad );\n\t\t\t\tpostRotations.push( 'ZYX' );\n\n\t\t\t\tpostRotations = new THREE.Euler().fromArray( postRotations );\n\t\t\t\tpostRotations = new THREE.Quaternion().setFromEuler( postRotations ).inverse();\n\n\t\t\t}\n\n\t\t\tvar quaternion = new THREE.Quaternion();\n\t\t\tvar euler = new THREE.Euler();\n\n\t\t\tvar quaternionValues = [];\n\n\t\t\tfor ( var i = 0; i < values.length; i += 3 ) {\n\n\t\t\t\teuler.set( values[ i ], values[ i + 1 ], values[ i + 2 ], 'ZYX' );\n\n\t\t\t\tquaternion.setFromEuler( euler );\n\n\t\t\t\tif ( preRotations !== undefined ) quaternion.premultiply( preRotations );\n\t\t\t\tif ( postRotations !== undefined ) quaternion.multiply( postRotations );\n\n\t\t\t\tquaternion.toArray( quaternionValues, ( i / 3 ) * 4 );\n\n\t\t\t}\n\n\t\t\treturn new THREE.QuaternionKeyframeTrack( modelName + '.quaternion', times, quaternionValues );\n\n\t\t},\n\n\t\tgenerateMorphTrack: function ( rawTracks ) {\n\n\t\t\tvar curves = rawTracks.DeformPercent.curves.morph;\n\t\t\tvar values = curves.values.map( function ( val ) {\n\n\t\t\t\treturn val / 100;\n\n\t\t\t} );\n\n\t\t\tvar morphNum = sceneGraph.getObjectByName( rawTracks.modelName ).morphTargetDictionary[ rawTracks.morphName ];\n\n\t\t\treturn new THREE.NumberKeyframeTrack( rawTracks.modelName + '.morphTargetInfluences[' + morphNum + ']', curves.times, values );\n\n\t\t},\n\n\t\t// For all animated objects, times are defined separately for each axis\n\t\t// Here we'll combine the times into one sorted array without duplicates\n\t\tgetTimesForAllAxes: function ( curves ) {\n\n\t\t\tvar times = [];\n\n\t\t\t// first join together the times for each axis, if defined\n\t\t\tif ( curves.x !== undefined ) times = times.concat( curves.x.times );\n\t\t\tif ( curves.y !== undefined ) times = times.concat( curves.y.times );\n\t\t\tif ( curves.z !== undefined ) times = times.concat( curves.z.times );\n\n\t\t\t// then sort them and remove duplicates\n\t\t\ttimes = times.sort( function ( a, b ) {\n\n\t\t\t\treturn a - b;\n\n\t\t\t} ).filter( function ( elem, index, array ) {\n\n\t\t\t\treturn array.indexOf( elem ) == index;\n\n\t\t\t} );\n\n\t\t\treturn times;\n\n\t\t},\n\n\t\tgetKeyframeTrackValues: function ( times, curves, initialValue ) {\n\n\t\t\tvar prevValue = initialValue;\n\n\t\t\tvar values = [];\n\n\t\t\tvar xIndex = - 1;\n\t\t\tvar yIndex = - 1;\n\t\t\tvar zIndex = - 1;\n\n\t\t\ttimes.forEach( function ( time ) {\n\n\t\t\t\tif ( curves.x ) xIndex = curves.x.times.indexOf( time );\n\t\t\t\tif ( curves.y ) yIndex = curves.y.times.indexOf( time );\n\t\t\t\tif ( curves.z ) zIndex = curves.z.times.indexOf( time );\n\n\t\t\t\t// if there is an x value defined for this frame, use that\n\t\t\t\tif ( xIndex !== - 1 ) {\n\n\t\t\t\t\tvar xValue = curves.x.values[ xIndex ];\n\t\t\t\t\tvalues.push( xValue );\n\t\t\t\t\tprevValue[ 0 ] = xValue;\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// otherwise use the x value from the previous frame\n\t\t\t\t\tvalues.push( prevValue[ 0 ] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( yIndex !== - 1 ) {\n\n\t\t\t\t\tvar yValue = curves.y.values[ yIndex ];\n\t\t\t\t\tvalues.push( yValue );\n\t\t\t\t\tprevValue[ 1 ] = yValue;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvalues.push( prevValue[ 1 ] );\n\n\t\t\t\t}\n\n\t\t\t\tif ( zIndex !== - 1 ) {\n\n\t\t\t\t\tvar zValue = curves.z.values[ zIndex ];\n\t\t\t\t\tvalues.push( zValue );\n\t\t\t\t\tprevValue[ 2 ] = zValue;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvalues.push( prevValue[ 2 ] );\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\treturn values;\n\n\t\t},\n\n\t\t// Rotations are defined as Euler angles which can have values  of any size\n\t\t// These will be converted to quaternions which don't support values greater than\n\t\t// PI, so we'll interpolate large rotations\n\t\tinterpolateRotations: function ( curve ) {\n\n\t\t\tfor ( var i = 1; i < curve.values.length; i ++ ) {\n\n\t\t\t\tvar initialValue = curve.values[ i - 1 ];\n\t\t\t\tvar valuesSpan = curve.values[ i ] - initialValue;\n\n\t\t\t\tvar absoluteSpan = Math.abs( valuesSpan );\n\n\t\t\t\tif ( absoluteSpan >= 180 ) {\n\n\t\t\t\t\tvar numSubIntervals = absoluteSpan / 180;\n\n\t\t\t\t\tvar step = valuesSpan / numSubIntervals;\n\t\t\t\t\tvar nextValue = initialValue + step;\n\n\t\t\t\t\tvar initialTime = curve.times[ i - 1 ];\n\t\t\t\t\tvar timeSpan = curve.times[ i ] - initialTime;\n\t\t\t\t\tvar interval = timeSpan / numSubIntervals;\n\t\t\t\t\tvar nextTime = initialTime + interval;\n\n\t\t\t\t\tvar interpolatedTimes = [];\n\t\t\t\t\tvar interpolatedValues = [];\n\n\t\t\t\t\twhile ( nextTime < curve.times[ i ] ) {\n\n\t\t\t\t\t\tinterpolatedTimes.push( nextTime );\n\t\t\t\t\t\tnextTime += interval;\n\n\t\t\t\t\t\tinterpolatedValues.push( nextValue );\n\t\t\t\t\t\tnextValue += step;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcurve.times = inject( curve.times, i, interpolatedTimes );\n\t\t\t\t\tcurve.values = inject( curve.values, i, interpolatedValues );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t};\n\n\t// parse an FBX file in ASCII format\n\tfunction TextParser() {}\n\n\tTextParser.prototype = {\n\n\t\tconstructor: TextParser,\n\n\t\tgetPrevNode: function () {\n\n\t\t\treturn this.nodeStack[ this.currentIndent - 2 ];\n\n\t\t},\n\n\t\tgetCurrentNode: function () {\n\n\t\t\treturn this.nodeStack[ this.currentIndent - 1 ];\n\n\t\t},\n\n\t\tgetCurrentProp: function () {\n\n\t\t\treturn this.currentProp;\n\n\t\t},\n\n\t\tpushStack: function ( node ) {\n\n\t\t\tthis.nodeStack.push( node );\n\t\t\tthis.currentIndent += 1;\n\n\t\t},\n\n\t\tpopStack: function () {\n\n\t\t\tthis.nodeStack.pop();\n\t\t\tthis.currentIndent -= 1;\n\n\t\t},\n\n\t\tsetCurrentProp: function ( val, name ) {\n\n\t\t\tthis.currentProp = val;\n\t\t\tthis.currentPropName = name;\n\n\t\t},\n\n\t\tparse: function ( text ) {\n\n\t\t\tthis.currentIndent = 0;\n\t\t\tconsole.log(\"FBXTree: \", FBXTree);\n\t\t\tthis.allNodes = new FBXTree();\n\t\t\tthis.nodeStack = [];\n\t\t\tthis.currentProp = [];\n\t\t\tthis.currentPropName = '';\n\n\t\t\tvar self = this;\n\n\t\t\tvar split = text.split( /[\\r\\n]+/ );\n\n\t\t\tsplit.forEach( function ( line, i ) {\n\n\t\t\t\tvar matchComment = line.match( /^[\\s\\t]*;/ );\n\t\t\t\tvar matchEmpty = line.match( /^[\\s\\t]*$/ );\n\n\t\t\t\tif ( matchComment || matchEmpty ) return;\n\n\t\t\t\tvar matchBeginning = line.match( '^\\\\t{' + self.currentIndent + '}(\\\\w+):(.*){', '' );\n\t\t\t\tvar matchProperty = line.match( '^\\\\t{' + ( self.currentIndent ) + '}(\\\\w+):[\\\\s\\\\t\\\\r\\\\n](.*)' );\n\t\t\t\tvar matchEnd = line.match( '^\\\\t{' + ( self.currentIndent - 1 ) + '}}' );\n\n\t\t\t\tif ( matchBeginning ) {\n\n\t\t\t\t\tself.parseNodeBegin( line, matchBeginning );\n\n\t\t\t\t} else if ( matchProperty ) {\n\n\t\t\t\t\tself.parseNodeProperty( line, matchProperty, split[ ++ i ] );\n\n\t\t\t\t} else if ( matchEnd ) {\n\n\t\t\t\t\tself.popStack();\n\n\t\t\t\t} else if ( line.match( /^[^\\s\\t}]/ ) ) {\n\n\t\t\t\t\t// large arrays are split over multiple lines terminated with a ',' character\n\t\t\t\t\t// if this is encountered the line needs to be joined to the previous line\n\t\t\t\t\tself.parseNodePropertyContinued( line );\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\treturn this.allNodes;\n\n\t\t},\n\n\t\tparseNodeBegin: function ( line, property ) {\n\n\t\t\tvar nodeName = property[ 1 ].trim().replace( /^\"/, '' ).replace( /\"$/, '' );\n\n\t\t\tvar nodeAttrs = property[ 2 ].split( ',' ).map( function ( attr ) {\n\n\t\t\t\treturn attr.trim().replace( /^\"/, '' ).replace( /\"$/, '' );\n\n\t\t\t} );\n\n\t\t\tvar node = { name: nodeName };\n\t\t\tvar attrs = this.parseNodeAttr( nodeAttrs );\n\n\t\t\tvar currentNode = this.getCurrentNode();\n\n\t\t\t// a top node\n\t\t\tif ( this.currentIndent === 0 ) {\n\n\t\t\t\tthis.allNodes.add( nodeName, node );\n\n\t\t\t} else { // a subnode\n\n\t\t\t\t// if the subnode already exists, append it\n\t\t\t\tif ( nodeName in currentNode ) {\n\n\t\t\t\t// special case Pose needs PoseNodes as an array\n\t\t\t\t\tif ( nodeName === 'PoseNode' ) {\n\n\t\t\t\t\t\tcurrentNode.PoseNode.push( node );\n\n\t\t\t\t\t} else if ( currentNode[ nodeName ].id !== undefined ) {\n\n\t\t\t\t\t\tcurrentNode[ nodeName ] = {};\n\t\t\t\t\t\tcurrentNode[ nodeName ][ currentNode[ nodeName ].id ] = currentNode[ nodeName ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( attrs.id !== '' ) currentNode[ nodeName ][ attrs.id ] = node;\n\n\t\t\t\t} else if ( typeof attrs.id === 'number' ) {\n\n\t\t\t\t\tcurrentNode[ nodeName ] = {};\n\t\t\t\t\tcurrentNode[ nodeName ][ attrs.id ] = node;\n\n\t\t\t\t} else if ( nodeName !== 'Properties70' ) {\n\n\t\t\t\t\tif ( nodeName === 'PoseNode' )\tcurrentNode[ nodeName ] = [ node ];\n\t\t\t\t\telse currentNode[ nodeName ] = node;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( typeof attrs.id === 'number' ) node.id = attrs.id;\n\t\t\tif ( attrs.name !== '' ) node.attrName = attrs.name;\n\t\t\tif ( attrs.type !== '' ) node.attrType = attrs.type;\n\n\t\t\tthis.pushStack( node );\n\n\t\t},\n\n\t\tparseNodeAttr: function ( attrs ) {\n\n\t\t\tvar id = attrs[ 0 ];\n\n\t\t\tif ( attrs[ 0 ] !== '' ) {\n\n\t\t\t\tid = parseInt( attrs[ 0 ] );\n\n\t\t\t\tif ( isNaN( id ) ) {\n\n\t\t\t\t\tid = attrs[ 0 ];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar name = '', type = '';\n\n\t\t\tif ( attrs.length > 1 ) {\n\n\t\t\t\tname = attrs[ 1 ].replace( /^(\\w+)::/, '' );\n\t\t\t\ttype = attrs[ 2 ];\n\n\t\t\t}\n\n\t\t\treturn { id: id, name: name, type: type };\n\n\t\t},\n\n\t\tparseNodeProperty: function ( line, property, contentLine ) {\n\n\t\t\tvar propName = property[ 1 ].replace( /^\"/, '' ).replace( /\"$/, '' ).trim();\n\t\t\tvar propValue = property[ 2 ].replace( /^\"/, '' ).replace( /\"$/, '' ).trim();\n\n\t\t\t// for special case: base64 image data follows \"Content: ,\" line\n\t\t\t//\tContent: ,\n\t\t\t//\t \"/9j/4RDaRXhpZgAATU0A...\"\n\t\t\tif ( propName === 'Content' && propValue === ',' ) {\n\n\t\t\t\tpropValue = contentLine.replace( /\"/g, '' ).replace( /,$/, '' ).trim();\n\n\t\t\t}\n\n\t\t\tvar currentNode = this.getCurrentNode();\n\t\t\tvar parentName = currentNode.name;\n\n\t\t\tif ( parentName === 'Properties70' ) {\n\n\t\t\t\tthis.parseNodeSpecialProperty( line, propName, propValue );\n\t\t\t\treturn;\n\n\t\t\t}\n\n\t\t\t// Connections\n\t\t\tif ( propName === 'C' ) {\n\n\t\t\t\tvar connProps = propValue.split( ',' ).slice( 1 );\n\t\t\t\tvar from = parseInt( connProps[ 0 ] );\n\t\t\t\tvar to = parseInt( connProps[ 1 ] );\n\n\t\t\t\tvar rest = propValue.split( ',' ).slice( 3 );\n\n\t\t\t\trest = rest.map( function ( elem ) {\n\n\t\t\t\t\treturn elem.trim().replace( /^\"/, '' );\n\n\t\t\t\t} );\n\n\t\t\t\tpropName = 'connections';\n\t\t\t\tpropValue = [ from, to ];\n\t\t\t\tappend( propValue, rest );\n\n\t\t\t\tif ( currentNode[ propName ] === undefined ) {\n\n\t\t\t\t\tcurrentNode[ propName ] = [];\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Node\n\t\t\tif ( propName === 'Node' ) currentNode.id = propValue;\n\n\t\t\t// connections\n\t\t\tif ( propName in currentNode && Array.isArray( currentNode[ propName ] ) ) {\n\n\t\t\t\tcurrentNode[ propName ].push( propValue );\n\n\t\t\t} else {\n\n\t\t\t\tif ( propName !== 'a' ) currentNode[ propName ] = propValue;\n\t\t\t\telse currentNode.a = propValue;\n\n\t\t\t}\n\n\t\t\tthis.setCurrentProp( currentNode, propName );\n\n\t\t\t// convert string to array, unless it ends in ',' in which case more will be added to it\n\t\t\tif ( propName === 'a' && propValue.slice( - 1 ) !== ',' ) {\n\n\t\t\t\tcurrentNode.a = parseNumberArray( propValue );\n\n\t\t\t}\n\n\t\t},\n\n\t\tparseNodePropertyContinued: function ( line ) {\n\n\t\t\tvar currentNode = this.getCurrentNode();\n\n\t\t\tcurrentNode.a += line;\n\n\t\t\t// if the line doesn't end in ',' we have reached the end of the property value\n\t\t\t// so convert the string to an array\n\t\t\tif ( line.slice( - 1 ) !== ',' ) {\n\n\t\t\t\tcurrentNode.a = parseNumberArray( currentNode.a );\n\n\t\t\t}\n\n\t\t},\n\n\t\t// parse \"Property70\"\n\t\tparseNodeSpecialProperty: function ( line, propName, propValue ) {\n\n\t\t\t// split this\n\t\t\t// P: \"Lcl Scaling\", \"Lcl Scaling\", \"\", \"A\",1,1,1\n\t\t\t// into array like below\n\t\t\t// [\"Lcl Scaling\", \"Lcl Scaling\", \"\", \"A\", \"1,1,1\" ]\n\t\t\tvar props = propValue.split( '\",' ).map( function ( prop ) {\n\n\t\t\t\treturn prop.trim().replace( /^\\\"/, '' ).replace( /\\s/, '_' );\n\n\t\t\t} );\n\n\t\t\tvar innerPropName = props[ 0 ];\n\t\t\tvar innerPropType1 = props[ 1 ];\n\t\t\tvar innerPropType2 = props[ 2 ];\n\t\t\tvar innerPropFlag = props[ 3 ];\n\t\t\tvar innerPropValue = props[ 4 ];\n\n\t\t\t// cast values where needed, otherwise leave as strings\n\t\t\tswitch ( innerPropType1 ) {\n\n\t\t\t\tcase 'int':\n\t\t\t\tcase 'enum':\n\t\t\t\tcase 'bool':\n\t\t\t\tcase 'ULongLong':\n\t\t\t\tcase 'double':\n\t\t\t\tcase 'Number':\n\t\t\t\tcase 'FieldOfView':\n\t\t\t\t\tinnerPropValue = parseFloat( innerPropValue );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'Color':\n\t\t\t\tcase 'ColorRGB':\n\t\t\t\tcase 'Vector3D':\n\t\t\t\tcase 'Lcl_Translation':\n\t\t\t\tcase 'Lcl_Rotation':\n\t\t\t\tcase 'Lcl_Scaling':\n\t\t\t\t\tinnerPropValue = parseNumberArray( innerPropValue );\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\t// CAUTION: these props must append to parent's parent\n\t\t\tthis.getPrevNode()[ innerPropName ] = {\n\n\t\t\t\t'type': innerPropType1,\n\t\t\t\t'type2': innerPropType2,\n\t\t\t\t'flag': innerPropFlag,\n\t\t\t\t'value': innerPropValue\n\n\t\t\t};\n\n\t\t\tthis.setCurrentProp( this.getPrevNode(), innerPropName );\n\n\t\t},\n\n\t};\n\n\t// Parse an FBX file in Binary format\n\tfunction BinaryParser() {}\n\n\tBinaryParser.prototype = {\n\n\t\tconstructor: BinaryParser,\n\n\t\tparse: function ( buffer ) {\n\n\t\t\tvar reader = new BinaryReader( buffer );\n\t\t\treader.skip( 23 ); // skip magic 23 bytes\n\n\t\t\tvar version = reader.getUint32();\n\n\t\t\tconsole.log( 'THREE.FBXLoader: FBX binary version: ' + version );\n\n\t\t\tvar allNodes = new FBXTree();\n\n\t\t\twhile ( ! this.endOfContent( reader ) ) {\n\n\t\t\t\tvar node = this.parseNode( reader, version );\n\t\t\t\tif ( node !== null ) allNodes.add( node.name, node );\n\n\t\t\t}\n\n\t\t\treturn allNodes;\n\n\t\t},\n\n\t\t// Check if reader has reached the end of content.\n\t\tendOfContent: function ( reader ) {\n\n\t\t\t// footer size: 160bytes + 16-byte alignment padding\n\t\t\t// - 16bytes: magic\n\t\t\t// - padding til 16-byte alignment (at least 1byte?)\n\t\t\t//\t(seems like some exporters embed fixed 15 or 16bytes?)\n\t\t\t// - 4bytes: magic\n\t\t\t// - 4bytes: version\n\t\t\t// - 120bytes: zero\n\t\t\t// - 16bytes: magic\n\t\t\tif ( reader.size() % 16 === 0 ) {\n\n\t\t\t\treturn ( ( reader.getOffset() + 160 + 16 ) & ~ 0xf ) >= reader.size();\n\n\t\t\t} else {\n\n\t\t\t\treturn reader.getOffset() + 160 + 16 >= reader.size();\n\n\t\t\t}\n\n\t\t},\n\n\t\t// recursively parse nodes until the end of the file is reached\n\t\tparseNode: function ( reader, version ) {\n\n\t\t\tvar node = {};\n\n\t\t\t// The first three data sizes depends on version.\n\t\t\tvar endOffset = ( version >= 7500 ) ? reader.getUint64() : reader.getUint32();\n\t\t\tvar numProperties = ( version >= 7500 ) ? reader.getUint64() : reader.getUint32();\n\n\t\t\t// note: do not remove this even if you get a linter warning as it moves the buffer forward\n\t\t\tvar propertyListLen = ( version >= 7500 ) ? reader.getUint64() : reader.getUint32();\n\n\t\t\tvar nameLen = reader.getUint8();\n\t\t\tvar name = reader.getString( nameLen );\n\n\t\t\t// Regards this node as NULL-record if endOffset is zero\n\t\t\tif ( endOffset === 0 ) return null;\n\n\t\t\tvar propertyList = [];\n\n\t\t\tfor ( var i = 0; i < numProperties; i ++ ) {\n\n\t\t\t\tpropertyList.push( this.parseProperty( reader ) );\n\n\t\t\t}\n\n\t\t\t// Regards the first three elements in propertyList as id, attrName, and attrType\n\t\t\tvar id = propertyList.length > 0 ? propertyList[ 0 ] : '';\n\t\t\tvar attrName = propertyList.length > 1 ? propertyList[ 1 ] : '';\n\t\t\tvar attrType = propertyList.length > 2 ? propertyList[ 2 ] : '';\n\n\t\t\t// check if this node represents just a single property\n\t\t\t// like (name, 0) set or (name2, [0, 1, 2]) set of {name: 0, name2: [0, 1, 2]}\n\t\t\tnode.singleProperty = ( numProperties === 1 && reader.getOffset() === endOffset ) ? true : false;\n\n\t\t\twhile ( endOffset > reader.getOffset() ) {\n\n\t\t\t\tvar subNode = this.parseNode( reader, version );\n\n\t\t\t\tif ( subNode !== null ) this.parseSubNode( name, node, subNode );\n\n\t\t\t}\n\n\t\t\tnode.propertyList = propertyList; // raw property list used by parent\n\n\t\t\tif ( typeof id === 'number' ) node.id = id;\n\t\t\tif ( attrName !== '' ) node.attrName = attrName;\n\t\t\tif ( attrType !== '' ) node.attrType = attrType;\n\t\t\tif ( name !== '' ) node.name = name;\n\n\t\t\treturn node;\n\n\t\t},\n\n\t\tparseSubNode: function ( name, node, subNode ) {\n\n\t\t\t// special case: child node is single property\n\t\t\tif ( subNode.singleProperty === true ) {\n\n\t\t\t\tvar value = subNode.propertyList[ 0 ];\n\n\t\t\t\tif ( Array.isArray( value ) ) {\n\n\t\t\t\t\tnode[ subNode.name ] = subNode;\n\n\t\t\t\t\tsubNode.a = value;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tnode[ subNode.name ] = value;\n\n\t\t\t\t}\n\n\t\t\t} else if ( name === 'Connections' && subNode.name === 'C' ) {\n\n\t\t\t\tvar array = [];\n\n\t\t\t\tsubNode.propertyList.forEach( function ( property, i ) {\n\n\t\t\t\t\t// first Connection is FBX type (OO, OP, etc.). We'll discard these\n\t\t\t\t\tif ( i !== 0 ) array.push( property );\n\n\t\t\t\t} );\n\n\t\t\t\tif ( node.connections === undefined ) {\n\n\t\t\t\t\tnode.connections = [];\n\n\t\t\t\t}\n\n\t\t\t\tnode.connections.push( array );\n\n\t\t\t} else if ( subNode.name === 'Properties70' ) {\n\n\t\t\t\tvar keys = Object.keys( subNode );\n\n\t\t\t\tkeys.forEach( function ( key ) {\n\n\t\t\t\t\tnode[ key ] = subNode[ key ];\n\n\t\t\t\t} );\n\n\t\t\t} else if ( name === 'Properties70' && subNode.name === 'P' ) {\n\n\t\t\t\tvar innerPropName = subNode.propertyList[ 0 ];\n\t\t\t\tvar innerPropType1 = subNode.propertyList[ 1 ];\n\t\t\t\tvar innerPropType2 = subNode.propertyList[ 2 ];\n\t\t\t\tvar innerPropFlag = subNode.propertyList[ 3 ];\n\t\t\t\tvar innerPropValue;\n\n\t\t\t\tif ( innerPropName.indexOf( 'Lcl ' ) === 0 ) innerPropName = innerPropName.replace( 'Lcl ', 'Lcl_' );\n\t\t\t\tif ( innerPropType1.indexOf( 'Lcl ' ) === 0 ) innerPropType1 = innerPropType1.replace( 'Lcl ', 'Lcl_' );\n\n\t\t\t\tif ( innerPropType1 === 'Color' || innerPropType1 === 'ColorRGB' || innerPropType1 === 'Vector' || innerPropType1 === 'Vector3D' || innerPropType1.indexOf( 'Lcl_' ) === 0 ) {\n\n\t\t\t\t\tinnerPropValue = [\n\t\t\t\t\t\tsubNode.propertyList[ 4 ],\n\t\t\t\t\t\tsubNode.propertyList[ 5 ],\n\t\t\t\t\t\tsubNode.propertyList[ 6 ]\n\t\t\t\t\t];\n\n\t\t\t\t} else {\n\n\t\t\t\t\tinnerPropValue = subNode.propertyList[ 4 ];\n\n\t\t\t\t}\n\n\t\t\t\t// this will be copied to parent, see above\n\t\t\t\tnode[ innerPropName ] = {\n\n\t\t\t\t\t'type': innerPropType1,\n\t\t\t\t\t'type2': innerPropType2,\n\t\t\t\t\t'flag': innerPropFlag,\n\t\t\t\t\t'value': innerPropValue\n\n\t\t\t\t};\n\n\t\t\t} else if ( node[ subNode.name ] === undefined ) {\n\n\t\t\t\tif ( typeof subNode.id === 'number' ) {\n\n\t\t\t\t\tnode[ subNode.name ] = {};\n\t\t\t\t\tnode[ subNode.name ][ subNode.id ] = subNode;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tnode[ subNode.name ] = subNode;\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tif ( subNode.name === 'PoseNode' ) {\n\n\t\t\t\t\tif ( ! Array.isArray( node[ subNode.name ] ) ) {\n\n\t\t\t\t\t\tnode[ subNode.name ] = [ node[ subNode.name ] ];\n\n\t\t\t\t\t}\n\n\t\t\t\t\tnode[ subNode.name ].push( subNode );\n\n\t\t\t\t} else if ( node[ subNode.name ][ subNode.id ] === undefined ) {\n\n\t\t\t\t\tnode[ subNode.name ][ subNode.id ] = subNode;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t},\n\n\t\tparseProperty: function ( reader ) {\n\n\t\t\tvar type = reader.getString( 1 );\n\n\t\t\tswitch ( type ) {\n\n\t\t\t\tcase 'C':\n\t\t\t\t\treturn reader.getBoolean();\n\n\t\t\t\tcase 'D':\n\t\t\t\t\treturn reader.getFloat64();\n\n\t\t\t\tcase 'F':\n\t\t\t\t\treturn reader.getFloat32();\n\n\t\t\t\tcase 'I':\n\t\t\t\t\treturn reader.getInt32();\n\n\t\t\t\tcase 'L':\n\t\t\t\t\treturn reader.getInt64();\n\n\t\t\t\tcase 'R':\n\t\t\t\t\tvar length = reader.getUint32();\n\t\t\t\t\treturn reader.getArrayBuffer( length );\n\n\t\t\t\tcase 'S':\n\t\t\t\t\tvar length = reader.getUint32();\n\t\t\t\t\treturn reader.getString( length );\n\n\t\t\t\tcase 'Y':\n\t\t\t\t\treturn reader.getInt16();\n\n\t\t\t\tcase 'b':\n\t\t\t\tcase 'c':\n\t\t\t\tcase 'd':\n\t\t\t\tcase 'f':\n\t\t\t\tcase 'i':\n\t\t\t\tcase 'l':\n\n\t\t\t\t\tvar arrayLength = reader.getUint32();\n\t\t\t\t\tvar encoding = reader.getUint32(); // 0: non-compressed, 1: compressed\n\t\t\t\t\tvar compressedLength = reader.getUint32();\n\n\t\t\t\t\tif ( encoding === 0 ) {\n\n\t\t\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\t\t\tcase 'b':\n\t\t\t\t\t\t\tcase 'c':\n\t\t\t\t\t\t\t\treturn reader.getBooleanArray( arrayLength );\n\n\t\t\t\t\t\t\tcase 'd':\n\t\t\t\t\t\t\t\treturn reader.getFloat64Array( arrayLength );\n\n\t\t\t\t\t\t\tcase 'f':\n\t\t\t\t\t\t\t\treturn reader.getFloat32Array( arrayLength );\n\n\t\t\t\t\t\t\tcase 'i':\n\t\t\t\t\t\t\t\treturn reader.getInt32Array( arrayLength );\n\n\t\t\t\t\t\t\tcase 'l':\n\t\t\t\t\t\t\t\treturn reader.getInt64Array( arrayLength );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( typeof Zlib === 'undefined' ) {\n\n\t\t\t\t\t\tconsole.error( 'THREE.FBXLoader: External library Inflate.min.js required, obtain or import from https://github.com/imaya/zlib.js' );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tvar inflate = new Zlib.Inflate( new Uint8Array( reader.getArrayBuffer( compressedLength ) ) ); // eslint-disable-line no-undef\n\t\t\t\t\tvar reader2 = new BinaryReader( inflate.decompress().buffer );\n\n\t\t\t\t\tswitch ( type ) {\n\n\t\t\t\t\t\tcase 'b':\n\t\t\t\t\t\tcase 'c':\n\t\t\t\t\t\t\treturn reader2.getBooleanArray( arrayLength );\n\n\t\t\t\t\t\tcase 'd':\n\t\t\t\t\t\t\treturn reader2.getFloat64Array( arrayLength );\n\n\t\t\t\t\t\tcase 'f':\n\t\t\t\t\t\t\treturn reader2.getFloat32Array( arrayLength );\n\n\t\t\t\t\t\tcase 'i':\n\t\t\t\t\t\t\treturn reader2.getInt32Array( arrayLength );\n\n\t\t\t\t\t\tcase 'l':\n\t\t\t\t\t\t\treturn reader2.getInt64Array( arrayLength );\n\n\t\t\t\t\t}\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error( 'THREE.FBXLoader: Unknown property type ' + type );\n\n\t\t\t}\n\n\t\t}\n\n\t};\n\n\tfunction BinaryReader( buffer, littleEndian ) {\n\n\t\tthis.dv = new DataView( buffer );\n\t\tthis.offset = 0;\n\t\tthis.littleEndian = ( littleEndian !== undefined ) ? littleEndian : true;\n\n\t}\n\n\tBinaryReader.prototype = {\n\n\t\tconstructor: BinaryReader,\n\n\t\tgetOffset: function () {\n\n\t\t\treturn this.offset;\n\n\t\t},\n\n\t\tsize: function () {\n\n\t\t\treturn this.dv.buffer.byteLength;\n\n\t\t},\n\n\t\tskip: function ( length ) {\n\n\t\t\tthis.offset += length;\n\n\t\t},\n\n\t\t// seems like true/false representation depends on exporter.\n\t\t// true: 1 or 'Y'(=0x59), false: 0 or 'T'(=0x54)\n\t\t// then sees LSB.\n\t\tgetBoolean: function () {\n\n\t\t\treturn ( this.getUint8() & 1 ) === 1;\n\n\t\t},\n\n\t\tgetBooleanArray: function ( size ) {\n\n\t\t\tvar a = [];\n\n\t\t\tfor ( var i = 0; i < size; i ++ ) {\n\n\t\t\t\ta.push( this.getBoolean() );\n\n\t\t\t}\n\n\t\t\treturn a;\n\n\t\t},\n\n\t\tgetUint8: function () {\n\n\t\t\tvar value = this.dv.getUint8( this.offset );\n\t\t\tthis.offset += 1;\n\t\t\treturn value;\n\n\t\t},\n\n\t\tgetInt16: function () {\n\n\t\t\tvar value = this.dv.getInt16( this.offset, this.littleEndian );\n\t\t\tthis.offset += 2;\n\t\t\treturn value;\n\n\t\t},\n\n\t\tgetInt32: function () {\n\n\t\t\tvar value = this.dv.getInt32( this.offset, this.littleEndian );\n\t\t\tthis.offset += 4;\n\t\t\treturn value;\n\n\t\t},\n\n\t\tgetInt32Array: function ( size ) {\n\n\t\t\tvar a = [];\n\n\t\t\tfor ( var i = 0; i < size; i ++ ) {\n\n\t\t\t\ta.push( this.getInt32() );\n\n\t\t\t}\n\n\t\t\treturn a;\n\n\t\t},\n\n\t\tgetUint32: function () {\n\n\t\t\tvar value = this.dv.getUint32( this.offset, this.littleEndian );\n\t\t\tthis.offset += 4;\n\t\t\treturn value;\n\n\t\t},\n\n\t\t// JavaScript doesn't support 64-bit integer so calculate this here\n\t\t// 1 << 32 will return 1 so using multiply operation instead here.\n\t\t// There's a possibility that this method returns wrong value if the value\n\t\t// is out of the range between Number.MAX_SAFE_INTEGER and Number.MIN_SAFE_INTEGER.\n\t\t// TODO: safely handle 64-bit integer\n\t\tgetInt64: function () {\n\n\t\t\tvar low, high;\n\n\t\t\tif ( this.littleEndian ) {\n\n\t\t\t\tlow = this.getUint32();\n\t\t\t\thigh = this.getUint32();\n\n\t\t\t} else {\n\n\t\t\t\thigh = this.getUint32();\n\t\t\t\tlow = this.getUint32();\n\n\t\t\t}\n\n\t\t\t// calculate negative value\n\t\t\tif ( high & 0x80000000 ) {\n\n\t\t\t\thigh = ~ high & 0xFFFFFFFF;\n\t\t\t\tlow = ~ low & 0xFFFFFFFF;\n\n\t\t\t\tif ( low === 0xFFFFFFFF ) high = ( high + 1 ) & 0xFFFFFFFF;\n\n\t\t\t\tlow = ( low + 1 ) & 0xFFFFFFFF;\n\n\t\t\t\treturn - ( high * 0x100000000 + low );\n\n\t\t\t}\n\n\t\t\treturn high * 0x100000000 + low;\n\n\t\t},\n\n\t\tgetInt64Array: function ( size ) {\n\n\t\t\tvar a = [];\n\n\t\t\tfor ( var i = 0; i < size; i ++ ) {\n\n\t\t\t\ta.push( this.getInt64() );\n\n\t\t\t}\n\n\t\t\treturn a;\n\n\t\t},\n\n\t\t// Note: see getInt64() comment\n\t\tgetUint64: function () {\n\n\t\t\tvar low, high;\n\n\t\t\tif ( this.littleEndian ) {\n\n\t\t\t\tlow = this.getUint32();\n\t\t\t\thigh = this.getUint32();\n\n\t\t\t} else {\n\n\t\t\t\thigh = this.getUint32();\n\t\t\t\tlow = this.getUint32();\n\n\t\t\t}\n\n\t\t\treturn high * 0x100000000 + low;\n\n\t\t},\n\n\t\tgetFloat32: function () {\n\n\t\t\tvar value = this.dv.getFloat32( this.offset, this.littleEndian );\n\t\t\tthis.offset += 4;\n\t\t\treturn value;\n\n\t\t},\n\n\t\tgetFloat32Array: function ( size ) {\n\n\t\t\tvar a = [];\n\n\t\t\tfor ( var i = 0; i < size; i ++ ) {\n\n\t\t\t\ta.push( this.getFloat32() );\n\n\t\t\t}\n\n\t\t\treturn a;\n\n\t\t},\n\n\t\tgetFloat64: function () {\n\n\t\t\tvar value = this.dv.getFloat64( this.offset, this.littleEndian );\n\t\t\tthis.offset += 8;\n\t\t\treturn value;\n\n\t\t},\n\n\t\tgetFloat64Array: function ( size ) {\n\n\t\t\tvar a = [];\n\n\t\t\tfor ( var i = 0; i < size; i ++ ) {\n\n\t\t\t\ta.push( this.getFloat64() );\n\n\t\t\t}\n\n\t\t\treturn a;\n\n\t\t},\n\n\t\tgetArrayBuffer: function ( size ) {\n\n\t\t\tvar value = this.dv.buffer.slice( this.offset, this.offset + size );\n\t\t\tthis.offset += size;\n\t\t\treturn value;\n\n\t\t},\n\n\t\tgetString: function ( size ) {\n\n\t\t\t// note: safari 9 doesn't support Uint8Array.indexOf; create intermediate array instead\n\t\t\tvar a = [];\n\n\t\t\tfor ( var i = 0; i < size; i ++ ) {\n\n\t\t\t\ta[ i ] = this.getUint8();\n\n\t\t\t}\n\n\t\t\tvar nullByte = a.indexOf( 0 );\n\t\t\tif ( nullByte >= 0 ) a = a.slice( 0, nullByte );\n\n\t\t\treturn THREE.LoaderUtils.decodeText( new Uint8Array( a ) );\n\n\t\t}\n\n\t};\n\n\t// FBXTree holds a representation of the FBX data, returned by the TextParser ( FBX ASCII format)\n\t// and BinaryParser( FBX Binary format)\n\tfunction FBXTree() {}\n\n\tFBXTree.prototype = {\n\n\t\tconstructor: FBXTree,\n\n\t\tadd: function ( key, val ) {\n\n\t\t\tthis[ key ] = val;\n\n\t\t},\n\n\t};\n\n\t// ************** UTILITY FUNCTIONS **************\n\n\tfunction isFbxFormatBinary( buffer ) {\n\n\t\tvar CORRECT = 'Kaydara FBX Binary  \\0';\n\n\t\treturn buffer.byteLength >= CORRECT.length && CORRECT === convertArrayBufferToString( buffer, 0, CORRECT.length );\n\n\t}\n\n\tfunction isFbxFormatASCII( text ) {\n\n\t\tvar CORRECT = [ 'K', 'a', 'y', 'd', 'a', 'r', 'a', '\\\\', 'F', 'B', 'X', '\\\\', 'B', 'i', 'n', 'a', 'r', 'y', '\\\\', '\\\\' ];\n\n\t\tvar cursor = 0;\n\n\t\tfunction read( offset ) {\n\n\t\t\tvar result = text[ offset - 1 ];\n\t\t\ttext = text.slice( cursor + offset );\n\t\t\tcursor ++;\n\t\t\treturn result;\n\n\t\t}\n\n\t\tfor ( var i = 0; i < CORRECT.length; ++ i ) {\n\n\t\t\tvar num = read( 1 );\n\t\t\tif ( num === CORRECT[ i ] ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\tfunction getFbxVersion( text ) {\n\n\t\tvar versionRegExp = /FBXVersion: (\\d+)/;\n\t\tvar match = text.match( versionRegExp );\n\t\tif ( match ) {\n\n\t\t\tvar version = parseInt( match[ 1 ] );\n\t\t\treturn version;\n\n\t\t}\n\t\tthrow new Error( 'THREE.FBXLoader: Cannot find the version number for the file given.' );\n\n\t}\n\n\t// Converts FBX ticks into real time seconds.\n\tfunction convertFBXTimeToSeconds( time ) {\n\n\t\treturn time / 46186158000;\n\n\t}\n\n\tvar dataArray = [];\n\n\t// extracts the data from the correct position in the FBX array based on indexing type\n\tfunction getData( polygonVertexIndex, polygonIndex, vertexIndex, infoObject ) {\n\n\t\tvar index;\n\n\t\tswitch ( infoObject.mappingType ) {\n\n\t\t\tcase 'ByPolygonVertex' :\n\t\t\t\tindex = polygonVertexIndex;\n\t\t\t\tbreak;\n\t\t\tcase 'ByPolygon' :\n\t\t\t\tindex = polygonIndex;\n\t\t\t\tbreak;\n\t\t\tcase 'ByVertice' :\n\t\t\t\tindex = vertexIndex;\n\t\t\t\tbreak;\n\t\t\tcase 'AllSame' :\n\t\t\t\tindex = infoObject.indices[ 0 ];\n\t\t\t\tbreak;\n\t\t\tdefault :\n\t\t\t\tconsole.warn( 'THREE.FBXLoader: unknown attribute mapping type ' + infoObject.mappingType );\n\n\t\t}\n\n\t\tif ( infoObject.referenceType === 'IndexToDirect' ) index = infoObject.indices[ index ];\n\n\t\tvar from = index * infoObject.dataSize;\n\t\tvar to = from + infoObject.dataSize;\n\n\t\treturn slice( dataArray, infoObject.buffer, from, to );\n\n\t}\n\n\tvar tempMat = new THREE.Matrix4();\n\tvar tempEuler = new THREE.Euler();\n\tvar tempVec = new THREE.Vector3();\n\tvar translation = new THREE.Vector3();\n\tvar rotation = new THREE.Matrix4();\n\n\t// generate transformation from FBX transform data\n\t// ref: https://help.autodesk.com/view/FBX/2017/ENU/?guid=__files_GUID_10CDD63C_79C1_4F2D_BB28_AD2BE65A02ED_htm\n\t// transformData = {\n\t//\t eulerOrder: int,\n\t//\t translation: [],\n\t//   rotationOffset: [],\n\t//\t preRotation\n\t//\t rotation\n\t//\t postRotation\n\t//   scale\n\t// }\n\t// all entries are optional\n\tfunction generateTransform( transformData ) {\n\n\t\tvar transform = new THREE.Matrix4();\n\t\ttranslation.set( 0, 0, 0 );\n\t\trotation.identity();\n\n\t\tvar order = ( transformData.eulerOrder ) ? getEulerOrder( transformData.eulerOrder ) : getEulerOrder( 0 );\n\n\t\tif ( transformData.translation ) translation.fromArray( transformData.translation );\n\t\tif ( transformData.rotationOffset ) translation.add( tempVec.fromArray( transformData.rotationOffset ) );\n\n\t\tif ( transformData.rotation ) {\n\n\t\t\tvar array = transformData.rotation.map( THREE.Math.degToRad );\n\t\t\tarray.push( order );\n\t\t\trotation.makeRotationFromEuler( tempEuler.fromArray( array ) );\n\n\t\t}\n\n\t\tif ( transformData.preRotation ) {\n\n\t\t\tvar array = transformData.preRotation.map( THREE.Math.degToRad );\n\t\t\tarray.push( order );\n\t\t\ttempMat.makeRotationFromEuler( tempEuler.fromArray( array ) );\n\n\t\t\trotation.premultiply( tempMat );\n\n\t\t}\n\n\t\tif ( transformData.postRotation ) {\n\n\t\t\tvar array = transformData.postRotation.map( THREE.Math.degToRad );\n\t\t\tarray.push( order );\n\t\t\ttempMat.makeRotationFromEuler( tempEuler.fromArray( array ) );\n\n\t\t\ttempMat.getInverse( tempMat );\n\n\t\t\trotation.multiply( tempMat );\n\n\t\t}\n\n\t\tif ( transformData.scale ) transform.scale( tempVec.fromArray( transformData.scale ) );\n\n\t\ttransform.setPosition( translation );\n\t\ttransform.multiply( rotation );\n\n\t\treturn transform;\n\n\t}\n\n\t// Returns the three.js intrinsic Euler order corresponding to FBX extrinsic Euler order\n\t// ref: http://help.autodesk.com/view/FBX/2017/ENU/?guid=__cpp_ref_class_fbx_euler_html\n\tfunction getEulerOrder( order ) {\n\n\t\tvar enums = [\n\t\t\t'ZYX', // -> XYZ extrinsic\n\t\t\t'YZX', // -> XZY extrinsic\n\t\t\t'XZY', // -> YZX extrinsic\n\t\t\t'ZXY', // -> YXZ extrinsic\n\t\t\t'YXZ', // -> ZXY extrinsic\n\t\t\t'XYZ', // -> ZYX extrinsic\n\t\t//'SphericXYZ', // not possible to support\n\t\t];\n\n\t\tif ( order === 6 ) {\n\n\t\t\tconsole.warn( 'THREE.FBXLoader: unsupported Euler Order: Spherical XYZ. Animations and rotations may be incorrect.' );\n\t\t\treturn enums[ 0 ];\n\n\t\t}\n\n\t\treturn enums[ order ];\n\n\t}\n\n\t// Parses comma separated list of numbers and returns them an array.\n\t// Used internally by the TextParser\n\tfunction parseNumberArray( value ) {\n\n\t\tvar array = value.split( ',' ).map( function ( val ) {\n\n\t\t\treturn parseFloat( val );\n\n\t\t} );\n\n\t\treturn array;\n\n\t}\n\n\tfunction convertArrayBufferToString( buffer, from, to ) {\n\n\t\tif ( from === undefined ) from = 0;\n\t\tif ( to === undefined ) to = buffer.byteLength;\n\n\t\treturn THREE.LoaderUtils.decodeText( new Uint8Array( buffer, from, to ) );\n\n\t}\n\n\tfunction append( a, b ) {\n\n\t\tfor ( var i = 0, j = a.length, l = b.length; i < l; i ++, j ++ ) {\n\n\t\t\ta[ j ] = b[ i ];\n\n\t\t}\n\n\t}\n\n\tfunction slice( a, b, from, to ) {\n\n\t\tfor ( var i = from, j = 0; i < to; i ++, j ++ ) {\n\n\t\t\ta[ j ] = b[ i ];\n\n\t\t}\n\n\t\treturn a;\n\n\t}\n\n\t// inject array a2 into array a1 at index\n\tfunction inject( a1, index, a2 ) {\n\n\t\treturn a1.slice( 0, index ).concat( a2 ).concat( a1.slice( index ) );\n\n\t}\n\n\treturn FBXLoader;\n\n} )();\n","const fetchScript = require('../../lib/fetch-script')();\n\nconst LOADER_SRC = 'https://rawgit.com/mrdoob/three.js/r86/examples/js/loaders/GLTFLoader.js';\n\nconst loadLoader = (function () {\n  let promise;\n  return function () {\n    promise = promise || fetchScript(LOADER_SRC);\n    return promise;\n  };\n}());\n\n/**\n * Legacy loader for glTF 1.0 models.\n * Asynchronously loads THREE.GLTFLoader from rawgit.\n */\nmodule.exports = AFRAME.registerComponent('gltf-model-legacy', {\n  schema: {type: 'model'},\n\n  init: function () {\n    this.model = null;\n    this.loader = null;\n    this.loaderPromise = loadLoader().then(() => {\n      this.loader = new THREE.GLTFLoader();\n      this.loader.setCrossOrigin('Anonymous');\n    });\n  },\n\n  update: function () {\n    const self = this;\n    const el = this.el;\n    const src = this.data;\n\n    if (!src) { return; }\n\n    this.remove();\n\n    this.loaderPromise.then(() => {\n      this.loader.load(src, function gltfLoaded (gltfModel) {\n        self.model = gltfModel.scene;\n        self.model.animations = gltfModel.animations;\n        el.setObject3D('mesh', self.model);\n        el.emit('model-loaded', {format: 'gltf', model: self.model});\n      });\n    });\n  },\n\n  remove: function () {\n    if (!this.model) { return; }\n    this.el.removeObject3D('mesh');\n  }\n});\n","/**\n * Source: https://github.com/Adobe-Marketing-Cloud/fetch-script\n */\n\nfunction getScriptId() {\n  return 'script_' + Date.now() + '_' + Math.ceil(Math.random() * 100000);\n}\n\nfunction createScript(url, id) {\n  var script = document.createElement('script');\n  script.type = 'text/javascript';\n  script.async = true;\n  script.id = id;\n  script.src = url;\n\n  return script;\n}\n\nfunction removeScript(id) {\n  const script = document.getElementById(id);\n  const parent = script.parentNode;\n\n  try {\n    parent && parent.removeChild(script);\n  } catch (e) {\n    // ignore\n  }\n}\n\nfunction appendScript(script) {\n  const firstScript = document.getElementsByTagName('script')[0];\n  firstScript.parentNode.insertBefore(script, firstScript);\n}\n\nfunction fetchScriptInternal(url, options, Promise) {\n  return new Promise(function(resolve, reject) {\n    const timeout = options.timeout || 5000;\n    const scriptId = getScriptId();\n    const script = createScript(url, scriptId);\n\n    const timeoutId = setTimeout(function() {\n      reject(new Error('Script request to ' + url + ' timed out'));\n\n      removeScript(scriptId);\n    }, timeout);\n\n    const disableTimeout = function(timeoutId) { clearTimeout(timeoutId); };\n\n    script.addEventListener('load', function(e) {\n      resolve({ok: true});\n\n      disableTimeout(timeoutId);\n      removeScript(scriptId);\n    });\n\n    script.addEventListener('error', function(e) {\n      reject(new Error('Script request to ' + url + ' failed ' + e));\n\n      disableTimeout(timeoutId);\n      removeScript(scriptId);\n    });\n\n    appendScript(script);\n  });\n}\n\nfunction fetchScript(settings) {\n  settings = settings || {};\n  return function (url, options) {\n    options = options || {};\n    return fetchScriptInternal(url, options, settings.Promise || Promise);\n  };\n}\n\nmodule.exports = fetchScript;\n","/**\n * object-model\n *\n * Loader for THREE.js JSON format. Somewhat confusingly, there are two different THREE.js formats,\n * both having the .json extension. This loader supports only THREE.ObjectLoader, which typically\n * includes multiple meshes or an entire scene.\n *\n * Check the console for errors, if in doubt. You may need to use `json-model` or\n * `blend-character-model` for some .js and .json files.\n *\n * See: https://clara.io/learn/user-guide/data_exchange/threejs_export\n */\nmodule.exports = AFRAME.registerComponent('object-model', {\n  schema: {\n    src:         { type: 'asset' },\n    crossorigin: { default: '' }\n  },\n\n  init: function () {\n    this.model = null;\n  },\n\n  update: function () {\n    let loader;\n    const data = this.data;\n    if (!data.src) return;\n\n    this.remove();\n    loader = new THREE.ObjectLoader();\n    if (data.crossorigin) loader.setCrossOrigin(data.crossorigin);\n    loader.load(data.src, (object) => {\n\n      // Enable skinning, if applicable.\n      object.traverse((o) => {\n        if (o instanceof THREE.SkinnedMesh && o.material) {\n          o.material.skinning = !!((o.geometry && o.geometry.bones) || []).length;\n        }\n      });\n\n      this.load(object);\n    });\n  },\n\n  load: function (model) {\n    this.model = model;\n    this.el.setObject3D('mesh', model);\n    this.el.emit('model-loaded', {format: 'json', model: model});\n  },\n\n  remove: function () {\n    if (this.model) this.el.removeObject3D('mesh');\n  }\n});\n","require('./checkpoint');\nrequire('./cube-env-map');\nrequire('./grab');\nrequire('./jump-ability');\nrequire('./kinematic-body');\nrequire('./mesh-smooth');\nrequire('./normal-material');\nrequire('./sphere-collider');\n","module.exports = AFRAME.registerComponent('checkpoint', {\n  schema: {\n    offset: {default: {x: 0, y: 0, z: 0}, type: 'vec3'}\n  },\n\n  init: function () {\n    this.active = false;\n    this.targetEl = null;\n    this.fire = this.fire.bind(this);\n    this.offset = new THREE.Vector3();\n  },\n\n  update: function () {\n    this.offset.copy(this.data.offset);\n  },\n\n  play: function () { this.el.addEventListener('click', this.fire); },\n  pause: function () { this.el.removeEventListener('click', this.fire); },\n  remove: function () { this.pause(); },\n\n  fire: function () {\n    const targetEl = this.el.sceneEl.querySelector('[checkpoint-controls]');\n    if (!targetEl) {\n      throw new Error('No `checkpoint-controls` component found.');\n    }\n    targetEl.components['checkpoint-controls'].setCheckpoint(this.el);\n  },\n\n  getOffset: function () {\n    return this.offset.copy(this.data.offset);\n  }\n});\n","/**\n * @param  {Array<THREE.Material>|THREE.Material} material\n * @return {Array<THREE.Material>}\n */\nfunction ensureMaterialArray (material) {\n  if (!material) {\n    return [];\n  } else if (Array.isArray(material)) {\n    return material;\n  } else if (material.materials) {\n    return material.materials;\n  } else {\n    return [material];\n  }\n}\n\n/**\n * @param  {THREE.Object3D} mesh\n * @param  {Array<string>} materialNames\n * @param  {THREE.Texture} envMap\n * @param  {number} reflectivity  [description]\n */\nfunction applyEnvMap (mesh, materialNames, envMap, reflectivity) {\n  if (!mesh) return;\n\n  materialNames = materialNames || [];\n\n  mesh.traverse((node) => {\n\n    if (!node.isMesh) return;\n\n    const meshMaterials = ensureMaterialArray(node.material);\n\n    meshMaterials.forEach((material) => {\n\n      if (material && !('envMap' in material)) return;\n      if (materialNames.length && materialNames.indexOf(material.name) === -1) return;\n\n      material.envMap = envMap;\n      material.reflectivity = reflectivity;\n      material.needsUpdate = true;\n\n    });\n\n  });\n}\n\n/**\n * Specifies an envMap on an entity, without replacing any existing material\n * properties.\n */\nmodule.exports = AFRAME.registerComponent('cube-env-map', {\n  multiple: true,\n\n  schema: {\n    path: {default: ''},\n    extension: {default: 'jpg', oneOf: ['jpg', 'png']},\n    format: {default: 'RGBFormat', oneOf: ['RGBFormat', 'RGBAFormat']},\n    enableBackground: {default: false},\n    reflectivity: {default: 1, min: 0, max: 1},\n    materials: {default: []}\n  },\n\n  init: function () {\n    const data = this.data;\n\n    this.texture = new THREE.CubeTextureLoader().load([\n      data.path + 'posx.' + data.extension, data.path + 'negx.' + data.extension,\n      data.path + 'posy.' + data.extension, data.path + 'negy.' + data.extension,\n      data.path + 'posz.' + data.extension, data.path + 'negz.' + data.extension\n    ]);\n    this.texture.format = THREE[data.format];\n\n    this.object3dsetHandler = () => {\n      const mesh = this.el.getObject3D('mesh');\n      const data = this.data;\n      applyEnvMap(mesh, data.materials, this.texture, data.reflectivity);\n    };\n    this.el.addEventListener('object3dset', this.object3dsetHandler);\n  },\n\n  update: function (oldData) {\n    const data = this.data;\n    const mesh = this.el.getObject3D('mesh');\n\n    let addedMaterialNames = [];\n    let removedMaterialNames = [];\n\n    if (data.materials.length) {\n      if (oldData.materials) {\n        addedMaterialNames = data.materials.filter((name) => !oldData.materials.includes(name));\n        removedMaterialNames = oldData.materials.filter((name) => !data.materials.includes(name));\n      } else {\n        addedMaterialNames = data.materials;\n      }\n    }\n    if (addedMaterialNames.length) {\n      applyEnvMap(mesh, addedMaterialNames, this.texture, data.reflectivity);\n    }\n    if (removedMaterialNames.length) {\n      applyEnvMap(mesh, removedMaterialNames, null, 1);\n    }\n\n    if (oldData.materials && data.reflectivity !== oldData.reflectivity) {\n      const maintainedMaterialNames = data.materials\n        .filter((name) => oldData.materials.includes(name));\n      if (maintainedMaterialNames.length) {\n        applyEnvMap(mesh, maintainedMaterialNames, this.texture, data.reflectivity);\n      }\n    }\n\n    if (this.data.enableBackground && !oldData.enableBackground) {\n      this.setBackground(this.texture);\n    } else if (!this.data.enableBackground && oldData.enableBackground) {\n      this.setBackground(null);\n    }\n  },\n\n  remove: function () {\n    this.el.removeEventListener('object3dset', this.object3dsetHandler);\n    const mesh = this.el.getObject3D('mesh');\n    const data = this.data;\n\n    applyEnvMap(mesh, data.materials, null, 1);\n    if (data.enableBackground) this.setBackground(null);\n  },\n\n  setBackground: function (texture) {\n    this.el.sceneEl.object3D.background = texture;\n  }\n});\n","/* global CANNON */\n\n/**\n * Based on aframe/examples/showcase/tracked-controls.\n *\n * Handles events coming from the hand-controls.\n * Determines if the entity is grabbed or released.\n * Updates its position to move along the controller.\n */\nmodule.exports = AFRAME.registerComponent('grab', {\n  init: function () {\n    this.system = this.el.sceneEl.systems.physics;\n\n    this.GRABBED_STATE = 'grabbed';\n\n    this.grabbing = false;\n    this.hitEl =      /** @type {AFRAME.Element}    */ null;\n    this.physics =    /** @type {AFRAME.System}     */ this.el.sceneEl.systems.physics;\n    this.constraint = /** @type {CANNON.Constraint} */ null;\n\n    // Bind event handlers\n    this.onHit = this.onHit.bind(this);\n    this.onGripOpen = this.onGripOpen.bind(this);\n    this.onGripClose = this.onGripClose.bind(this);\n  },\n\n  play: function () {\n    const el = this.el;\n    el.addEventListener('hit', this.onHit);\n    el.addEventListener('gripdown', this.onGripClose);\n    el.addEventListener('gripup', this.onGripOpen);\n    el.addEventListener('trackpaddown', this.onGripClose);\n    el.addEventListener('trackpadup', this.onGripOpen);\n    el.addEventListener('triggerdown', this.onGripClose);\n    el.addEventListener('triggerup', this.onGripOpen);\n  },\n\n  pause: function () {\n    const el = this.el;\n    el.removeEventListener('hit', this.onHit);\n    el.removeEventListener('gripdown', this.onGripClose);\n    el.removeEventListener('gripup', this.onGripOpen);\n    el.removeEventListener('trackpaddown', this.onGripClose);\n    el.removeEventListener('trackpadup', this.onGripOpen);\n    el.removeEventListener('triggerdown', this.onGripClose);\n    el.removeEventListener('triggerup', this.onGripOpen);\n  },\n\n  onGripClose: function () {\n    this.grabbing = true;\n  },\n\n  onGripOpen: function () {\n    const hitEl = this.hitEl;\n    this.grabbing = false;\n    if (!hitEl) { return; }\n    hitEl.removeState(this.GRABBED_STATE);\n    this.hitEl = undefined;\n    this.system.removeConstraint(this.constraint);\n    this.constraint = null;\n  },\n\n  onHit: function (evt) {\n    const hitEl = evt.detail.el;\n    // If the element is already grabbed (it could be grabbed by another controller).\n    // If the hand is not grabbing the element does not stick.\n    // If we're already grabbing something you can't grab again.\n    if (!hitEl || hitEl.is(this.GRABBED_STATE) || !this.grabbing || this.hitEl) { return; }\n    hitEl.addState(this.GRABBED_STATE);\n    this.hitEl = hitEl;\n    this.constraint = new CANNON.LockConstraint(this.el.body, hitEl.body);\n    this.system.addConstraint(this.constraint);\n  }\n});\n","const ACCEL_G = -9.8, // m/s^2\n    EASING = -15; // m/s^2\n\n/**\n * Jump ability.\n */\nmodule.exports = AFRAME.registerComponent('jump-ability', {\n  dependencies: ['velocity'],\n\n  /* Schema\n  ——————————————————————————————————————————————*/\n\n  schema: {\n    on: { default: 'keydown:Space gamepadbuttondown:0' },\n    playerHeight: { default: 1.764 },\n    maxJumps: { default: 1 },\n    distance: { default: 5 },\n    debug: { default: false }\n  },\n\n  init: function () {\n    this.velocity = 0;\n    this.numJumps = 0;\n\n    const beginJump = this.beginJump.bind(this),\n        events = this.data.on.split(' ');\n    this.bindings = {};\n    for (let i = 0; i <  events.length; i++) {\n      this.bindings[events[i]] = beginJump;\n      this.el.addEventListener(events[i], beginJump);\n    }\n    this.bindings.collide = this.onCollide.bind(this);\n    this.el.addEventListener('collide', this.bindings.collide);\n  },\n\n  remove: function () {\n    for (var event in this.bindings) {\n      if (this.bindings.hasOwnProperty(event)) {\n        this.el.removeEventListener(event, this.bindings[event]);\n        delete this.bindings[event];\n      }\n    }\n    this.el.removeEventListener('collide', this.bindings.collide);\n    delete this.bindings.collide;\n  },\n\n  beginJump: function () {\n    if (this.numJumps < this.data.maxJumps) {\n      const data = this.data,\n          initialVelocity = Math.sqrt(-2 * data.distance * (ACCEL_G + EASING)),\n          v = this.el.getAttribute('velocity');\n      this.el.setAttribute('velocity', {x: v.x, y: initialVelocity, z: v.z});\n      this.numJumps++;\n      this.el.emit('jumpstart');\n    }\n  },\n\n  onCollide: function () {\n    if (this.numJumps > 0) this.el.emit('jumpend');\n    this.numJumps = 0;\n  }\n});\n","/* global CANNON */\n\n/**\n * Kinematic body.\n *\n * Managed dynamic body, which moves but is not affected (directly) by the\n * physics engine. This is not a true kinematic body, in the sense that we are\n * letting the physics engine _compute_ collisions against it and selectively\n * applying those collisions to the object. The physics engine does not decide\n * the position/velocity/rotation of the element.\n *\n * Used for the camera object, because full physics simulation would create\n * movement that feels unnatural to the player. Bipedal movement does not\n * translate nicely to rigid body physics.\n *\n * See: http://www.learn-cocos2d.com/2013/08/physics-engine-platformer-terrible-idea/\n * And: http://oxleygamedev.blogspot.com/2011/04/player-physics-part-2.html\n */\nconst EPS = 0.000001;\n\nmodule.exports = AFRAME.registerComponent('kinematic-body', {\n  dependencies: ['velocity'],\n\n  /*******************************************************************\n   * Schema\n   */\n\n  schema: {\n    mass:           { default: 5 },\n    radius:         { default: 1.3 },\n    linearDamping:  { default: 0.05 },\n    enableSlopes:   { default: true },\n    enableJumps:    { default: false },\n  },\n\n  /*******************************************************************\n   * Lifecycle\n   */\n\n  init: function () {\n    this.system = this.el.sceneEl.systems.physics;\n    this.system.addComponent(this);\n\n    const el = this.el,\n        data = this.data,\n        position = (new CANNON.Vec3()).copy(el.object3D.getWorldPosition(new THREE.Vector3()));\n\n    this.body = new CANNON.Body({\n      material: this.system.getMaterial('staticMaterial'),\n      position: position,\n      mass: data.mass,\n      linearDamping: data.linearDamping,\n      fixedRotation: true\n    });\n    this.body.addShape(\n      new CANNON.Sphere(data.radius),\n      new CANNON.Vec3(0, data.radius, 0)\n    );\n\n    this.body.el = this.el;\n    this.el.body = this.body;\n    this.system.addBody(this.body);\n\n    if (el.hasAttribute('wasd-controls')) {\n      console.warn('[kinematic-body] Not compatible with wasd-controls, use movement-controls.');\n    }\n  },\n\n  remove: function () {\n    this.system.removeBody(this.body);\n    this.system.removeComponent(this);\n    delete this.el.body;\n  },\n\n  /*******************************************************************\n   * Update\n   */\n\n  /**\n   * Checks CANNON.World for collisions and attempts to apply them to the\n   * element automatically, in a player-friendly way.\n   *\n   * There's extra logic for horizontal surfaces here. The basic requirements:\n   * (1) Only apply gravity when not in contact with _any_ horizontal surface.\n   * (2) When moving, project the velocity against exactly one ground surface.\n   *     If in contact with two ground surfaces (e.g. ground + ramp), choose\n   *     the one that collides with current velocity, if any.\n   */\n  beforeStep: function (t, dt) {\n    if (!dt) return;\n\n    const el = this.el;\n    const data = this.data\n    const body = this.body;\n\n    if (!data.enableJumps) body.velocity.set(0, 0, 0);\n    body.position.copy(el.getAttribute('position'));\n  },\n\n  step: (function () {\n    const velocity = new THREE.Vector3(),\n        normalizedVelocity = new THREE.Vector3(),\n        currentSurfaceNormal = new THREE.Vector3(),\n        groundNormal = new THREE.Vector3();\n\n    return function (t, dt) {\n      if (!dt) return;\n\n      let body = this.body,\n          data = this.data,\n          didCollide = false,\n          height, groundHeight = -Infinity,\n          groundBody,\n          contacts = this.system.getContacts();\n\n      dt = Math.min(dt, this.system.data.maxInterval * 1000);\n\n      groundNormal.set(0, 0, 0);\n      velocity.copy(this.el.getAttribute('velocity'));\n      body.velocity.copy(velocity);\n\n      for (var i = 0, contact; contact = contacts[i]; i++) {\n        // 1. Find any collisions involving this element. Get the contact\n        // normal, and make sure it's oriented _out_ of the other object and\n        // enabled (body.collisionReponse is true for both bodies)\n        if (!contact.enabled) { continue; }\n        if (body.id === contact.bi.id) {\n          contact.ni.negate(currentSurfaceNormal);\n        } else if (body.id === contact.bj.id) {\n          currentSurfaceNormal.copy(contact.ni);\n        } else {\n          continue;\n        }\n\n        didCollide = body.velocity.dot(currentSurfaceNormal) < -EPS;\n        if (didCollide && currentSurfaceNormal.y <= 0.5) {\n          // 2. If current trajectory attempts to move _through_ another\n          // object, project the velocity against the collision plane to\n          // prevent passing through.\n          velocity.projectOnPlane(currentSurfaceNormal);\n        } else if (currentSurfaceNormal.y > 0.5) {\n          // 3. If in contact with something roughly horizontal (+/- 45º) then\n          // consider that the current ground. Only the highest qualifying\n          // ground is retained.\n          height = body.id === contact.bi.id\n            ? Math.abs(contact.rj.y + contact.bj.position.y)\n            : Math.abs(contact.ri.y + contact.bi.position.y);\n          if (height > groundHeight) {\n            groundHeight = height;\n            groundNormal.copy(currentSurfaceNormal);\n            groundBody = body.id === contact.bi.id ? contact.bj : contact.bi;\n          }\n        }\n      }\n\n      normalizedVelocity.copy(velocity).normalize();\n      if (groundBody && (!data.enableJumps || normalizedVelocity.y < 0.5)) {\n        if (!data.enableSlopes) {\n          groundNormal.set(0, 1, 0);\n        } else if (groundNormal.y < 1 - EPS) {\n          groundNormal.copy(this.raycastToGround(groundBody, groundNormal));\n        }\n\n        // 4. Project trajectory onto the top-most ground object, unless\n        // trajectory is > 45º.\n        velocity.projectOnPlane(groundNormal);\n\n      } else if (this.system.driver.world) {\n        // 5. If not in contact with anything horizontal, apply world gravity.\n        // TODO - Why is the 4x scalar necessary.\n        // NOTE: Does not work if physics runs on a worker.\n        velocity.add(this.system.driver.world.gravity.scale(dt * 4.0 / 1000));\n      }\n\n      body.velocity.copy(velocity);\n      this.el.setAttribute('velocity', body.velocity);\n      this.el.setAttribute('position', body.position);\n    };\n  }()),\n\n  /**\n   * When walking on complex surfaces (trimeshes, borders between two shapes),\n   * the collision normals returned for the player sphere can be very\n   * inconsistent. To address this, raycast straight down, find the collision\n   * normal, and return whichever normal is more vertical.\n   * @param  {CANNON.Body} groundBody\n   * @param  {CANNON.Vec3} groundNormal\n   * @return {CANNON.Vec3}\n   */\n  raycastToGround: function (groundBody, groundNormal) {\n    let ray,\n        hitNormal,\n        vFrom = this.body.position,\n        vTo = this.body.position.clone();\n\n    ray = new CANNON.Ray(vFrom, vTo);\n    ray._updateDirection(); // TODO - Report bug.\n    ray.intersectBody(groundBody);\n\n    if (!ray.hasHit) return groundNormal;\n\n    // Compare ABS, in case we're projecting against the inside of the face.\n    hitNormal = ray.result.hitNormalWorld;\n    return Math.abs(hitNormal.y) > Math.abs(groundNormal.y) ? hitNormal : groundNormal;\n  }\n});\n","/**\n * Apply this component to models that looks \"blocky\", to have Three.js compute\n * vertex normals on the fly for a \"smoother\" look.\n */\nmodule.exports = AFRAME.registerComponent('mesh-smooth', {\n  init: function () {\n    this.el.addEventListener('model-loaded', (e) => {\n      e.detail.model.traverse((node) => {\n        if (node.isMesh) node.geometry.computeVertexNormals();\n      });\n    });\n  }\n});\n","/**\n * Recursively applies a MeshNormalMaterial to the entity, such that\n * face colors are determined by their orientation. Helpful for\n * debugging geometry\n */\nmodule.exports = AFRAME.registerComponent('normal-material', {\n  init: function () {\n    this.material = new THREE.MeshNormalMaterial({flatShading: true});\n    this.applyMaterial = this.applyMaterial.bind(this);\n    this.el.addEventListener('object3dset', this.applyMaterial);\n  },\n\n  remove: function () {\n    this.el.removeEventListener('object3dset', this.applyMaterial);\n  },\n\n  applyMaterial: function () {\n    this.el.object3D.traverse((node) => {\n      if (node.isMesh) node.material = this.material;\n    });\n  }\n});\n","/**\n * Based on aframe/examples/showcase/tracked-controls.\n *\n * Implement bounding sphere collision detection for entities with a mesh.\n * Sets the specified state on the intersected entities.\n *\n * @property {string} objects - Selector of the entities to test for collision.\n * @property {string} state - State to set on collided entities.\n *\n */\nmodule.exports = AFRAME.registerComponent('sphere-collider', {\n  schema: {\n    objects: {default: ''},\n    state: {default: 'collided'},\n    radius: {default: 0.05},\n    watch: {default: true}\n  },\n\n  init: function () {\n    /** @type {MutationObserver} */\n    this.observer = null;\n    /** @type {Array<Element>} Elements to watch for collisions. */\n    this.els = [];\n    /** @type {Array<Element>} Elements currently in collision state. */\n    this.collisions = [];\n\n    this.handleHit = this.handleHit.bind(this);\n    this.handleHitEnd = this.handleHitEnd.bind(this);\n  },\n\n  remove: function () {\n    this.pause();\n  },\n\n  play: function () {\n    const sceneEl = this.el.sceneEl;\n\n    if (this.data.watch) {\n      this.observer = new MutationObserver(this.update.bind(this, null));\n      this.observer.observe(sceneEl, {childList: true, subtree: true});\n    }\n  },\n\n  pause: function () {\n    if (this.observer) {\n      this.observer.disconnect();\n      this.observer = null;\n    }\n  },\n\n  /**\n   * Update list of entities to test for collision.\n   */\n  update: function () {\n    const data = this.data;\n    let objectEls;\n\n    // Push entities into list of els to intersect.\n    if (data.objects) {\n      objectEls = this.el.sceneEl.querySelectorAll(data.objects);\n    } else {\n      // If objects not defined, intersect with everything.\n      objectEls = this.el.sceneEl.children;\n    }\n    // Convert from NodeList to Array\n    this.els = Array.prototype.slice.call(objectEls);\n  },\n\n  tick: (function () {\n    const position = new THREE.Vector3(),\n        meshPosition = new THREE.Vector3(),\n        colliderScale = new THREE.Vector3(),\n        size = new THREE.Vector3(),\n        box = new THREE.Box3(),\n        distanceMap = new Map();\n    return function () {\n      const el = this.el,\n          data = this.data,\n          mesh = el.getObject3D('mesh'),\n          collisions = [];\n      let colliderRadius;\n\n      if (!mesh) { return; }\n\n      distanceMap.clear();\n      el.object3D.getWorldPosition(position);\n      el.object3D.getWorldScale(colliderScale);\n      colliderRadius = data.radius * scaleFactor(colliderScale);\n      // Update collision list.\n      this.els.forEach(intersect);\n\n      // Emit events and add collision states, in order of distance.\n      collisions\n        .sort((a, b) => distanceMap.get(a) > distanceMap.get(b) ? 1 : -1)\n        .forEach(this.handleHit);\n\n      // Remove collision state from current element.\n      if (collisions.length === 0) { el.emit('hit', {el: null}); }\n\n      // Remove collision state from other elements.\n      this.collisions\n        .filter((el) => !distanceMap.has(el))\n        .forEach(this.handleHitEnd);\n\n      // Store new collisions\n      this.collisions = collisions;\n\n      // Bounding sphere collision detection\n      function intersect (el) {\n        let radius, mesh, distance, extent;\n\n        if (!el.isEntity) { return; }\n\n        mesh = el.getObject3D('mesh');\n\n        if (!mesh) { return; }\n\n        box.setFromObject(mesh).getSize(size);\n        extent = Math.max(size.x, size.y, size.z) / 2;\n        radius = Math.sqrt(2 * extent * extent);\n        box.getCenter(meshPosition);\n\n        if (!radius) { return; }\n\n        distance = position.distanceTo(meshPosition);\n        if (distance < radius + colliderRadius) {\n          collisions.push(el);\n          distanceMap.set(el, distance);\n        }\n      }\n      // use max of scale factors to maintain bounding sphere collision\n      function scaleFactor (scaleVec) {\n        return Math.max.apply(null, scaleVec.toArray());\n      }\n    };\n  })(),\n\n  handleHit: function (targetEl) {\n    targetEl.emit('hit');\n    targetEl.addState(this.data.state);\n    this.el.emit('hit', {el: targetEl});\n  },\n  handleHitEnd: function (targetEl) {\n    targetEl.emit('hitend');\n    targetEl.removeState(this.data.state);\n    this.el.emit('hitend', {el: targetEl});\n  }\n});\n","require('./nav-mesh');\nrequire('./nav-agent');\nrequire('./system');\n","/**\n * nav-mesh\n *\n * Waits for a mesh to be loaded on the current entity, then sets it as the\n * nav mesh in the pathfinding system.\n */\nmodule.exports = AFRAME.registerComponent('nav-mesh', {\n  init: function () {\n    this.system = this.el.sceneEl.systems.nav;\n    this.hasLoadedNavMesh = false;\n    this.el.addEventListener('object3dset', this.loadNavMesh.bind(this));\n  },\n\n  play: function () {\n    if (!this.hasLoadedNavMesh) this.loadNavMesh();\n  },\n\n  loadNavMesh: function () {\n    const object = this.el.getObject3D('mesh');\n    const scene = this.el.sceneEl.object3D;\n\n    if (!object) return;\n\n    let navMesh;\n    object.traverse((node) => {\n      if (node.isMesh) navMesh = node;\n    });\n\n    if (!navMesh) return;\n\n    const navMeshGeometry = navMesh.geometry.isBufferGeometry\n      ? new THREE.Geometry().fromBufferGeometry(navMesh.geometry)\n      : navMesh.geometry.clone();\n\n    scene.updateMatrixWorld();\n    navMeshGeometry.applyMatrix(navMesh.matrixWorld);\n    this.system.setNavMeshGeometry(navMeshGeometry);\n\n    this.hasLoadedNavMesh = true;\n  }\n});\n","module.exports = AFRAME.registerComponent('nav-agent', {\n  schema: {\n    destination: {type: 'vec3'},\n    active: {default: false},\n    speed: {default: 2}\n  },\n  init: function () {\n    this.system = this.el.sceneEl.systems.nav;\n    this.system.addAgent(this);\n    this.group = null;\n    this.path = [];\n    this.raycaster = new THREE.Raycaster();\n  },\n  remove: function () {\n    this.system.removeAgent(this);\n  },\n  update: function () {\n    this.path.length = 0;\n  },\n  updateNavLocation: function () {\n    this.group = null;\n    this.path = [];\n  },\n  tick: (function () {\n    const vDest = new THREE.Vector3();\n    const vDelta = new THREE.Vector3();\n    const vNext = new THREE.Vector3();\n\n    return function (t, dt) {\n      const el = this.el;\n      const data = this.data;\n      const raycaster = this.raycaster;\n      const speed = data.speed * dt / 1000;\n\n      if (!data.active) return;\n\n      // Use PatrolJS pathfinding system to get shortest path to target.\n      if (!this.path.length) {\n        const position = this.el.object3D.position;\n        this.group = this.group || this.system.getGroup(position);\n        this.path = this.system.getPath(position, vDest.copy(data.destination), this.group) || [];\n        el.emit('navigation-start');\n      }\n\n      // If no path is found, exit.\n      if (!this.path.length) {\n        console.warn('[nav] Unable to find path to %o.', data.destination);\n        this.el.setAttribute('nav-agent', {active: false});\n        el.emit('navigation-end');\n        return;\n      }\n\n      // Current segment is a vector from current position to next waypoint.\n      const vCurrent = el.object3D.position;\n      const vWaypoint = this.path[0];\n      vDelta.subVectors(vWaypoint, vCurrent);\n\n      const distance = vDelta.length();\n      let gazeTarget;\n\n      if (distance < speed) {\n        // If <1 step from current waypoint, discard it and move toward next.\n        this.path.shift();\n\n        // After discarding the last waypoint, exit pathfinding.\n        if (!this.path.length) {\n          this.el.setAttribute('nav-agent', {active: false});\n          el.emit('navigation-end');\n          return;\n        }\n\n        vNext.copy(vCurrent);\n        gazeTarget = this.path[0];\n      } else {\n        // If still far away from next waypoint, find next position for\n        // the current frame.\n        vNext.copy(vDelta.setLength(speed)).add(vCurrent);\n        gazeTarget = vWaypoint;\n      }\n\n      // Look at the next waypoint.\n      gazeTarget.y = vCurrent.y;\n      el.object3D.lookAt(gazeTarget);\n\n      // Raycast against the nav mesh, to keep the agent moving along the\n      // ground, not traveling in a straight line from higher to lower waypoints.\n      raycaster.ray.origin.copy(vNext);\n      raycaster.ray.origin.y += 1.5;\n      raycaster.ray.direction.y = -1;\n      const intersections = raycaster.intersectObject(this.system.getNavMesh());\n\n      if (!intersections.length) {\n        // Raycasting failed. Step toward the waypoint and hope for the best.\n        vCurrent.copy(vNext);\n      } else {\n        // Re-project next position onto nav mesh.\n        vDelta.subVectors(intersections[0].point, vCurrent);\n        vCurrent.add(vDelta.setLength(speed));\n      }\n\n    };\n  }())\n});\n","const { Pathfinding } = require('three-pathfinding');\n\nconst pathfinder = new Pathfinding();\nconst ZONE = 'level';\n\n/**\n * nav\n *\n * Pathfinding system, using PatrolJS.\n */\nmodule.exports = AFRAME.registerSystem('nav', {\n  init: function () {\n    this.navMesh = null;\n    this.agents = new Set();\n  },\n\n  /**\n   * @param {THREE.Geometry} geometry\n   */\n  setNavMeshGeometry: function (geometry) {\n    this.navMesh = new THREE.Mesh(geometry);\n    pathfinder.setZoneData(ZONE, Pathfinding.createZone(geometry));\n    Array.from(this.agents).forEach((agent) => agent.updateNavLocation());\n  },\n\n  /**\n   * @return {THREE.Mesh}\n   */\n  getNavMesh: function () {\n    return this.navMesh;\n  },\n\n  /**\n   * @param {NavAgent} ctrl\n   */\n  addAgent: function (ctrl) {\n    this.agents.add(ctrl);\n  },\n\n  /**\n   * @param {NavAgent} ctrl\n   */\n  removeAgent: function (ctrl) {\n    this.agents.delete(ctrl);\n  },\n\n  /**\n   * @param  {THREE.Vector3} start\n   * @param  {THREE.Vector3} end\n   * @param  {number} groupID\n   * @return {Array<THREE.Vector3>}\n   */\n  getPath: function (start, end, groupID) {\n    return this.navMesh\n      ? pathfinder.findPath(start, end, ZONE, groupID)\n      : null;\n  },\n\n  /**\n   * @param {THREE.Vector3} position\n   * @return {number}\n   */\n  getGroup: function (position) {\n    return this.navMesh\n      ? pathfinder.getGroup(ZONE, position)\n      : null;\n  },\n\n  /**\n   * @param  {THREE.Vector3} position\n   * @param  {number} groupID\n   * @return {Node}\n   */\n  getNode: function (position, groupID) {\n    return this.navMesh\n      ? pathfinder.getClosestNode(position, ZONE, groupID, true)\n      : null;\n  },\n\n  /**\n   * @param  {THREE.Vector3} start Starting position.\n   * @param  {THREE.Vector3} end Desired ending position.\n   * @param  {number} groupID\n   * @param  {Node} node\n   * @param  {THREE.Vector3} endTarget (Output) Adjusted step end position.\n   * @return {Node} Current node, after step is taken.\n   */\n  clampStep: function (start, end, groupID, node, endTarget) {\n    if (!this.navMesh) {\n      endTarget.copy(end);\n      return null;\n    } else if (!node) {\n      endTarget.copy(end);\n      return this.getNode(end, groupID);\n    }\n    return pathfinder.clampStep(start, end, node, ZONE, groupID, endTarget);\n  }\n});\n","var e=function(){};e.computeCentroids=function(e){var t,n,r;for(t=0,n=e.faces.length;t<n;t++)(r=e.faces[t]).centroid=new THREE.Vector3(0,0,0),r.centroid.add(e.vertices[r.a]),r.centroid.add(e.vertices[r.b]),r.centroid.add(e.vertices[r.c]),r.centroid.divideScalar(3)},e.roundNumber=function(e,t){return Number(e.toFixed(t))},e.sample=function(e){return e[Math.floor(Math.random()*e.length)]},e.mergeVertexIds=function(e,t){var n=[];if(e.forEach(function(e){t.indexOf(e)>=0&&n.push(e)}),n.length<2)return[];n.includes(e[0])&&n.includes(e[e.length-1])&&e.push(e.shift()),n.includes(t[0])&&n.includes(t[t.length-1])&&t.push(t.shift()),n=[],e.forEach(function(e){t.includes(e)&&n.push(e)});for(var r=n[1],o=n[0],i=e.slice();i[0]!==r;)i.push(i.shift());for(var s=0,u=t.slice();u[0]!==o;)if(u.push(u.shift()),s++>10)throw new Error(\"Unexpected state\");return u.shift(),u.pop(),i=i.concat(u)},e.setPolygonCentroid=function(e,t){var n=new THREE.Vector3,r=t.vertices;e.vertexIds.forEach(function(e){n.add(r[e])}),n.divideScalar(e.vertexIds.length),e.centroid.copy(n)},e.cleanPolygon=function(e,t){for(var n=[],r=t.vertices,o=0;o<e.vertexIds.length;o++){var i,s,u,c=r[e.vertexIds[o]];0===o?(i=e.vertexIds[1],s=e.vertexIds[e.vertexIds.length-1]):o===e.vertexIds.length-1?(i=e.vertexIds[0],s=e.vertexIds[e.vertexIds.length-2]):(i=e.vertexIds[o+1],s=e.vertexIds[o-1]),u=r[s];var h=r[i].clone().sub(c),a=u.clone().sub(c),d=h.angleTo(a);if(d>Math.PI-.01&&d<Math.PI+.01){var f=[];e.neighbours.forEach(function(t){t.vertexIds.includes(e.vertexIds[o])||f.push(t)}),e.neighbours=f}else n.push(e.vertexIds[o])}e.vertexIds=n,this.setPolygonCentroid(e,t)},e.isConvex=function(e,t){var n=t.vertices;if(e.vertexIds.length<3)return!1;for(var r=!0,o=[],i=0;i<e.vertexIds.length;i++){var s,u,c=n[e.vertexIds[i]];0===i?(s=n[e.vertexIds[1]],u=n[e.vertexIds[e.vertexIds.length-1]]):i===e.vertexIds.length-1?(s=n[e.vertexIds[0]],u=n[e.vertexIds[e.vertexIds.length-2]]):(s=n[e.vertexIds[i+1]],u=n[e.vertexIds[i-1]]);var h=s.clone().sub(c),a=u.clone().sub(c),d=h.angleTo(a);if(d===Math.PI||0===d)return!1;var f=h.cross(a).y;o.push(f)}return o.forEach(function(e){0===e&&(r=!1)}),o.forEach(o[0]>0?function(e){e<0&&(r=!1)}:function(e){e>0&&(r=!1)}),r},e.distanceToSquared=function(e,t){var n=e.x-t.x,r=e.y-t.y,o=e.z-t.z;return n*n+r*r+o*o},e.isPointInPoly=function(e,t){for(var n=!1,r=-1,o=e.length,i=o-1;++r<o;i=r)(e[r].z<=t.z&&t.z<e[i].z||e[i].z<=t.z&&t.z<e[r].z)&&t.x<(e[i].x-e[r].x)*(t.z-e[r].z)/(e[i].z-e[r].z)+e[r].x&&(n=!n);return n},e.isVectorInPolygon=function(e,t,n){var r=1e5,o=-1e5,i=[];return t.vertexIds.forEach(function(e){r=Math.min(n[e].y,r),o=Math.max(n[e].y,o),i.push(n[e])}),!!(e.y<o+.5&&e.y>r-.5&&this.isPointInPoly(i,e))},e.triarea2=function(e,t,n){return(n.x-e.x)*(t.z-e.z)-(t.x-e.x)*(n.z-e.z)},e.vequal=function(e,t){return this.distanceToSquared(e,t)<1e-5};var t=function(e){this.content=[],this.scoreFunction=e};t.prototype.push=function(e){this.content.push(e),this.sinkDown(this.content.length-1)},t.prototype.pop=function(){var e=this.content[0],t=this.content.pop();return this.content.length>0&&(this.content[0]=t,this.bubbleUp(0)),e},t.prototype.remove=function(e){var t=this.content.indexOf(e),n=this.content.pop();t!==this.content.length-1&&(this.content[t]=n,this.scoreFunction(n)<this.scoreFunction(e)?this.sinkDown(t):this.bubbleUp(t))},t.prototype.size=function(){return this.content.length},t.prototype.rescoreElement=function(e){this.sinkDown(this.content.indexOf(e))},t.prototype.sinkDown=function(e){for(var t=this.content[e];e>0;){var n=(e+1>>1)-1,r=this.content[n];if(!(this.scoreFunction(t)<this.scoreFunction(r)))break;this.content[n]=t,this.content[e]=r,e=n}},t.prototype.bubbleUp=function(e){for(var t=this.content.length,n=this.content[e],r=this.scoreFunction(n);;){var o=e+1<<1,i=o-1,s=null,u=void 0;if(i<t)(u=this.scoreFunction(this.content[i]))<r&&(s=i);if(o<t)this.scoreFunction(this.content[o])<(null===s?r:u)&&(s=o);if(null===s)break;this.content[e]=this.content[s],this.content[s]=n,e=s}};var n=function(){};n.init=function(e){for(var t=0;t<e.length;t++){var n=e[t];n.f=0,n.g=0,n.h=0,n.cost=1,n.visited=!1,n.closed=!1,n.parent=null}},n.cleanUp=function(e){for(var t=0;t<e.length;t++){var n=e[t];delete n.f,delete n.g,delete n.h,delete n.cost,delete n.visited,delete n.closed,delete n.parent}},n.heap=function(){return new t(function(e){return e.f})},n.search=function(e,t,n){this.init(e);var r=this.heap();for(r.push(t);r.size()>0;){var o=r.pop();if(o===n){for(var i=o,s=[];i.parent;)s.push(i),i=i.parent;return this.cleanUp(s),s.reverse()}o.closed=!0;for(var u=this.neighbours(e,o),c=0,h=u.length;c<h;c++){var a=u[c];if(!a.closed){var d=o.g+a.cost,f=a.visited;if(!f||d<a.g){if(a.visited=!0,a.parent=o,!a.centroid||!n.centroid)throw new Error(\"Unexpected state\");a.h=a.h||this.heuristic(a.centroid,n.centroid),a.g=d,a.f=a.g+a.h,f?r.rescoreElement(a):r.push(a)}}}}return[]},n.heuristic=function(t,n){return e.distanceToSquared(t,n)},n.neighbours=function(e,t){for(var n=[],r=0;r<t.neighbours.length;r++)n.push(e[t.neighbours[r]]);return n};var r=1,o=function(){};o.buildZone=function(t){var n=this,r=this._buildNavigationMesh(t),o={};r.vertices.forEach(function(t){t.x=e.roundNumber(t.x,2),t.y=e.roundNumber(t.y,2),t.z=e.roundNumber(t.z,2)}),o.vertices=r.vertices;var i=this._buildPolygonGroups(r);o.groups=[];var s=function(e,t){for(var n=0;n<e.length;n++)if(t===e[n])return n};return i.forEach(function(t){var r=[];t.forEach(function(o){var i=o.neighbours.map(function(e){return s(t,e)}),u=o.neighbours.map(function(e){return n._getSharedVerticesInOrder(o,e)});o.centroid.x=e.roundNumber(o.centroid.x,2),o.centroid.y=e.roundNumber(o.centroid.y,2),o.centroid.z=e.roundNumber(o.centroid.z,2),r.push({id:s(t,o),neighbours:i,vertexIds:o.vertexIds,centroid:o.centroid,portals:u})}),o.groups.push(r)}),o},o._buildNavigationMesh=function(t){return e.computeCentroids(t),t.mergeVertices(),this._buildPolygonsFromGeometry(t)},o._buildPolygonGroups=function(e){var t=[],n=0,r=function(e){e.neighbours.forEach(function(t){void 0===t.group&&(t.group=e.group,r(t))})};return e.polygons.forEach(function(e){void 0===e.group&&(e.group=n++,r(e)),t[e.group]||(t[e.group]=[]),t[e.group].push(e)}),t},o._buildPolygonNeighbours=function(e,t,n){var r=new Set,o=n.get(e.vertexIds[0]),i=n.get(e.vertexIds[1]),s=n.get(e.vertexIds[2]);o.forEach(function(e){(i.has(e)||s.has(e))&&r.add(t.polygons[e])}),i.forEach(function(e){s.has(e)&&r.add(t.polygons[e])}),e.neighbours=Array.from(r)},o._buildPolygonsFromGeometry=function(e){for(var t=this,n=[],o=e.vertices,i=e.faceVertexUvs,s=new Map,u=0;u<o.length;u++)s.set(u,new Set);e.faces.forEach(function(e){n.push({id:r++,vertexIds:[e.a,e.b,e.c],centroid:e.centroid,normal:e.normal,neighbours:[]}),s.get(e.a).add(n.length-1),s.get(e.b).add(n.length-1),s.get(e.c).add(n.length-1)});var c={polygons:n,vertices:o,faceVertexUvs:i};return n.forEach(function(e){t._buildPolygonNeighbours(e,c,s)}),c},o._getSharedVerticesInOrder=function(e,t){var n=e.vertexIds,r=t.vertexIds,o=new Set;if(n.forEach(function(e){r.includes(e)&&o.add(e)}),o.size<2)return[];o.has(n[0])&&o.has(n[n.length-1])&&n.push(n.shift()),o.has(r[0])&&o.has(r[r.length-1])&&r.push(r.shift());var i=[];return n.forEach(function(e){r.includes(e)&&i.push(e)}),i};var i=function(){this.portals=[]};i.prototype.push=function(e,t){void 0===t&&(t=e),this.portals.push({left:e,right:t})},i.prototype.stringPull=function(){var t,n,r,o=this.portals,i=[],s=0,u=0,c=0;n=o[0].left,r=o[0].right,i.push(t=o[0].left);for(var h=1;h<o.length;h++){var a=o[h].left,d=o[h].right;if(e.triarea2(t,r,d)<=0){if(!(e.vequal(t,r)||e.triarea2(t,n,d)>0)){i.push(n),n=t=n,r=t,u=s=u,c=s,h=s;continue}r=d,c=h}if(e.triarea2(t,n,a)>=0){if(!(e.vequal(t,n)||e.triarea2(t,r,a)<0)){i.push(r),n=t=r,r=t,u=s=c,c=s,h=s;continue}n=a,u=h}}return 0!==i.length&&e.vequal(i[i.length-1],o[o.length-1].left)||i.push(o[o.length-1].left),this.path=i,i};var s,u,c,h,a,d,f=function(){this.zones={}};f.createZone=function(e){return o.buildZone(e)},f.prototype.setZoneData=function(e,t){this.zones[e]=t},f.prototype.getGroup=function(t,n){if(!this.zones[t])return null;var r=null,o=Math.pow(50,2);return this.zones[t].groups.forEach(function(t,i){t.forEach(function(t){var s=e.distanceToSquared(t.centroid,n);s<o&&(r=i,o=s)})}),r},f.prototype.getRandomNode=function(t,n,r,o){if(!this.zones[t])return new THREE.Vector3;r=r||null,o=o||0;var i=[];return this.zones[t].groups[n].forEach(function(t){r&&o?e.distanceToSquared(r,t.centroid)<o*o&&i.push(t.centroid):i.push(t.centroid)}),e.sample(i)||new THREE.Vector3},f.prototype.getClosestNode=function(t,n,r,o){void 0===o&&(o=!1);var i=this.zones[n].vertices,s=null,u=Infinity;return this.zones[n].groups[r].forEach(function(n){var r=e.distanceToSquared(n.centroid,t);r<u&&(!o||e.isVectorInPolygon(t,n,i))&&(s=n,u=r)}),s},f.prototype.findPath=function(e,t,r,o){var s=this.zones[r].groups[o],u=this.zones[r].vertices,c=this.getClosestNode(e,r,o),h=this.getClosestNode(t,r,o,!0);if(!c||!h)return null;var a=n.search(s,c,h),d=function(e,t){for(var n=0;n<e.neighbours.length;n++)if(e.neighbours[n]===t.id)return e.portals[n]},f=new i;f.push(e);for(var l=0;l<a.length;l++){var v=a[l+1];if(v){var p=d(a[l],v);f.push(u[p[0]],u[p[1]])}}f.push(t),f.stringPull();var g=f.path.map(function(e){return new THREE.Vector3(e.x,e.y,e.z)});return g.shift(),g},f.prototype.clampStep=(c=new THREE.Vector3,h=new THREE.Plane,a=new THREE.Triangle,d=new THREE.Vector3,function(e,t,n,r,o,i){var f=this.zones[r].vertices,l=this.zones[r].groups[o],v=[n],p={};p[n.id]=0,s=void 0,d.set(0,0,0),u=Infinity,h.setFromCoplanarPoints(f[n.vertexIds[0]],f[n.vertexIds[1]],f[n.vertexIds[2]]),h.projectPoint(t,c),t.copy(c);for(var g=v.pop();g;g=v.pop()){a.set(f[g.vertexIds[0]],f[g.vertexIds[1]],f[g.vertexIds[2]]),a.closestPointToPoint(t,c),c.distanceToSquared(t)<u&&(s=g,d.copy(c),u=c.distanceToSquared(t));var x=p[g];if(!(x>2))for(var I=0;I<g.neighbours.length;I++){var b=l[g.neighbours[I]];b.id in p||(v.push(b),p[b.id]=x+1)}}return i.copy(d),s});export{f as Pathfinding};\n//# sourceMappingURL=three-pathfinding.module.js.map\n","require('./a-grid');\nrequire('./a-hexgrid');\nrequire('./a-ocean');\nrequire('./a-tube');\n","/**\n * Flat grid.\n *\n * Defaults to 75x75.\n */\nmodule.exports = AFRAME.registerPrimitive('a-grid', {\n  defaultComponents: {\n    geometry: {\n      primitive: 'plane',\n      width: 75,\n      height: 75\n    },\n    rotation: {x: -90, y: 0, z: 0},\n    material: {\n      src: 'url(https://cdn.rawgit.com/donmccurdy/aframe-extras/v1.16.3/assets/grid.png)',\n      repeat: '75 75'\n    }\n  },\n  mappings: {\n    width: 'geometry.width',\n    height: 'geometry.height',\n    src: 'material.src'\n  }\n});\n","const vg = require('../../lib/hex-grid.min.js');\nconst defaultHexGrid = require('../../lib/default-hex-grid');\n\n/**\n * Hex grid.\n */\nmodule.exports.Primitive = AFRAME.registerPrimitive('a-hexgrid', {\n  defaultComponents: {\n    'hexgrid': {}\n  },\n  mappings: {\n    src: 'hexgrid.src'\n  }\n});\n\nmodule.exports.Component = AFRAME.registerComponent('hexgrid', {\n  dependencies: ['material'],\n  schema: {\n    src: {type: 'asset'}\n  },\n  init: function () {\n    const data = this.data;\n    if (data.src) {\n      fetch(data.src)\n        .then((response) => response.json())\n        .then((json) => this.addMesh(json));\n    } else {\n      this.addMesh(defaultHexGrid);\n    }\n  },\n  addMesh: function (json) {\n    const grid = new vg.HexGrid();\n    grid.fromJSON(json);\n    const board = new vg.Board(grid);\n    board.generateTilemap();\n    this.el.setObject3D('mesh', board.group);\n    this.addMaterial();\n  },\n  addMaterial: function () {\n    const materialComponent = this.el.components.material;\n    const material = (materialComponent || {}).material;\n    if (!material) return;\n    this.el.object3D.traverse((node) => {\n      if (node.isMesh) {\n        node.material = material;\n      }\n    });\n  },\n  remove: function () {\n    this.el.removeObject3D('mesh');\n  }\n});\n","var vg=module.exports={VERSION:\"0.1.1\",PI:Math.PI,TAU:2*Math.PI,DEG_TO_RAD:.0174532925,RAD_TO_DEG:57.2957795,SQRT3:Math.sqrt(3),TILE:\"tile\",ENT:\"entity\",STR:\"structure\",HEX:\"hex\",SQR:\"square\",ABS:\"abstract\"};vg.Board=function(e,t){if(!e)throw new Error(\"You must pass in a grid system for the board to use.\");this.tiles=[],this.tileGroup=null,this.group=new THREE.Object3D,this.grid=null,this.overlay=null,this.finder=new vg.AStarFinder(t),vg.Loader.init(),this.setGrid(e)},vg.Board.prototype={setEntityOnTile:function(e,t){var i=this.grid.cellToPixel(t.cell);e.position.copy(i),e.position.y+=e.heightOffset||0,e.tile&&(e.tile.entity=null),e.tile=t,t.entity=e},addTile:function(e){var t=this.tiles.indexOf(e);-1===t&&(this.tiles.push(e),this.snapTileToGrid(e),e.position.y=0,this.tileGroup.add(e.mesh),this.grid.add(e.cell),e.cell.tile=e)},removeTile:function(e){if(e){var t=this.tiles.indexOf(e);this.grid.remove(e.cell),-1!==t&&this.tiles.splice(t,1),e.dispose()}},removeAllTiles:function(){if(this.tileGroup)for(var e=this.tileGroup.children,t=0;t<e.length;t++)this.tileGroup.remove(e[t])},getTileAtCell:function(e){var t=this.grid.cellToHash(e);return e.tile||(\"undefined\"!=typeof this.grid.cells[t]?this.grid.cells[t].tile:null)},snapToGrid:function(e){var t=this.grid.pixelToCell(e);e.copy(this.grid.cellToPixel(t))},snapTileToGrid:function(e){if(e.cell)e.position.copy(this.grid.cellToPixel(e.cell));else{var t=this.grid.pixelToCell(e.position);e.position.copy(this.grid.cellToPixel(t))}return e},getRandomTile:function(){var e=vg.Tools.randomInt(0,this.tiles.length-1);return this.tiles[e]},findPath:function(e,t,i){return this.finder.findPath(e.cell,t.cell,i,this.grid)},setGrid:function(e){this.group.remove(this.tileGroup),this.grid&&e!==this.grid&&(this.removeAllTiles(),this.tiles.forEach(function(e){this.grid.remove(e.cell),e.dispose()}),this.grid.dispose()),this.grid=e,this.tiles=[],this.tileGroup=new THREE.Object3D,this.group.add(this.tileGroup)},generateOverlay:function(e){var t=new THREE.LineBasicMaterial({color:0,opacity:.3});this.overlay&&this.group.remove(this.overlay),this.overlay=new THREE.Object3D,this.grid.generateOverlay(e,this.overlay,t),this.group.add(this.overlay)},generateTilemap:function(e){this.reset();var t=this.grid.generateTiles(e);this.tiles=t,this.tileGroup=new THREE.Object3D;for(var i=0;i<t.length;i++)this.tileGroup.add(t[i].mesh);this.group.add(this.tileGroup)},reset:function(){this.removeAllTiles(),this.tileGroup&&this.group.remove(this.tileGroup)}},vg.Board.prototype.constructor=vg.Board,vg.Cell=function(e,t,i,s){this.q=e||0,this.r=t||0,this.s=i||0,this.h=s||1,this.tile=null,this.userData={},this.walkable=!0,this._calcCost=0,this._priority=0,this._visited=!1,this._parent=null,this.uniqueID=vg.LinkedList.generateID()},vg.Cell.prototype={set:function(e,t,i){return this.q=e,this.r=t,this.s=i,this},copy:function(e){return this.q=e.q,this.r=e.r,this.s=e.s,this.h=e.h,this.tile=e.tile||null,this.userData=e.userData||{},this.walkable=e.walkable,this},add:function(e){return this.q+=e.q,this.r+=e.r,this.s+=e.s,this},equals:function(e){return this.q===e.q&&this.r===e.r&&this.s===e.s}},vg.Cell.prototype.constructor=vg.Cell,vg.HexGrid=function(e){e=e||{},this.type=vg.HEX,this.size=5,this.cellSize=\"undefined\"==typeof e.cellSize?10:e.cellSize,this.cells={},this.numCells=0,this.extrudeSettings=null,this.autogenerated=!1;var t,i=[];for(t=0;6>t;t++)i.push(this._createVertex(t));for(this.cellShape=new THREE.Shape,this.cellShape.moveTo(i[0].x,i[0].y),t=1;6>t;t++)this.cellShape.lineTo(i[t].x,i[t].y);this.cellShape.lineTo(i[0].x,i[0].y),this.cellShape.autoClose=!0,this.cellGeo=new THREE.Geometry,this.cellGeo.vertices=i,this.cellGeo.verticesNeedUpdate=!0,this.cellShapeGeo=new THREE.ShapeGeometry(this.cellShape),this._cellWidth=2*this.cellSize,this._cellLength=.5*vg.SQRT3*this._cellWidth,this._hashDelimeter=\".\",this._directions=[new vg.Cell(1,-1,0),new vg.Cell(1,0,-1),new vg.Cell(0,1,-1),new vg.Cell(-1,1,0),new vg.Cell(-1,0,1),new vg.Cell(0,-1,1)],this._diagonals=[new vg.Cell(2,-1,-1),new vg.Cell(1,1,-2),new vg.Cell(-1,2,-1),new vg.Cell(-2,1,1),new vg.Cell(-1,-1,2),new vg.Cell(1,-2,1)],this._list=[],this._vec3=new THREE.Vector3,this._cel=new vg.Cell,this._conversionVec=new THREE.Vector3,this._geoCache=[],this._matCache=[]},vg.HexGrid.TWO_THIRDS=2/3,vg.HexGrid.prototype={cellToPixel:function(e){return this._vec3.x=e.q*this._cellWidth*.75,this._vec3.y=e.h,this._vec3.z=-((e.s-e.r)*this._cellLength*.5),this._vec3},pixelToCell:function(e){var t=e.x*(vg.HexGrid.TWO_THIRDS/this.cellSize),i=(-e.x/3+vg.SQRT3/3*e.z)/this.cellSize;return this._cel.set(t,i,-t-i),this._cubeRound(this._cel)},getCellAt:function(e){var t=e.x*(vg.HexGrid.TWO_THIRDS/this.cellSize),i=(-e.x/3+vg.SQRT3/3*e.z)/this.cellSize;return this._cel.set(t,i,-t-i),this._cubeRound(this._cel),this.cells[this.cellToHash(this._cel)]},getNeighbors:function(e,t,i){var s,n,l=this._directions.length;for(this._list.length=0,s=0;l>s;s++)this._cel.copy(e),this._cel.add(this._directions[s]),n=this.cells[this.cellToHash(this._cel)],!n||i&&!i(e,n)||this._list.push(n);if(t)for(s=0;l>s;s++)this._cel.copy(e),this._cel.add(this._diagonals[s]),n=this.cells[this.cellToHash(this._cel)],!n||i&&!i(e,n)||this._list.push(n);return this._list},getRandomCell:function(){var e,t=0,i=vg.Tools.randomInt(0,this.numCells);for(e in this.cells){if(t===i)return this.cells[e];t++}return this.cells[e]},cellToHash:function(e){return e.q+this._hashDelimeter+e.r+this._hashDelimeter+e.s},distance:function(e,t){var i=Math.max(Math.abs(e.q-t.q),Math.abs(e.r-t.r),Math.abs(e.s-t.s));return i+=t.h-e.h},clearPath:function(){var e,t;for(e in this.cells)t=this.cells[e],t._calcCost=0,t._priority=0,t._parent=null,t._visited=!1},traverse:function(e){var t;for(t in this.cells)e(this.cells[t])},generateTile:function(e,t,i){var s=Math.abs(e.h);1>s&&(s=1);var n=this._geoCache[s];n||(this.extrudeSettings.amount=s,n=new THREE.ExtrudeGeometry(this.cellShape,this.extrudeSettings),this._geoCache[s]=n);var l=new vg.Tile({size:this.cellSize,scale:t,cell:e,geometry:n,material:i});return e.tile=l,l},generateTiles:function(e){e=e||{};var t=[],i={tileScale:.95,cellSize:this.cellSize,material:null,extrudeSettings:{amount:1,bevelEnabled:!0,bevelSegments:1,steps:1,bevelSize:.5,bevelThickness:.5}};i=vg.Tools.merge(i,e),this.cellSize=i.cellSize,this._cellWidth=2*this.cellSize,this._cellLength=.5*vg.SQRT3*this._cellWidth,this.autogenerated=!0,this.extrudeSettings=i.extrudeSettings;var s,n,l;for(s in this.cells)l=this.cells[s],n=this.generateTile(l,i.tileScale,i.material),n.position.copy(this.cellToPixel(l)),n.position.y=0,t.push(n);return t},generateTilePoly:function(e){e||(e=new THREE.MeshBasicMaterial({color:2405631}));var t=new THREE.Mesh(this.cellShapeGeo,e);return this._vec3.set(1,0,0),t.rotateOnAxis(this._vec3,vg.PI/2),t},generate:function(e){e=e||{},this.size=\"undefined\"==typeof e.size?this.size:e.size;var t,i,s,n;for(t=-this.size;t<this.size+1;t++)for(i=-this.size;i<this.size+1;i++)s=-t-i,Math.abs(t)<=this.size&&Math.abs(i)<=this.size&&Math.abs(s)<=this.size&&(n=new vg.Cell(t,i,s),this.add(n))},generateOverlay:function(e,t,i){var s,n,l,r=this.cellShape.createPointsGeometry();for(s=-e;e+1>s;s++)for(n=-e;e+1>n;n++)if(l=-s-n,Math.abs(s)<=e&&Math.abs(n)<=e&&Math.abs(l)<=e){this._cel.set(s,n,l);var h=new THREE.Line(r,i);h.position.copy(this.cellToPixel(this._cel)),h.rotation.x=90*vg.DEG_TO_RAD,t.add(h)}},add:function(e){var t=this.cellToHash(e);if(!this.cells[t])return this.cells[t]=e,this.numCells++,e},remove:function(e){var t=this.cellToHash(e);this.cells[t]&&(delete this.cells[t],this.numCells--)},dispose:function(){this.cells=null,this.numCells=0,this.cellShape=null,this.cellGeo.dispose(),this.cellGeo=null,this.cellShapeGeo.dispose(),this.cellShapeGeo=null,this._list=null,this._vec3=null,this._conversionVec=null,this._geoCache=null,this._matCache=null},load:function(e,t,i){var s=this;vg.Tools.getJSON({url:e,callback:function(e){s.fromJSON(e),t.call(i||null,e)},cache:!1,scope:s})},fromJSON:function(e){var t,i,s=e.cells;for(this.cells={},this.numCells=0,this.size=e.size,this.cellSize=e.cellSize,this._cellWidth=2*this.cellSize,this._cellLength=.5*vg.SQRT3*this._cellWidth,this.extrudeSettings=e.extrudeSettings,this.autogenerated=e.autogenerated,t=0;t<s.length;t++)i=new vg.Cell,i.copy(s[t]),this.add(i)},toJSON:function(){var e,t,i={size:this.size,cellSize:this.cellSize,extrudeSettings:this.extrudeSettings,autogenerated:this.autogenerated},s=[];for(t in this.cells)e=this.cells[t],s.push({q:e.q,r:e.r,s:e.s,h:e.h,walkable:e.walkable,userData:e.userData});return i.cells=s,i},_createVertex:function(e){var t=vg.TAU/6*e;return new THREE.Vector3(this.cellSize*Math.cos(t),this.cellSize*Math.sin(t),0)},_cubeRound:function(e){var t=Math.round(e.q),i=Math.round(e.r),s=Math.round(e.s),n=Math.abs(t-e.q),l=Math.abs(i-e.r),r=Math.abs(s-e.s);return n>l&&n>r?t=-i-s:l>r?i=-t-s:s=-t-i,this._cel.set(t,i,s)}},vg.HexGrid.prototype.constructor=vg.HexGrid,vg.SqrGrid=function(e){e=e||{},this.type=vg.SQR,this.size=5,this.cellSize=\"undefined\"==typeof e.cellSize?10:e.cellSize,this.cells={},this.numCells=0,this.extrudeSettings=null,this.autogenerated=!1;var t=[];t.push(new THREE.Vector3),t.push(new THREE.Vector3(-this.cellSize,this.cellSize)),t.push(new THREE.Vector3(this.cellSize,this.cellSize)),t.push(new THREE.Vector3(this.cellSize,-this.cellSize)),this.cellShape=new THREE.Shape,this.cellShape.moveTo(-this.cellSize,-this.cellSize),this.cellShape.lineTo(-this.cellSize,this.cellSize),this.cellShape.lineTo(this.cellSize,this.cellSize),this.cellShape.lineTo(this.cellSize,-this.cellSize),this.cellShape.lineTo(-this.cellSize,-this.cellSize),this.cellGeo=new THREE.Geometry,this.cellGeo.vertices=t,this.cellGeo.verticesNeedUpdate=!0,this.cellShapeGeo=new THREE.ShapeGeometry(this.cellShape),this._fullCellSize=2*this.cellSize,this._hashDelimeter=\".\",this._directions=[new vg.Cell(1,0,0),new vg.Cell(0,-1,0),new vg.Cell(-1,0,0),new vg.Cell(0,1,0)],this._diagonals=[new vg.Cell(-1,-1,0),new vg.Cell(-1,1,0),new vg.Cell(1,1,0),new vg.Cell(1,-1,0)],this._list=[],this._vec3=new THREE.Vector3,this._cel=new vg.Cell,this._conversionVec=new THREE.Vector3,this._geoCache=[],this._matCache=[]},vg.SqrGrid.prototype={cellToPixel:function(e){return this._vec3.x=e.q*this._fullCellSize,this._vec3.y=e.h,this._vec3.z=e.r*this._fullCellSize,this._vec3},pixelToCell:function(e){var t=Math.round(e.x/this._fullCellSize),i=Math.round(e.z/this._fullCellSize);return this._cel.set(t,i,0)},getCellAt:function(e){var t=Math.round(e.x/this._fullCellSize),i=Math.round(e.z/this._fullCellSize);return this._cel.set(t,i),this.cells[this.cellToHash(this._cel)]},getNeighbors:function(e,t,i){var s,n,l=this._directions.length;for(this._list.length=0,s=0;l>s;s++)this._cel.copy(e),this._cel.add(this._directions[s]),n=this.cells[this.cellToHash(this._cel)],!n||i&&!i(e,n)||this._list.push(n);if(t)for(s=0;l>s;s++)this._cel.copy(e),this._cel.add(this._diagonals[s]),n=this.cells[this.cellToHash(this._cel)],!n||i&&!i(e,n)||this._list.push(n);return this._list},getRandomCell:function(){var e,t=0,i=vg.Tools.randomInt(0,this.numCells);for(e in this.cells){if(t===i)return this.cells[e];t++}return this.cells[e]},cellToHash:function(e){return e.q+this._hashDelimeter+e.r},distance:function(e,t){var i=Math.max(Math.abs(e.q-t.q),Math.abs(e.r-t.r));return i+=t.h-e.h},clearPath:function(){var e,t;for(e in this.cells)t=this.cells[e],t._calcCost=0,t._priority=0,t._parent=null,t._visited=!1},traverse:function(e){var t;for(t in this.cells)e(this.cells[t])},generateTile:function(e,t,i){var s=Math.abs(e.h);1>s&&(s=1);var n=this._geoCache[s];n||(this.extrudeSettings.amount=s,n=new THREE.ExtrudeGeometry(this.cellShape,this.extrudeSettings),this._geoCache[s]=n);var l=new vg.Tile({size:this.cellSize,scale:t,cell:e,geometry:n,material:i});return e.tile=l,l},generateTiles:function(e){e=e||{};var t=[],i={tileScale:.95,cellSize:this.cellSize,material:null,extrudeSettings:{amount:1,bevelEnabled:!0,bevelSegments:1,steps:1,bevelSize:.5,bevelThickness:.5}};i=vg.Tools.merge(i,e),this.cellSize=i.cellSize,this._fullCellSize=2*this.cellSize,this.autogenerated=!0,this.extrudeSettings=i.extrudeSettings;var s,n,l;for(s in this.cells)l=this.cells[s],n=this.generateTile(l,i.tileScale,i.material),n.position.copy(this.cellToPixel(l)),n.position.y=0,t.push(n);return t},generateTilePoly:function(e){e||(e=new THREE.MeshBasicMaterial({color:2405631}));var t=new THREE.Mesh(this.cellShapeGeo,e);return this._vec3.set(1,0,0),t.rotateOnAxis(this._vec3,vg.PI/2),t},generate:function(e){e=e||{},this.size=\"undefined\"==typeof e.size?this.size:e.size;var t,i,s,n=Math.ceil(this.size/2);for(t=-n;n>t;t++)for(i=-n;n>i;i++)s=new vg.Cell(t,i+1),this.add(s)},generateOverlay:function(e,t,i){var s,n,l=Math.ceil(e/2);for(s=-l;l>s;s++)for(n=-l;l>n;n++){this._cel.set(s,n);var r=new THREE.Line(this.cellGeo,i);r.position.copy(this.cellToPixel(this._cel)),r.rotation.x=90*vg.DEG_TO_RAD,t.add(r)}},add:function(e){var t=this.cellToHash(e);if(!this.cells[t])return this.cells[t]=e,this.numCells++,e},remove:function(e){var t=this.cellToHash(e);this.cells[t]&&(delete this.cells[t],this.numCells--)},dispose:function(){this.cells=null,this.numCells=0,this.cellShape=null,this.cellGeo.dispose(),this.cellGeo=null,this.cellShapeGeo.dispose(),this.cellShapeGeo=null,this._list=null,this._vec3=null,this._conversionVec=null,this._geoCache=null,this._matCache=null},load:function(e,t,i){vg.Tools.getJSON({url:e,callback:function(e){this.fromJSON(e),t.call(i||null,e)},cache:!1,scope:this})},fromJSON:function(e){var t,i,s=e.cells;for(this.cells={},this.numCells=0,this.size=e.size,this.cellSize=e.cellSize,this._fullCellSize=2*this.cellSize,this.extrudeSettings=e.extrudeSettings,this.autogenerated=e.autogenerated,t=0;t<s.length;t++)i=new vg.Cell,i.copy(s[t]),this.add(i)},toJSON:function(){var e,t,i={size:this.size,cellSize:this.cellSize,extrudeSettings:this.extrudeSettings,autogenerated:this.autogenerated},s=[];for(t in this.cells)e=this.cells[t],s.push({q:e.q,r:e.r,s:e.s,h:e.h,walkable:e.walkable,userData:e.userData});return i.cells=s,i}},vg.SqrGrid.prototype.constructor=vg.SqrGrid,vg.Tile=function(e){e=e||{};var t={cell:null,geometry:null,material:null};if(t=vg.Tools.merge(t,e),!t.cell||!t.geometry)throw new Error(\"Missing vg.Tile configuration\");this.cell=t.cell,this.cell.tile&&this.cell.tile!==this&&this.cell.tile.dispose(),this.cell.tile=this,this.uniqueID=vg.Tools.generateID(),this.geometry=t.geometry,this.material=t.material,this.material||(this.material=new THREE.MeshPhongMaterial({color:vg.Tools.randomizeRGB(\"30, 30, 30\",13)})),this.objectType=vg.TILE,this.entity=null,this.userData={},this.selected=!1,this.highlight=\"0x0084cc\",this.mesh=new THREE.Mesh(this.geometry,this.material),this.mesh.userData.structure=this,this.position=this.mesh.position,this.rotation=this.mesh.rotation,this.rotation.x=-90*vg.DEG_TO_RAD,this.mesh.scale.set(t.scale,t.scale,1),this.material.emissive?this._emissive=this.material.emissive.getHex():this._emissive=null},vg.Tile.prototype={select:function(){return this.material.emissive&&this.material.emissive.setHex(this.highlight),this.selected=!0,this},deselect:function(){return null!==this._emissive&&this.material.emissive&&this.material.emissive.setHex(this._emissive),this.selected=!1,this},toggle:function(){return this.selected?this.deselect():this.select(),this},dispose:function(){this.cell&&this.cell.tile&&(this.cell.tile=null),this.cell=null,this.position=null,this.rotation=null,this.mesh.parent&&this.mesh.parent.remove(this.mesh),this.mesh.userData.structure=null,this.mesh=null,this.material=null,this.userData=null,this.entity=null,this.geometry=null,this._emissive=null}},vg.Tile.prototype.constructor=vg.Tile,function(){var e=function(){this.obj=null,this.next=null,this.prev=null,this.free=!0},t=function(){this.first=null,this.last=null,this.length=0,this.objToNodeMap={},this.uniqueID=Date.now()+\"\"+Math.floor(1e3*Math.random()),this.sortArray=[]};t.generateID=function(){return Math.random().toString(36).slice(2)+Date.now()},t.prototype={getNode:function(e){return this.objToNodeMap[e.uniqueID]},addNode:function(i){var s=new e;if(!i.uniqueID)try{i.uniqueID=t.generateID()}catch(n){return console.error(\"[LinkedList.addNode] obj passed is immutable: cannot attach necessary identifier\"),null}return s.obj=i,s.free=!1,this.objToNodeMap[i.uniqueID]=s,s},swapObjects:function(e,t){this.objToNodeMap[e.obj.uniqueID]=null,this.objToNodeMap[t.uniqueID]=e,e.obj=t},add:function(e){var t=this.objToNodeMap[e.uniqueID];if(t){if(t.free===!1)return;t.obj=e,t.free=!1,t.next=null,t.prev=null}else t=this.addNode(e);if(this.first){if(!this.last)throw new Error(\"[LinkedList.add] No last in the list -- that shouldn't happen here\");this.last.next=t,t.prev=this.last,this.last=t,t.next=null}else this.first=t,this.last=t,t.next=null,t.prev=null;this.length++,this.showDebug&&this.dump(\"after add\")},has:function(e){return!!this.objToNodeMap[e.uniqueID]},moveUp:function(e){this.dump(\"before move up\");var t=this.getNode(e);if(!t)throw\"Oops, trying to move an object that isn't in the list\";if(t.prev){var i=t.prev,s=i.prev;t==this.last&&(this.last=i);var n=t.next;s&&(s.next=t),t.next=i,t.prev=i.prev,i.next=n,i.prev=t,this.first==i&&(this.first=t)}},moveDown:function(e){var t=this.getNode(e);if(!t)throw\"Oops, trying to move an object that isn't in the list\";if(t.next){var i=t.next;this.moveUp(i.obj),this.last==i&&(this.last=t)}},sort:function(e){var t,i,s=this.sortArray,n=this.first;for(s.length=0;n;)s.push(n.obj),n=n.next;for(this.clear(),s.sort(e),i=s.length,t=0;i>t;t++)this.add(s[t])},remove:function(e){var t=this.getNode(e);return!t||t.free?!1:(t.prev&&(t.prev.next=t.next),t.next&&(t.next.prev=t.prev),t.prev||(this.first=t.next),t.next||(this.last=t.prev),t.free=!0,t.prev=null,t.next=null,this.length--,!0)},shift:function(){var e=this.first;return 0===this.length?null:(e.prev&&(e.prev.next=e.next),e.next&&(e.next.prev=e.prev),this.first=e.next,e.next||(this.last=null),e.free=!0,e.prev=null,e.next=null,this.length--,e.obj)},pop:function(){var e=this.last;return 0===this.length?null:(e.prev&&(e.prev.next=e.next),e.next&&(e.next.prev=e.prev),this.last=e.prev,e.prev||(this.first=null),e.free=!0,e.prev=null,e.next=null,this.length--,e.obj)},concat:function(e){for(var t=e.first;t;)this.add(t.obj),t=t.next},clear:function(){for(var e=this.first;e;)e.free=!0,e=e.next;this.first=null,this.length=0},dispose:function(){for(var e=this.first;e;)e.obj=null,e=e.next;this.first=null,this.objToNodeMap=null},dump:function(e){console.log(\"====================\"+e+\"=====================\");for(var t=this.first;t;)console.log(\"{\"+t.obj.toString()+\"} previous=\"+(t.prev?t.prev.obj:\"NULL\")),t=t.next();console.log(\"===================================\"),console.log(\"Last: {\"+(this.last?this.last.obj:\"NULL\")+\"} First: {\"+(this.first?this.first.obj:\"NULL\")+\"}\")}},t.prototype.constructor=t,vg.LinkedList=t}(),function(){var e=function(e,t,i,s,n){this._listener=t,this.isOnce=i,this.context=s,this.signal=e,this._priority=n||0};e.prototype={active:!0,params:null,execute:function(e){var t,i;return this.active&&this._listener&&(i=this.params?this.params.concat(e):e,t=this._listener.apply(this.context,i),this.isOnce&&this.detach()),t},detach:function(){return this.isBound()?this.signal.remove(this._listener,this.context):null},isBound:function(){return!!this.signal&&!!this._listener},_destroy:function(){delete this.signal,delete this._listener,delete this.context},toString:function(){return\"[SignalBinding isOnce:\"+this.isOnce+\", isBound:\"+this.isBound()+\", active:\"+this.active+\"]\"}},e.prototype.constructor=e;var t=function(){this._bindings=[],this._prevParams=null;var e=this;this.dispatch=function(){t.prototype.dispatch.apply(e,arguments)}};t.prototype={memorize:!1,_shouldPropagate:!0,active:!0,validateListener:function(e,t){if(\"function\"!=typeof e)throw new Error(\"Signal: listener is a required param of {fn}() and should be a Function.\".replace(\"{fn}\",t))},_registerListener:function(t,i,s,n){var l,r=this._indexOfListener(t,s);if(-1!==r){if(l=this._bindings[r],l.isOnce!==i)throw new Error(\"You cannot add\"+(i?\"\":\"Once\")+\"() then add\"+(i?\"Once\":\"\")+\"() the same listener without removing the relationship first.\")}else l=new e(this,t,i,s,n),this._addBinding(l);return this.memorize&&this._prevParams&&l.execute(this._prevParams),l},_addBinding:function(e){var t=this._bindings.length;do t--;while(this._bindings[t]&&e._priority<=this._bindings[t]._priority);this._bindings.splice(t+1,0,e)},_indexOfListener:function(e,t){for(var i,s=this._bindings.length;s--;)if(i=this._bindings[s],i._listener===e&&i.context===t)return s;return-1},has:function(e,t){return-1!==this._indexOfListener(e,t)},add:function(e,t,i){return this.validateListener(e,\"add\"),this._registerListener(e,!1,t,i)},addOnce:function(e,t,i){return this.validateListener(e,\"addOnce\"),this._registerListener(e,!0,t,i)},remove:function(e,t){this.validateListener(e,\"remove\");var i=this._indexOfListener(e,t);return-1!==i&&(this._bindings[i]._destroy(),this._bindings.splice(i,1)),e},removeAll:function(e){\"undefined\"==typeof e&&(e=null);for(var t=this._bindings.length;t--;)e?this._bindings[t].context===e&&(this._bindings[t]._destroy(),this._bindings.splice(t,1)):this._bindings[t]._destroy();e||(this._bindings.length=0)},getNumListeners:function(){return this._bindings.length},halt:function(){this._shouldPropagate=!1},dispatch:function(){if(this.active){var e,t=Array.prototype.slice.call(arguments),i=this._bindings.length;if(this.memorize&&(this._prevParams=t),i){e=this._bindings.slice(),this._shouldPropagate=!0;do i--;while(e[i]&&this._shouldPropagate&&e[i].execute(t)!==!1)}}},forget:function(){this._prevParams=null},dispose:function(){this.removeAll(),delete this._bindings,delete this._prevParams},toString:function(){return\"[Signal active:\"+this.active+\" numListeners:\"+this.getNumListeners()+\"]\"}},t.prototype.constructor=t,vg.Signal=t}(),vg.AStarFinder=function(e){e=e||{};var t={allowDiagonal:!1,heuristicFilter:null};t=vg.Tools.merge(t,e),this.allowDiagonal=t.allowDiagonal,this.heuristicFilter=t.heuristicFilter,this.list=new vg.LinkedList},vg.AStarFinder.prototype={findPath:function(e,t,i,s){var n,l,r,h,o,a;for(i=i||this.heuristicFilter,s.clearPath(),this.list.clear(),this.list.add(e);this.list.length>0;){if(this.list.sort(this.compare),n=this.list.shift(),n._visited=!0,n===t)return vg.PathUtil.backtrace(t);for(r=s.getNeighbors(n,this.allowDiagonal,i),o=0,a=r.length;a>o;o++)if(h=r[o],h.walkable&&(l=n._calcCost+s.distance(n,h),!h._visited||l<h._calcCost)){if(h._visited=!0,h._parent=n,h._calcCost=l,h._priority=l+s.distance(t,h),h===t)return vg.PathUtil.backtrace(t);this.list.add(h)}}return null},compare:function(e,t){return e._priority-t._priority}},vg.AStarFinder.prototype.constructor=vg.AStarFinder,vg.PathUtil={backtrace:function(e){for(var t=[e];e._parent;)e=e._parent,t.push(e);return t.reverse()},biBacktrace:function(e,t){var i=this.backtrace(e),s=this.backtrace(t);return i.concat(s.reverse())},pathLength:function(e){var t,i,s,n,l,r=0;for(t=1;t<e.length;++t)i=e[t-1],s=e[t],n=i[0]-s[0],l=i[1]-s[1],r+=Math.sqrt(n*n+l*l);return r},interpolate:function(e,t,i,s){var n,l,r,h,o,a,c=Math.abs,u=[];for(r=c(i-e),h=c(s-t),n=i>e?1:-1,l=s>t?1:-1,o=r-h;e!==i||t!==s;)u.push([e,t]),a=2*o,a>-h&&(o-=h,e+=n),r>a&&(o+=r,t+=l);return u},expandPath:function(e){var t,i,s,n,l,r,h=[],o=e.length;if(2>o)return h;for(l=0;o-1>l;++l)for(t=e[l],i=e[l+1],s=this.interpolate(t[0],t[1],i[0],i[1]),n=s.length,r=0;n-1>r;++r)h.push(s[r]);return h.push(e[o-1]),h},smoothenPath:function(e,t){var i,s,n,l,r,h,o,a,c,u,d,g,p=t.length,v=t[0][0],f=t[0][1],m=t[p-1][0],_=t[p-1][1];for(i=v,s=f,r=[[i,s]],o=2;p>o;++o){for(c=t[o],n=c[0],l=c[1],u=this.interpolate(i,s,n,l),g=!1,a=1;a<u.length;++a)if(d=u[a],!e.isWalkableAt(d[0],d[1])){g=!0;break}g&&(h=t[o-1],r.push(h),i=h[0],s=h[1])}return r.push([m,_]),r},compressPath:function(e){if(e.length<3)return e;var t,i,s,n,l,r,h=[],o=e[0][0],a=e[0][1],c=e[1][0],u=e[1][1],d=c-o,g=u-a;for(l=Math.sqrt(d*d+g*g),d/=l,g/=l,h.push([o,a]),r=2;r<e.length;r++)t=c,i=u,s=d,n=g,c=e[r][0],u=e[r][1],d=c-t,g=u-i,l=Math.sqrt(d*d+g*g),d/=l,g/=l,(d!==s||g!==n)&&h.push([t,i]);return h.push([c,u]),h}},vg.Loader={manager:null,imageLoader:null,crossOrigin:!1,init:function(e){this.crossOrigin=e||!1,this.manager=new THREE.LoadingManager(function(){},function(){},function(){console.warn(\"Error loading images\")}),this.imageLoader=new THREE.ImageLoader(this.manager),this.imageLoader.crossOrigin=e},loadTexture:function(e,t,i,s){var n=new THREE.Texture(null,t);return this.imageLoader.load(e,function(e){n.image=e,n.needsUpdate=!0,i&&i(n)},null,function(e){s&&s(e)}),n.sourceFile=e,n}},vg.MouseCaster=function(e,t,i){this.down=!1,this.rightDown=!1,this.pickedObject=null,this.selectedObject=null,this.allHits=null,this.active=!0,this.shift=!1,this.ctrl=!1,this.wheel=0,this.position=new THREE.Vector3,this.screenPosition=new THREE.Vector2,this.signal=new vg.Signal,this.group=e,this._camera=t,this._raycaster=new THREE.Raycaster,this._preventDefault=!1,i=i||document,i.addEventListener(\"mousemove\",this._onDocumentMouseMove.bind(this),!1),i.addEventListener(\"mousedown\",this._onDocumentMouseDown.bind(this),!1),i.addEventListener(\"mouseup\",this._onDocumentMouseUp.bind(this),!1),i.addEventListener(\"mousewheel\",this._onMouseWheel.bind(this),!1),i.addEventListener(\"DOMMouseScroll\",this._onMouseWheel.bind(this),!1)},vg.MouseCaster.OVER=\"over\",vg.MouseCaster.OUT=\"out\",vg.MouseCaster.DOWN=\"down\",vg.MouseCaster.UP=\"up\",vg.MouseCaster.CLICK=\"click\",vg.MouseCaster.WHEEL=\"wheel\",vg.MouseCaster.prototype={update:function(){if(this.active){this._raycaster.setFromCamera(this.screenPosition,this._camera);var e,t,i=this._raycaster.intersectObject(this.group,!0);i.length>0?(e=i[0],t=e.object.userData.structure,this.pickedObject!=t&&(this.pickedObject&&this.signal.dispatch(vg.MouseCaster.OUT,this.pickedObject),this.pickedObject=t,this.selectedObject=null,this.signal.dispatch(vg.MouseCaster.OVER,this.pickedObject)),this.position.copy(e.point),this.screenPosition.z=e.distance):(this.pickedObject&&this.signal.dispatch(vg.MouseCaster.OUT,this.pickedObject),this.pickedObject=null,this.selectedObject=null),this.allHits=i}},preventDefault:function(){this._preventDefault=!0},_onDocumentMouseDown:function(e){return e=e||window.event,e.preventDefault(),this._preventDefault?(this._preventDefault=!1,!1):(this.pickedObject&&(this.selectedObject=this.pickedObject),this.shift=e.shiftKey,this.ctrl=e.ctrlKey,this.down=1===e.which,this.rightDown=3===e.which,void this.signal.dispatch(vg.MouseCaster.DOWN,this.pickedObject))},_onDocumentMouseUp:function(e){return e.preventDefault(),this._preventDefault?(this._preventDefault=!1,!1):(this.shift=e.shiftKey,this.ctrl=e.ctrlKey,this.signal.dispatch(vg.MouseCaster.UP,this.pickedObject),this.selectedObject&&this.pickedObject&&this.selectedObject.uniqueID===this.pickedObject.uniqueID&&this.signal.dispatch(vg.MouseCaster.CLICK,this.pickedObject),this.down=1===e.which?!1:this.down,void(this.rightDown=3===e.which?!1:this.rightDown))},_onDocumentMouseMove:function(e){e.preventDefault(),this.screenPosition.x=e.clientX/window.innerWidth*2-1,this.screenPosition.y=2*-(e.clientY/window.innerHeight)+1},_onMouseWheel:function(e){if(this.active){e.preventDefault(),e.stopPropagation();var t=0;void 0!==e.wheelDelta?t=e.wheelDelta:void 0!==e.detail&&(t=-e.detail),t>0?this.wheel++:this.wheel--,this.signal.dispatch(vg.MouseCaster.WHEEL,this.wheel)}}},vg.MouseCaster.prototype.constructor=vg.MouseCaster,vg.Scene=function(e,t){var i={element:document.body,alpha:!0,antialias:!0,clearColor:\"#fff\",sortObjects:!1,fog:null,light:new THREE.DirectionalLight(16777215),lightPosition:null,cameraType:\"PerspectiveCamera\",cameraPosition:null,orthoZoom:4},s={minDistance:100,maxDistance:1e3,zoomSpeed:2,noZoom:!1};if(i=vg.Tools.merge(i,e),\"boolean\"!=typeof t&&(s=vg.Tools.merge(s,t)),this.renderer=new THREE.WebGLRenderer({alpha:i.alpha,antialias:i.antialias}),this.renderer.setClearColor(i.clearColor,0),this.renderer.sortObjects=i.sortObjects,this.width=window.innerWidth,this.height=window.innerHeight,this.orthoZoom=i.orthoZoom,this.container=new THREE.Scene,this.container.fog=i.fog,this.container.add(new THREE.AmbientLight(14540253)),i.lightPosition||i.light.position.set(-1,1,-1).normalize(),this.container.add(i.light),\"OrthographicCamera\"===i.cameraType){var n=window.innerWidth/this.orthoZoom,l=window.innerHeight/this.orthoZoom;this.camera=new THREE.OrthographicCamera(n/-2,n/2,l/2,l/-2,1,5e3)}else this.camera=new THREE.PerspectiveCamera(50,this.width/this.height,1,5e3);this.contolled=!!t,this.contolled&&(this.controls=new THREE.OrbitControls(this.camera,this.renderer.domElement),this.controls.minDistance=s.minDistance,this.controls.maxDistance=s.maxDistance,this.controls.zoomSpeed=s.zoomSpeed,this.controls.noZoom=s.noZoom),i.cameraPosition&&this.camera.position.copy(i.cameraPosition),window.addEventListener(\"resize\",function(){if(this.width=window.innerWidth,this.height=window.innerHeight,\"OrthographicCamera\"===this.camera.type){var e=this.width/this.orthoZoom,t=this.height/this.orthoZoom;this.camera.left=e/-2,this.camera.right=e/2,this.camera.top=t/2,this.camera.bottom=t/-2}else this.camera.aspect=this.width/this.height;this.camera.updateProjectionMatrix(),this.renderer.setSize(this.width,this.height)}.bind(this),!1),this.attachTo(i.element)},vg.Scene.prototype={attachTo:function(e){e.style.width=this.width+\"px\",e.style.height=this.height+\"px\",this.renderer.setPixelRatio(window.devicePixelRatio),this.renderer.setSize(this.width,this.height),e.appendChild(this.renderer.domElement)},add:function(e){this.container.add(e)},remove:function(e){this.container.remove(e)},render:function(){this.contolled&&this.controls.update(),this.renderer.render(this.container,this.camera)},updateOrthoZoom:function(){if(this.orthoZoom<=0)return void(this.orthoZoom=0);var e=this.width/this.orthoZoom,t=this.height/this.orthoZoom;this.camera.left=e/-2,this.camera.right=e/2,this.camera.top=t/2,this.camera.bottom=t/-2,this.camera.updateProjectionMatrix()},focusOn:function(e){this.camera.lookAt(e.position)}},vg.Scene.prototype.constructor=vg.Scene,vg.SelectionManager=function(e){this.mouse=e,this.onSelect=new vg.Signal,this.onDeselect=new vg.Signal,this.selected=null,this.toggleSelection=!1,this.mouse.signal.add(this.onMouse,this)},vg.SelectionManager.prototype={select:function(e,t){e&&(t=t||!0,this.selected!==e&&this.clearSelection(t),e.selected?this.toggleSelection&&(t&&this.onDeselect.dispatch(e),e.deselect()):e.select(),this.selected=e,t&&this.onSelect.dispatch(e))},clearSelection:function(e){e=e||!0,this.selected&&(e&&this.onDeselect.dispatch(this.selected),this.selected.deselect()),this.selected=null},onMouse:function(e,t){switch(e){case vg.MouseCaster.DOWN:t||this.clearSelection();break;case vg.MouseCaster.CLICK:this.select(t)}}},vg.SelectionManager.prototype.constructor=vg.SelectionManager,vg.Tools={clamp:function(e,t,i){return Math.max(t,Math.min(i,e))},sign:function(e){return e&&e/Math.abs(e)},random:function(e,t){return 1===arguments.length?Math.random()*e-.5*e:Math.random()*(t-e)+e},randomInt:function(e,t){return 1===arguments.length?Math.random()*e-.5*e|0:Math.random()*(t-e+1)+e|0},normalize:function(e,t,i){return(e-t)/(i-t)},getShortRotation:function(e){return e%=this.TAU,e>this.PI?e-=this.TAU:e<-this.PI&&(e+=this.TAU),e},generateID:function(){return Math.random().toString(36).slice(2)+Date.now()},isPlainObject:function(e){if(\"object\"!=typeof e||e.nodeType||e===e.window)return!1;try{if(e.constructor&&!Object.prototype.hasOwnProperty.call(e.constructor.prototype,\"isPrototypeOf\"))return!1}catch(t){return!1}return!0},merge:function(e,t){var i=this,s=Array.isArray(t),n=s&&[]||{};return s?(e=e||[],n=n.concat(e),t.forEach(function(t,s){\"undefined\"==typeof n[s]?n[s]=t:i.isPlainObject(t)?n[s]=i.merge(e[s],t):-1===e.indexOf(t)&&n.push(t)}),n):(e&&i.isPlainObject(e)&&Object.keys(e).forEach(function(t){n[t]=e[t];\n}),Object.keys(t).forEach(function(s){t[s]&&i.isPlainObject(t[s])&&e[s]?n[s]=i.merge(e[s],t[s]):n[s]=t[s]}),n)},now:function(){return window.nwf?window.nwf.system.Performance.elapsedTime:window.performance.now()},empty:function(e){for(;e.lastChild;)e.removeChild(e.lastChild)},radixSort:function(e,t,i,s){if(t=t||0,i=i||e.length,s=s||31,!(t>=i-1||0>s)){for(var n=t,l=i,r=1<<s;l>n;)if(e[n]&r){--l;var h=e[n];e[n]=e[l],e[l]=h}else++n;this.radixSort(e,t,l,s-1),this.radixSort(e,l,i,s-1)}},randomizeRGB:function(e,t){var i,s,n=e.split(\",\"),l=\"rgb(\";for(t=this.randomInt(t),i=0;3>i;i++)s=parseInt(n[i])+t,0>s?s=0:s>255&&(s=255),l+=s+\",\";return l=l.substring(0,l.length-1),l+=\")\"},getJSON:function(e){var t=new XMLHttpRequest,i=\"undefined\"==typeof e.cache?!1:e.cache,s=i?e.url:e.url+\"?t=\"+Math.floor(1e4*Math.random())+Date.now();t.onreadystatechange=function(){if(200===this.status){var t=null;try{t=JSON.parse(this.responseText)}catch(i){return}return void e.callback.call(e.scope||null,t)}0!==this.status&&console.warn(\"[Tools.getJSON] Error: \"+this.status+\" (\"+this.statusText+\") :: \"+e.url)},t.open(\"GET\",s,!0),t.setRequestHeader(\"Accept\",\"application/json\"),t.setRequestHeader(\"Content-Type\",\"application/json\"),t.send(\"\")}};\n//# sourceMappingURL=hex-grid.min.js.map\n","module.exports = {\n  \"size\": 5,\n  \"cellSize\": 10,\n  \"extrudeSettings\": {\n    \"amount\": 1,\n    \"bevelEnabled\": true,\n    \"bevelSegments\": 1,\n    \"steps\": 1,\n    \"bevelSize\": 0.5,\n    \"bevelThickness\": 0.5\n  },\n  \"autogenerated\": true,\n  \"cells\": [\n    {\n      \"q\": -1,\n      \"r\": 0,\n      \"s\": 1,\n      \"h\": 1,\n      \"walkable\": true,\n      \"userData\": {}\n    },\n    {\n      \"q\": 0,\n      \"r\": -1,\n      \"s\": 1,\n      \"h\": 1,\n      \"walkable\": true,\n      \"userData\": {}\n    },\n    {\n      \"q\": 0,\n      \"r\": 0,\n      \"s\": 0,\n      \"h\": 1,\n      \"walkable\": true,\n      \"userData\": {}\n    },\n    {\n      \"q\": 1,\n      \"r\": -1,\n      \"s\": 0,\n      \"h\": 1,\n      \"walkable\": true,\n      \"userData\": {}\n    },\n    {\n      \"q\": -1,\n      \"r\": 1,\n      \"s\": 0,\n      \"h\": 0,\n      \"walkable\": true,\n      \"userData\": {}\n    },\n    {\n      \"q\": 0,\n      \"r\": 1,\n      \"s\": -1,\n      \"h\": 0,\n      \"walkable\": true,\n      \"userData\": {}\n    },\n    {\n      \"q\": 1,\n      \"r\": 0,\n      \"s\": -1,\n      \"h\": 0,\n      \"walkable\": true,\n      \"userData\": {}\n    }]\n};\n","/**\n * Flat-shaded ocean primitive.\n *\n * Based on a Codrops tutorial:\n * http://tympanus.net/codrops/2016/04/26/the-aviator-animating-basic-3d-scene-threejs/\n */\nmodule.exports.Primitive = AFRAME.registerPrimitive('a-ocean', {\n  defaultComponents: {\n    ocean: {},\n    rotation: {x: -90, y: 0, z: 0}\n  },\n  mappings: {\n    width: 'ocean.width',\n    depth: 'ocean.depth',\n    density: 'ocean.density',\n    amplitude: 'ocean.amplitude',\n    amplitudeVariance: 'ocean.amplitudeVariance',\n    speed: 'ocean.speed',\n    speedVariance: 'ocean.speedVariance',\n    color: 'ocean.color',\n    opacity: 'ocean.opacity'\n  }\n});\n\nmodule.exports.Component = AFRAME.registerComponent('ocean', {\n  schema: {\n    // Dimensions of the ocean area.\n    width: {default: 10, min: 0},\n    depth: {default: 10, min: 0},\n\n    // Density of waves.\n    density: {default: 10},\n\n    // Wave amplitude and variance.\n    amplitude: {default: 0.1},\n    amplitudeVariance: {default: 0.3},\n\n    // Wave speed and variance.\n    speed: {default: 1},\n    speedVariance: {default: 2},\n\n    // Material.\n    color: {default: '#7AD2F7', type: 'color'},\n    opacity: {default: 0.8}\n  },\n\n  /**\n   * Use play() instead of init(), because component mappings – unavailable as dependencies – are\n   * not guaranteed to have parsed when this component is initialized.\n   */\n  play: function () {\n    const el = this.el,\n        data = this.data;\n    let material = el.components.material;\n\n    const geometry = new THREE.PlaneGeometry(data.width, data.depth, data.density, data.density);\n    geometry.mergeVertices();\n    this.waves = [];\n    for (let v, i = 0, l = geometry.vertices.length; i < l; i++) {\n      v = geometry.vertices[i];\n      this.waves.push({\n        z: v.z,\n        ang: Math.random() * Math.PI * 2,\n        amp: data.amplitude + Math.random() * data.amplitudeVariance,\n        speed: (data.speed + Math.random() * data.speedVariance) / 1000 // radians / frame\n      });\n    }\n\n    if (!material) {\n      material = {};\n      material.material = new THREE.MeshPhongMaterial({\n        color: data.color,\n        transparent: data.opacity < 1,\n        opacity: data.opacity,\n        shading: THREE.FlatShading,\n      });\n    }\n\n    this.mesh = new THREE.Mesh(geometry, material.material);\n    el.setObject3D('mesh', this.mesh);\n  },\n\n  remove: function () {\n    this.el.removeObject3D('mesh');\n  },\n\n  tick: function (t, dt) {\n    if (!dt) return;\n\n    const verts = this.mesh.geometry.vertices;\n    for (let v, vprops, i = 0; (v = verts[i]); i++){\n      vprops = this.waves[i];\n      v.z = vprops.z + Math.sin(vprops.ang) * vprops.amp;\n      vprops.ang += vprops.speed * dt;\n    }\n    this.mesh.geometry.verticesNeedUpdate = true;\n  }\n});\n","/**\n * Tube following a custom path.\n *\n * Usage:\n *\n * ```html\n * <a-tube path=\"5 0 5, 5 0 -5, -5 0 -5\" radius=\"0.5\"></a-tube>\n * ```\n */\nmodule.exports.Primitive = AFRAME.registerPrimitive('a-tube', {\n  defaultComponents: {\n    tube:           {},\n  },\n  mappings: {\n    path:           'tube.path',\n    segments:       'tube.segments',\n    radius:         'tube.radius',\n    'radial-segments': 'tube.radialSegments',\n    closed:         'tube.closed'\n  }\n});\n\nmodule.exports.Component = AFRAME.registerComponent('tube', {\n  schema: {\n    path:           {default: []},\n    segments:       {default: 64},\n    radius:         {default: 1},\n    radialSegments: {default: 8},\n    closed:         {default: false}\n  },\n\n  init: function () {\n    const el = this.el,\n        data = this.data;\n    let material = el.components.material;\n\n    if (!data.path.length) {\n      console.error('[a-tube] `path` property expected but not found.');\n      return;\n    }\n\n    const curve = new THREE.CatmullRomCurve3(data.path.map(function (point) {\n      point = point.split(' ');\n      return new THREE.Vector3(Number(point[0]), Number(point[1]), Number(point[2]));\n    }));\n    const geometry = new THREE.TubeGeometry(\n      curve, data.segments, data.radius, data.radialSegments, data.closed\n    );\n\n    if (!material) {\n      material = {};\n      material.material = new THREE.MeshPhongMaterial();\n    }\n\n    this.mesh = new THREE.Mesh(geometry, material.material);\n    this.el.setObject3D('mesh', this.mesh);\n  },\n\n  update: function (prevData) {\n    if (!Object.keys(prevData).length) return;\n\n    this.remove();\n    this.init();\n  },\n\n  remove: function () {\n    if (this.mesh) this.el.removeObject3D('mesh');\n  }\n});\n","require('./src/controls');\nrequire('./src/loaders');\nrequire('./src/misc');\nrequire('./src/pathfinding');\nrequire('./src/primitives');\n"],"sourceRoot":""}